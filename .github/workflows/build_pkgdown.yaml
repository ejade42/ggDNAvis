on:
  push:
    branches:
      - main
      - release/*
  workflow_dispatch:

name: build_pkgdown

permissions: read-all

jobs:
  pkgdown:
    runs-on: ubuntu-latest
    concurrency:
      group: pkgdown-${{ github.event_name != 'pull_request' || github.run_id }}
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      
    steps:
      - name: Checkout code from trigger branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      
      - name: Fetch all release branches
        run: |
          git fetch --prune origin
          git branch -a


      - name: Get trigger branch name
        id: trigger
        run: echo "branch=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT


      - name: Collect release branches and boolean
        id: collect
        run: |
          git show origin/main:_pkgdown_main.yml > _pkgdown.yml
          git branch -a

          BUILD_ALL=$(yq -r '.site.build_all_versions // "false"' _pkgdown.yml)
          echo "build_all=$BUILD_ALL" >> $GITHUB_OUTPUT

          RELEASES=$(git for-each-ref --format="%(refname:short)" refs/remotes/origin/release/ \
            | sed "s|origin/release/||" \
            | sort -Vr \
            | tr "\n" " ")
          echo "releases=$RELEASES" >> $GITHUB_OUTPUT
          echo "Releases detected: ${RELEASES}"

          LATEST=$(echo "$RELEASES" | awk '{print $1}')
          echo "latest=$LATEST" >> $GITHUB_OUTPUT
          echo "Latest release detected: ${LATEST}"


      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libproj-dev libgdal-dev libgeos-dev libudunits2-dev


      - name: Setup R environment
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true


      - name: Setup R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::pkgdown, local::.


      - name: Setup pandoc
        uses: r-lib/actions/setup-pandoc@v2


      - name: Build site from branches
        run: |
          TRIGGER_BRANCH="${{ steps.trigger.outputs.branch }}"
          BUILD_ALL="${{ steps.collect.outputs.build_all }}"
          RELEASES="${{ steps.collect.outputs.releases }}"
          LATEST="${{ steps.collect.outputs.latest }}"
          
          echo "Trigger branch: ${TRIGGER_BRANCH}"
          echo "Build all bool: ${BUILD_ALL}"
          echo "Releases found: ${RELEASES}"
          echo "Latest release: ${LATEST}"
          
          
          echo; echo "Pre-processing _pkgdown_main.yml"
          ## Retrieve from main and read URL from original
          git show origin/main:_pkgdown_main.yml > _pkgdown_layout.yml
          BASE_URL=$(yq -r '.url' _pkgdown_layout.yml)
          
          ## Inject version menu
          VERSION_MENU=""
          for release in $RELEASES; do
            VERSION_MENU="${VERSION_MENU}\n        - text: \"${release}\"\n          href: __BASE_URL__${release}/"
          done
          sed -i "/# VERSIONS_PLACEHOLDER #/c\\$VERSION_MENU" _pkgdown_layout.yml
          
          ## Replace URL
          sed -i "s|__BASE_URL__|$BASE_URL|g" _pkgdown_layout.yml
          
          ## Inspect contents for debugging
          echo "Current contents of _pkgdown_layout.yml:"
          cat _pkgdown_layout.yml

          
          echo; echo; echo "Build step 1: Building latest release (${LATEST})"
          ## Checkout latest release branch but overwrite _pkgdown.yml
          git checkout -B "release-${LATEST}" "origin/release/${LATEST}"
          cat _pkgdown_layout.yml _pkgdown_reference.yml > _pkgdown.yml
          ## Build site in docs/
          Rscript -e "pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE, dest_dir = 'docs/')"

          
          echo; echo; echo "Build step 2: Building latest dev"
          ## Checkout main branch
          git checkout -B "dev" "origin/main"
          cat _pkgdown_layout.yml _pkgdown_reference.yml > _pkgdown.yml
          ## Build site in docs/dev/
          Rscript -e "pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE, dest_dir = 'docs/dev/')"

          
          i=1
          if [ "${BUILD_ALL}" == "true" ]; then
            echo; echo; echo "Build step 3: Building all prior releases"
            for release in $RELEASES; do
              echo "Build step 3-${i}: Building for ${release}"
              
              ## Checkout prior release branch but overwrite _pkgdown.yml
              git checkout -B "release-${release}" "origin/release/${release}"
              cat _pkgdown_layout.yml _pkgdown_reference.yml > _pkgdown.yml
              
              ## Build site in docs/vX.X.X
              Rscript -e "pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE, dest_dir = 'docs/${release}')"
              
              i=$((i + 1))
              echo; echo
            done
          else
            echo; echo; echo "Skipping step 3 (prior releases) due to _pkgdown_main.yml config in main"
          fi
          
          
          echo; echo; echo "Copying to deploy folder"
          mkdir deploy
          cp -r docs/* deploy/

      - name: Deploy to GitHub Pages ðŸš€
        if: github.event_name != 'pull_request'
        uses: JamesIves/github-pages-deploy-action@v4.5.0
        with:
          clean: false
          branch: gh-pages
          folder: deploy
          target-folder: ${{ steps.target.outputs.folder }}
      
      - name: Upload working directory as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pkgdown-working-directory
          path: .
          
         