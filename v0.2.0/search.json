[{"path":"https://ejade42.github.io/ggDNAvis/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Evelyn Jade Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Evelyn Jade. Author, maintainer, copyright holder.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jade E (2025). ggDNAvis: 'ggplot2'-Based Tools Visualising DNA Sequences Modifications. R package version 0.2.0, https://ejade42.github.io/ggDNAvis/.","code":"@Manual{,   title = {ggDNAvis: 'ggplot2'-Based Tools for Visualising DNA Sequences and Modifications},   author = {Evelyn Jade},   year = {2025},   note = {R package version 0.2.0},   url = {https://ejade42.github.io/ggDNAvis/}, }"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_1-ggdnavis","dir":"","previous_headings":"","what":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"ggDNAvis R package uses ggplot2 visualise genetic data three main types: single DNA/RNA sequence split across multiple lines, multiple DNA/RNA sequences, occupying whole line, base modifications DNA methylation called modified-bases models Dorado Guppy. accomplished main functions visualise_single_sequence(), visualise_many_sequences(), visualise_methylation() respectively. helper sequences streamlined data processing, detailed later section visualisation type. Additionally, ggDNAvis contains built-example dataset (example_many_sequences) set colour palettes DNA visualisation (sequence_colour_palettes). Note spellings British English version (e.g. “colour”, “visualise”). Aliases defined, meaning American spellings work. latest release ggDNAvis available CRAN via github releases. Alternatively, latest -development version can installed directly github repository, may unexpected bugs. Throughout manual, ggDNAvis, dplyr, ggplot2 loaded.","code":"## Latest release version install.packages(\"ggDNAvis\")  ## Current development build (may have unexpected bugs!) devtools::install_github(\"ejade42/ggDNAvis\")  ## Specific version from github devtools::install_github(\"ejade42/ggDNAvis\", ref = \"v0.2.0\") ## Load this package library(ggDNAvis)  ## Load useful tidyverse packages ## These are ggDNAvis dependencies, so will always be installed when installing ggDNAvis library(dplyr) library(ggplot2)  ## Function for viewing tables throughout this document github_table <- function(data) {     quoted <- as.data.frame(         lapply(data, function(x) {paste0(\"`\", x, \"`\")}),         check.names = FALSE     )     kable_output <- knitr::kable(quoted)     return(kable_output) }  ## Set up file locations output_location <- \"README_files/output/\" github_location <- \"https://raw.githubusercontent.com/ejade42/ggDNAvis/v0.2.0/README_files/output/\" knitr::opts_chunk$set(fig.path = output_location)"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_2-summaryquickstart","dir":"","previous_headings":"","what":"2 Summary/quickstart","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"section contains one example type visualisation. See relevant full sections details customisation options.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_21-single-sequence","dir":"","previous_headings":"","what":"2.1 Single sequence","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"","code":"## Create input sequence. This can be any DNA/RNA string sequence <- paste(c(rep(\"GGC\", 72), rep(\"GGAGGAGGCGGC\", 15)), collapse = \"\")  ## Create visualisation ## This lists out all arguments ## Usually it's fine to leave most of these as defaults visualise_single_sequence(     sequence = sequence,     sequence_colours = sequence_colour_palettes$bright_pale,     background_colour = \"white\",     line_wrapping = 60,     spacing = 1,     margin = 0.5,     sequence_text_colour = \"black\",     sequence_text_size = 16,     index_annotation_colour = \"darkred\",     index_annotation_size = 12.5,     index_annotation_interval = 15,     index_annotations_above = TRUE,     index_annotation_vertical_position = 1/3,     outline_colour = \"black\",     outline_linewidth = 3,     outline_join = \"mitre\",     return = FALSE,     filename = paste0(output_location, \"summary_single_sequence.png\"),     render_device = ragg::agg_png,     pixels_per_base = 100 )  ## View image knitr::include_graphics(paste0(github_location, \"summary_single_sequence.png\"))"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_22-many-sequences","dir":"","previous_headings":"","what":"2.2 Many sequences","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"","code":"## Read and merge data fastq_data <- read_fastq(\"inst/extdata/example_many_sequences_raw.fastq\", calculate_length = TRUE) metadata   <- read.csv(\"inst/extdata/example_many_sequences_metadata.csv\") merged_fastq_data <- merge_fastq_with_metadata(fastq_data, metadata)  ## Extract character vector ## These arguments should all be considered, as they are highly specific to your data sequences_for_visualisation <- extract_and_sort_sequences(     sequence_dataframe = merged_fastq_data,     sequence_variable = \"forward_sequence\",     grouping_levels = c(\"family\" = 8, \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = TRUE )  ## Create visualisation ## Usually it's fine to leave most of these as defaults visualise_many_sequences(     sequences_vector = sequences_for_visualisation,     sequence_colours = sequence_colour_palettes$bright_deep,     background_colour = \"white\",     margin = 0.5,     sequence_text_colour = \"white\",     sequence_text_size = 16,     outline_colour = \"black\",     outline_linewidth = 3,     outline_join = \"mitre\",     return = FALSE,     filename = paste0(output_location, \"summary_many_sequences.png\"),     render_device = ragg::agg_png,     pixels_per_base = 100 )  ## View image knitr::include_graphics(paste0(github_location, \"summary_many_sequences.png\"))"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_23-methylationmodification","dir":"","previous_headings":"","what":"2.3 Methylation/modification","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"","code":"## Read and merge data modification_data <- read_modified_fastq(\"inst/extdata/example_many_sequences_raw_modified.fastq\") metadata          <- read.csv(\"inst/extdata/example_many_sequences_metadata.csv\") merged_modification_data <- merge_methylation_with_metadata(modification_data, metadata,                                                             reversed_location_offset = 1)  ## Extract list of character vectors ## These arguments should all be considered, as they are highly specific to your data methylation_for_visualisation <- extract_methylation_from_dataframe(     modification_data = merged_modification_data,     locations_colname = \"forward_C+m?_locations\",     probabilities_colname = \"forward_C+m?_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"family\" = 8, \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = TRUE )  ## Create visualisation ## Usually it's fine to leave most of these as defaults visualise_methylation(     modification_locations     = methylation_for_visualisation$locations,     modification_probabilities = methylation_for_visualisation$probabilities,     sequence_lengths           = methylation_for_visualisation$lengths,     background_colour = \"white\",     other_bases_colour = \"grey\",     low_colour = \"blue\",     high_colour = \"red\",     low_clamp = 0.1*255,     high_clamp = 0.9*255,     outline_colour = \"black\",     outline_linewidth = 3,     outline_join = \"mitre\",     modified_bases_outline_colour = NA,     modified_bases_outline_linewidth = NA,     modified_bases_outline_join = NA,     other_bases_outline_colour = NA,     other_bases_outline_linewidth = NA,     other_bases_outline_join = NA,     margin = 0.5,     return = FALSE,     filename = paste0(output_location, \"summary_methylation.png\"),     render_device = ragg::agg_png,     pixels_per_base = 20 )  ## View image knitr::include_graphics(paste0(github_location, \"summary_methylation.png\")) ## Create scalebar and save to ggplot object ## Usually it's fine to leave most of these as defaults scalebar <- visualise_methylation_colour_scale(     low_colour = \"blue\",     high_colour = \"red\",     low_clamp = 0.1*255,     high_clamp = 0.9*255,     full_range = c(0, 255),     precision = 10^3,     background_colour = \"white\",     x_axis_title = \"Methylation probability\",     do_x_ticks = TRUE,     do_side_scale = FALSE,     side_scale_title = NULL,     outline_colour = \"black\",     outline_linewidth = 1 )  ## Write png from object (the object is just a standard ggplot) ggsave(paste0(output_location, \"summary_methylation_scalebar.png\"), scalebar, dpi = 300, width = 5, height = 1.25, device = ragg::agg_png)  ## View image knitr::include_graphics(paste0(github_location, \"summary_methylation_scalebar.png\"))"},{"path":[]},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_31-introduction-to-example_many_sequences","dir":"","previous_headings":"","what":"3.1 Introduction to example_many_sequences","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"ggDNAvis comes example dataset example_many_sequences. data, row/observation represents one read. Reads associated metadata participant family belong, sequence data DNA sequence, FASTQ quality scores, modification information retrieved MM ML tags SAM/BAM file. DNA sequence column sequence information used visualising single/multiple sequences. visualising DNA modification, data contains information 5-cytosine-methylation 5-cytosine-hydroxymethylation. given modification type (e.g. methylation), visualisation requires column locations column probabilities. dataset, relevant columns methylation_locations methylation_probabilities methylation hydroxymethylation_locations hydroxymethylation_probabilities hydroxymethylation. Locations stored comma-condensed string integers read, produced via vector_to_string(), indicate indices along read probability modification assessed. example, methylation might assessed CpG site, read \"GGCGGCGGAGGCGGCGGA\" third, sixth, twelfth, fifteenth bases, thus location string \"3,6,12,15\" read. Probabilities also comma-condensed string integers produced via vector_to_string(), integer represents probability corresponding base modified. Probabilities stored 8-bit integers (0-255) score NN represents probability space N256\\frac{N}{256} N+1256\\frac{N+1}{256}. read , probability string \"250,3,50,127\" indicate third base almost certainly methylated (97.66%-98.05%), sixth base almost certainly methylated (1.17%-1.56%), twelfth base likely methylated (19.53%-19.92%), fifteenth base may may methylated (49.61%-50.00%)","code":"## View the first 4 rows of example_many_sequences data github_table(head(example_many_sequences, 4)) ## Function to convert integer scores to corresponding percentages convert_8bit_to_decimal_prob <- function(x) {     return(c(  x   / 256,               (x+1) / 256)) }  ## Convert comma-condensed string back to numerical vector ## string_to_vector() and vector_to_string() are crucial ggDNAvis helpers probabilities <- string_to_vector(\"250,3,50,127\")  ## For each probability, print 8-bit score then percentage range for (probability in probabilities) {     percentages <- round(convert_8bit_to_decimal_prob(probability), 4) * 100     cat(\"8-bit probability: \", probability, \"\\n\", sep = \"\")     cat(\"Decimal probability: \", percentages[1], \"% - \", percentages[2], \"%\", \"\\n\\n\", sep = \"\") } ## 8-bit probability: 250 ## Decimal probability: 97.66% - 98.05% ##  ## 8-bit probability: 3 ## Decimal probability: 1.17% - 1.56% ##  ## 8-bit probability: 50 ## Decimal probability: 19.53% - 19.92% ##  ## 8-bit probability: 127 ## Decimal probability: 49.61% - 50%"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_32-introduction-to-string_to_vector-and-vector_to_string","dir":"","previous_headings":"","what":"3.2 Introduction to string_to_vector() and vector_to_string()","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"Lots data used ggDNAvis requires series multiple values stored within single observation dataframe. solution used condensing vectors single string (character value) simple storage, reconstituting original vectors needed. functions basic wrappers around strsplit() paste(, collapse = \",\") easy use readable. Additionally, can used reading SAM/BAM MM ML tags, stored comma-separated lists within modified FASTQ files, can also processed using functions. multiple strings (.e. character vector) input string_to_vector(), concatenate produce single output vector. intended, useful behaviour help visualisation code package. list separate vectors input value desired, lapply() can used.","code":"vector_to_string(c(1, 2, 3, 4)) ## [1] \"1,2,3,4\" string_to_vector(\"1,2,3,4\") # the default vector type is numeric ## [1] 1 2 3 4 vector_to_string(c(\"these\", \"are\", \"some\", \"words\")) ## [1] \"these,are,some,words\" string_to_vector(\"these,are,some,words\", type = \"character\") ## [1] \"these\" \"are\"   \"some\"  \"words\" vector_to_string(c(TRUE, FALSE, TRUE)) ## [1] \"TRUE,FALSE,TRUE\" string_to_vector(\"TRUE,FALSE,TRUE\", type = \"logical\") ## [1]  TRUE FALSE  TRUE string_to_vector(c(\"1,2,3\", \"4,5,6\")) ## [1] 1 2 3 4 5 6 lapply(c(\"1,2,3\", \"4,5,6\"), string_to_vector) ## [[1]] ## [1] 1 2 3 ##  ## [[2]] ## [1] 4 5 6"},{"path":[]},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_331-standard-fastq","dir":"","previous_headings":"3.3 Loading from FASTQ and metadata file","what":"3.3.1 Standard FASTQ","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"read normal FASTQ file (containing read ID/header, sequence, quality scores read), function read_fastq() can used. example data file inst/extdata/example_many_sequences_raw.fastq Using basic read_fastq() function returns dataframe read ID, sequence, quality columns. Optionally, sequence_length column can generated setting calculate_length = TRUE. However, can see sequences (e.g. F1-1c) reversed. occurs read - strand biochemical level. convert reverse reads forward equivalents, incorporate additional data participant family read belongs, make use metadata file located inst/extdata/example_many_sequences_metadata.csv see metadata file contains read column unique read IDs direction column specifying whether read \"forward\" \"reverse\". two columns mandatory. Additionally, family participant ID columns providing additional information read. Note: direction column can produced manually. However, large data volumes may effective use SAMtools write TXT files forward reverse read IDs via -F/-f 16 flags, e.g.: simply read lines file use assign directions: case, metadata read direction columns, can use merge_fastq_with_metadata() combine metadata fastq data. Crucially, function uses direction column metadata determine reads reverse, reverse-complements reverse reads produce new column containing forward version reads: Now forward_sequence column (scroll right can’t see !). can now reformat data exactly included example_many_sequences data: , just standard FASTQ file simple metadata CSV successfully reproduced example_many_sequences data (excluding methylation/modification information) via read_fastq() merge_fastq_with_metadata(). can also write dataframe FASTQ using write_fastq(): Note quite identical original. ’s wrote forward-sequence forward-quality columns (renaming), new FASTQ contains forward versions. wanted original FASTQ just provide colnames original sequence quality rather forward versions. careful either sequence quality forward versions neither . mismatched new FASTQ wrong.","code":"## Look at first 16 lines of FASTQ fastq_raw <- readLines(\"inst/extdata/example_many_sequences_raw.fastq\") for (i in 1:16) {     cat(fastq_raw[i], \"\\n\") } ## F1-1a  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90  ## F1-1b  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## 60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139  ## F1-1c  ## TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC  ## +  ## @9889C8<<*96;52!*86,227.<I.8AI<>;2/391%D19*5@G=8<7<:!7+;:I:-!03<0AI>9?4!57I*-C#25FD24F;  ## F1-1d  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0 ## Load data from FASTQ fastq_data <- read_fastq(\"inst/extdata/example_many_sequences_raw.fastq\", calculate_length = TRUE)  ## View first 4 rows github_table(head(fastq_data, 4)) ## Load metadata from CSV metadata <- read.csv(\"inst/extdata/example_many_sequences_metadata.csv\")  ## View first 4 rows github_table(head(metadata, 4)) ## bash/shell code for using SAMtools on the command line:  ## See the samtools flag documentation for more details on why ## -F 16 selects forward reads and -F 16 selects reverse reads samtools view -F 16 ${input_bam_file} | \\ awk '{print $1}'  > \"forward_reads.txt\"  samtools view -f 16 ${input_bam_file} | \\ awk '{print $1}'  > \"reverse_reads.txt\" ## Use files from last step to construct vectors of forward and reverse IDs forward_reads <- readLines(\"forward_reads.txt\") reverse_reads <- readLines(\"reverse_reads.txt\")  ## Use rep() to add a direction column constructed_metadata <- data.frame(     read = c(forward_reads, reverse_reads),     direction = c(rep(\"forward\", length(forward_reads)),                   rep(\"reverse\", length(reverse_reads)))     ) ## Merge fastq data with metadata ## This function reverse-complements reverse reads to get all forward versions merged_fastq_data <- merge_fastq_with_metadata(fastq_data, metadata)  ## View first 4 rows github_table(head(merged_fastq_data, 4)) ## Subset to only the columns present in example_many_sequences merged_fastq_data <- merged_fastq_data[, c(\"family\", \"individual\", \"read\", \"forward_sequence\", \"sequence_length\", \"forward_quality\")]  ## Rename \"forward_sequence\" to \"sequence\" and same for quality colnames(merged_fastq_data)[c(4,6)] <- c(\"sequence\", \"quality\")  ## View first 4 rows of data produced from files github_table(head(merged_fastq_data, 4)) ## View first 4 rows of example_many_sequences (with modification columns excluded) github_table(head(example_many_sequences[, 1:6], 4)) ## Check if equal identical(merged_fastq_data, example_many_sequences[, 1:6]) ## [1] TRUE ## Use write_fastq with filename = NA and return = TRUE to create the FASTQ,  ## but return it as a character vector rather than writing to file. output_fastq <- write_fastq(merged_fastq_data,                              filename = NA, return = TRUE,                             read_id_colname = \"read\",                              sequence_colname = \"sequence\",                             quality_colname = \"quality\") ## View first 16 lines for (i in 1:16) {     cat(output_fastq[i], \"\\n\") } ## F1-1a  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90  ## F1-1b  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## 60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139  ## F1-1c  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## ;F42DF52#C-*I75!4?9>IA0<30!-:I:;+7!:<7<8=G@5*91D%193/2;><IA8.I<.722,68*!25;69*<<8C9889@  ## F1-1d  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_332-modified-fastq-eg-methylation","dir":"","previous_headings":"3.3 Loading from FASTQ and metadata file","what":"3.3.2 Modified FASTQ (eg methylation)","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"FASTQ files can extended include DNA modification (often 5-cytosine-methylation) information within header rows. often, information comes Nanopore long-read sequencing basecalled modification-capable model Guppy Dorado, resulting SAM BAM files. SAM/BAM files, modification information stored MM ML tags. can copied header rows FASTQ file via: ggDNAvis contains tools reading , processing, writing modified FASTQ files. example data file inst/extdata/example_many_sequences_raw_modified.fastq file identical standard FASTQ seen reading standard FASTQ section sequence quality lines, MM ML tags stored header. See SAM tags specification documentation read_modified_fastq(), merge_methylation_with_metadata(), reverse_locations_if_needed() comprehensive explanation store methylation/modification information. modification information stored FASTQ header lines can parsed read_modified_fastq(). converts locations SAM/BAM MM format simply indices along read modification assessed (starting indexing 1). example, F1-1a, C+m? (methylation) locations start \"3,6,9,12\", indicating third, sixth, ninth, twelfth bases read assessed probability methylation. Checking sequence, see CpG sites (CG dinucleotides), main DNA methylation sites genome. assessed site, modification probability given 8-bit integer (0-255), 0 represents ~0% modification probability 255 represents ~100% modification probability (fully explained introduction example_many_sequences). Ultimately, read_modified_fastq() outputs dataframe standard read information (ID, sequence, length, quality), column stating modification types assessed read (e.g. \"C+h?\" hydroxymethylation \"C+m?\" methylation - refer SAM tags specification), modification type, column assessed locations (indices along read) column modification probabilities (8-bit integers). Modification types, locations, probabilities stored comma-condensed strings produced vectors via vector_to_string(). can converted back vectors via string_to_vector() - see introduction string/vector functions. standard FASTQ, reads modified FASTQ reverse. However, assessed modification locations indices along read probabilities correspond locations sequence, modification information needs reversed addition reverse complementing DNA sequence. Analogous , achieved via merge_methylation_with_metadata() function. metadata identical previous use reading standard FASTQ section. merged methylation data contains forward_ rows sequence quality, , also hydroxymethylation methylation locations probabilities. However, looking modification locations columns (scroll right table), can see indices assessed modification 4, 7, 10 etc sequence \"GGCGGCGGCGGC...\". actual biochemical modification Cs reverse strand, corresponding Gs forward strand according Watson-Crick base pairing. many purposes, may desirable keep positions indicate reality, modification occurred exactly location strand. accomplished setting offset = 0 (default) inside merge_methylation_with_metadata(). However, also option offset modification locations 1. symmetrical modification sites CGs, means C reverse strand modified, gets attributed C forward strand even though direct complementary base G. advantage means CG sites (.e. potential methylation sites) always 5-methylcytosine modifications associated C CG, regardless strand information came . also often useful, ensures information consistent (provided locations palindromic reverse-complemented) modifications always attached correct base e.g. C-methylation C. accomplished setting offset = 1 inside merge_methylation_with_metadata(). Either options can valid useful, make sure think ! proceed offset = 1 forward versions match example_many_sequences. Now, looking methylation hydroxymethylation locations see forward-version locations 3, 6, 9, 12…, corresponding Cs CGs. makes reversed reverse read consistent forward reads. can now extract relevant columns demonstrate new dataframe read modified FASTQ metadata CSV exactly example_many_sequences. , modified FASTQ file metadata CSV successfully reproduced example_many_sequences data including methylation/modification information via read_modified_fastq() merge_methylation_with_metadata(). similarly , can write back modified FASTQ file via write_modified_fastq(). standard FASTQ, quite identical original. ’s wrote forward-sequence, forward-quality, forward-locations, forward-probabilities columns (renaming), new FASTQ contains forward versions. wanted original FASTQ just provide colnames original sequence, quality, locations, probabilities rather forward versions. careful either sequence, quality, locations, probabilities forward versions none . mismatched new FASTQ wrong.","code":"samtools fastq -T MM,ML ${input_bam_file} > \"modified_fastq_file.fastq\" ## Look at first 16 lines of FASTQ modified_fastq_raw <- readLines(\"inst/extdata/example_many_sequences_raw_modified.fastq\") for (i in 1:16) {     cat(modified_fastq_raw[i], \"\\n\") } ## F1-1a    MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; ML:B:C,26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34,29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90  ## F1-1b    MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; ML:B:C,10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2,10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## 60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139  ## F1-1c    MM:Z:C+h?,1,1,5,1,1,5,1,1,5,1,1,5,1,1,1,1,1,1,1,1;C+m?,1,1,5,1,1,5,1,1,5,1,1,5,1,1,1,1,1,1,1,1; ML:B:C,37,47,64,63,33,64,52,55,17,46,47,64,56,64,56,60,55,58,63,40,45,192,126,129,39,129,183,79,19,195,62,124,173,128,84,159,80,165,141,206  ## TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC  ## +  ## @9889C8<<*96;52!*86,227.<I.8AI<>;2/391%D19*5@G=8<7<:!7+;:I:-!03<0AI>9?4!57I*-C#25FD24F;  ## F1-1d    MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; ML:B:C,33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55,216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0 ## Load data from FASTQ methylation_data <- read_modified_fastq(\"inst/extdata/example_many_sequences_raw_modified.fastq\")  ## View first 4 rows github_table(head(methylation_data, 4)) ## Load metadata from CSV metadata <- read.csv(\"inst/extdata/example_many_sequences_metadata.csv\")  ## View first 4 rows github_table(head(metadata, 4)) ## Merge fastq data with metadata ## This function reverse-complements reverse reads to get all forward versions ## And correctly flips location and probability information ## See ?merged_methylation_data and ?reverse_locations_if_needed for details merged_methylation_data <- merge_methylation_with_metadata(methylation_data, metadata)  ## View first 4 rows github_table(head(merged_methylation_data, 4)) ## Here the stars represent the true biochemical modifications on the reverse strand: ## (occurring at the Cs of CGs in the 5'-3' direction) ##  ##  ## 5'  GGCGGCGGCGGCGGCGGA  3' ## 3'  CCGCCGCCGCCGCCGCCT  5' ##        *  *  *  *  *  ## If we take the complementary locations on the forward strand, ## the modification locations correspond to Gs rather than Cs, ## but are in the exact same locations: ##  ##        o  o  o  o  o       ## 5'  GGCGGCGGCGGCGGCGGA  3' ## 3'  CCGCCGCCGCCGCCGCCT  5' ##        *  *  *  *  *  ## If we offset the locations by 1 on the forward strand, ## the modifications are always associated with the C of a CG, ## but the locations are moved slightly: ##  ##       o  o  o  o  o        ## 5'  GGCGGCGGCGGCGGCGGA  3' ## 3'  CCGCCGCCGCCGCCGCCT  5' ##        *  *  *  *  * ## Merge fastq data with metadata, offsetting reversed locations by 1 merged_methylation_data <- merge_methylation_with_metadata(methylation_data,                                                             metadata,                                                             reversed_location_offset = 1)  ## View first 4 rows github_table(head(merged_methylation_data, 4)) ## Subset to only the columns present in example_many_sequences merged_methylation_data <- merged_methylation_data[, c(\"family\", \"individual\", \"read\", \"forward_sequence\", \"sequence_length\", \"forward_quality\", \"forward_C+m?_locations\", \"forward_C+m?_probabilities\", \"forward_C+h?_locations\", \"forward_C+h?_probabilities\")]  ## Rename \"forward_sequence\" to \"sequence\" and same for quality colnames(merged_methylation_data)[c(4,6:10)] <- c(\"sequence\", \"quality\", \"methylation_locations\", \"methylation_probabilities\", \"hydroxymethylation_locations\", \"hydroxymethylation_probabilities\")  ## View first 4 rows of data produced from files github_table(head(merged_methylation_data, 4)) ## View first 4 rows of example_many_sequences github_table(head(example_many_sequences, 4)) ## Check if equal identical(merged_methylation_data, example_many_sequences) ## [1] TRUE ## Use write_modified_fastq with filename = NA and return = TRUE to create  ## the FASTQ, but return it as a character vector rather than writing to file. output_fastq <- write_modified_fastq(merged_methylation_data,                                       filename = NA, return = TRUE,                                      read_id_colname = \"read\",                                       sequence_colname = \"sequence\",                                      quality_colname = \"quality\",                                      locations_colnames = c(\"hydroxymethylation_locations\",                                                             \"methylation_locations\"),                                      probabilities_colnames = c(\"hydroxymethylation_probabilities\",                                                                 \"methylation_probabilities\"),                                      modification_prefixes = c(\"C+h?\", \"C+m?\")) ## View first 16 lines for (i in 1:16) {     cat(output_fastq[i], \"\\n\") } ## F1-1a    MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; ML:B:C,26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34,29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90  ## F1-1b    MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; ML:B:C,10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2,10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## 60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139  ## F1-1c    MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; ML:B:C,40,63,58,55,60,56,64,56,64,47,46,17,55,52,64,33,63,64,47,37,206,141,165,80,159,84,128,173,124,62,195,19,79,183,129,39,129,126,192,45  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## ;F42DF52#C-*I75!4?9>IA0<30!-:I:;+7!:<7<8=G@5*91D%193/2;><IA8.I<.722,68*!25;69*<<8C9889@  ## F1-1d    MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; ML:B:C,33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55,216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82  ## GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  ## +  ## :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0"},{"path":[]},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_41-basic-visualisation","dir":"","previous_headings":"","what":"4.1 Basic visualisation","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"ggDNAvis can used visualise single DNA sequence via visualise_single_sequence(). function extremely simple, just taking DNA sequence input. use NOTCH2NLC repeat expansion sequence F1-1 Figure 1 Sone et al. (2019), GGCs replaced GGT four nucleotides visualised.  default, visualise_single_sequence() return ggplot object. can useful view instant debugging. However, usually rendered sensible scale aspect ratio. Therefore, preferable set filename = <file_to_write_to.png> export, function built-logic scaling correctly (resolution configurable via pixels_per_base argument). don’t use interactive debugging, also set return = FALSE.  typical single sequence visualisation produced package. However, almost every aspect visualisation configurable via arguments visualise_single_sequence() (resulting ggplot object can modified standard ggplot manner required). resolution can changed pixels_per_base, recommended go low otherwise text can become illegible (going high obviously increases filesize). default value 100 often happy medium.  visualise_ functions, render_device argument can used control rendering method. fed directly ggsave(device = ), ggsave documentation fully explains use. default ragg::agg_png works well ensures consistent graphics (though font) rendering across platforms/operating systems, need change .","code":"## Define sequence variable sone_2019_f1_1_expanded_ggt_added <- \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGTGGTGGTGGTGGTGGTGGTGGTGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGCGGCGGCGGCGGC\"  ## Use all default settings visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added) ## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                            filename = paste0(output_location, \"single_sequence_01.png\"),                            return = FALSE)  ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_01.png\")) ## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                            filename = paste0(output_location, \"single_sequence_02.png\"),                            return = FALSE,                           pixels_per_base = 20)  ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_02.png\"))"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_42-colour-customisation","dir":"","previous_headings":"","what":"4.2 Colour customisation","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"colours used visualisation can modified following arguments: sequence_colours: length-4 vector colours used boxes , C, G, T respectively. sequence_text_colour: colour used , C, G, T lettering inside boxes. index_annotation_colour: colour used index numbers /boxes. background_colour: colour used background. outline_colour: colour used box outlines. example, can change colours inadvisable way:  Included ggDNAvis set colour palettes sequence colours can often helpful. default sequence_colour_palettes$ggplot_style, seen first example . palettes $bright_pale, $bright_pale2, $bright_deep, $sanger: bright_pale palette works well either white black text, depending much text desired “pop”:   bright_pale2 slightly lighter shade green:  bright_deep palette works best white text:  sanger palette inspired old-school Sanger sequencing readouts works best white text:","code":"## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                           filename = paste0(output_location, \"single_sequence_03.png\"),                            return = FALSE,                           sequence_colours = c(\"black\", \"white\", \"#00FFFF\", \"#00FF00\"),                           sequence_text_colour = \"magenta\",                           index_annotation_colour = \"yellow\",                           background_colour = \"red\",                           outline_colour = \"orange\")  ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_03.png\")) ## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                           filename = paste0(output_location, \"single_sequence_04.png\"),                            return = FALSE,                           sequence_colours = sequence_colour_palettes$bright_pale,                           sequence_text_colour = \"white\")  ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_04.png\")) ## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                           filename = paste0(output_location, \"single_sequence_05.png\"),                            return = FALSE,                           sequence_colours = sequence_colour_palettes$bright_pale,                           sequence_text_colour = \"black\")  ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_05.png\")) ## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                           filename = paste0(output_location, \"single_sequence_06.png\"),                            return = FALSE,                           sequence_colours = sequence_colour_palettes$bright_pale2,                           sequence_text_colour = \"black\")  ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_06.png\")) ## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                           filename = paste0(output_location, \"single_sequence_07.png\"),                            return = FALSE,                           sequence_colours = sequence_colour_palettes$bright_deep,                           sequence_text_colour = \"white\")  ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_07.png\")) ## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                           filename = paste0(output_location, \"single_sequence_08.png\"),                            return = FALSE,                           sequence_colours = sequence_colour_palettes$sanger,                           sequence_text_colour = \"white\",                           outline_colour = \"darkgrey\")  ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_08.png\"))"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_43-layout-customisation","dir":"","previous_headings":"","what":"4.3 Layout customisation","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"Many aspects sequence layout also customisable via arguments: line_wrapping: length/number bases line. spacing: number blank lines line sequence. Must integer - fundamental consequence images rasterised whole visualisation logic need re-implemented allow non-integer spacing values. margin: margin around image terms size base boxes (e.g. default value 0.5 adds margin half size base boxes, 50 px default pixels_per_base = 100). Note index annotations , minimum margin 1 (annotations ) (annotations ) allow space render annotations, margin set less increased 1 relevant direction. Also note margin narrow can clip box outlines, rendered centred actual edge boxes (.e. “spill ” little side outline linewidth non-zero), placing margin exactly box edges cut half outlines. sequence_text_size: size text inside boxes. Can set 0 disable text inside boxes. Defaults 16. index_annotation_size: size index numbers /boxes. set 0 disable; instead disable via index_annotation_interval = 0. Defaults 12.5. index_annotation_interval: frequency index numbers listed. Can set 0 disable index annotations. Defaults 15. index_annotations_above: Boolean specifying whether index annotations drawn line sequence. Defaults TRUE (). index_annotation_vertical_position: far annotation numbers rendered (index_annotations_above = TRUE) (index_annotations_above = FALSE) base. Defaults 1/3, recommended change generally. spacing much larger 1, setting slightly higher value might appropriate. outline_linewidth: thickness box outlines. Can set 0 disable box outlines. Defaults 3. outline_join: Changes corners box outlines handled. Must one \"mitre\", \"bevel\", \"round\". Defaults \"mitre\". unlikely ever need change . sensible example might changed follows:  Setting spacing, margin, sequence text size, index annotation interval 0 produces -frills visualisation sequence . , pixels_per_base can set low text rendered poorly low resolutions: produced warning message setting margin 0 clipped outlines outermost boxes. Either slightly larger margin can used:  outlines can turned :  changing line wrapping annotation interval, divisibility important. generally recommended make line wrapping length multiple motif length visualising repeats (e.g. multiple 3 trinucleotide repeat), make index annotation interval factor line wrapping length. annotation interval factor line length, uneven gaps annotations interval counted start line. example guidelines followed:  setting spacing 0, highly recommended disable index annotations via index_annotation_interval = 0, otherwise nowhere render:","code":"## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                           filename = paste0(output_location, \"single_sequence_09.png\"),                            return = FALSE,                           sequence_colours = sequence_colour_palettes$ggplot_style,                           margin = 2,                           spacing = 2,                           line_wrapping = 60,                           index_annotation_interval = 20,                           index_annotations_above = FALSE,                           index_annotation_vertical_position = 1/2,                           outline_linewidth = 0)  ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_09.png\")) ## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                           filename = paste0(output_location, \"single_sequence_10.png\"),                            return = FALSE,                           sequence_colours = sequence_colour_palettes$bright_pale,                           margin = 0,                           spacing = 0,                           line_wrapping = 45,                           sequence_text_size = 0,                           index_annotation_interval = 0,                           pixels_per_base = 20,                           outline_linewidth = 5) ## Warning: If margin is small and outlines are on (outline_linewidth > 0), ## outlines may be cut off at the edges of the plot. Check if this is happening ## and consider using a bigger margin. ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_10.png\")) ## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                           filename = paste0(output_location, \"single_sequence_11.png\"),                            return = FALSE,                           sequence_colours = sequence_colour_palettes$bright_pale,                           margin = 0.3,                           spacing = 0,                           line_wrapping = 45,                           sequence_text_size = 0,                           index_annotation_interval = 0,                           pixels_per_base = 20,                           outline_linewidth = 3)  ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_11.png\")) ## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                           filename = paste0(output_location, \"single_sequence_12.png\"),                            return = FALSE,                           sequence_colours = sequence_colour_palettes$bright_pale,                           margin = 0,                           spacing = 0,                           line_wrapping = 45,                           sequence_text_size = 0,                           index_annotation_interval = 0,                           pixels_per_base = 20,                           outline_linewidth = 0)  ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_12.png\")) ## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                           filename = paste0(output_location, \"single_sequence_13.png\"),                            return = FALSE,                           sequence_colours = sequence_colour_palettes$bright_deep,                           sequence_text_colour = \"white\",                           line_wrapping = 65,                           index_annotation_interval = 15)  ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_13.png\")) ## Create image visualise_single_sequence(sone_2019_f1_1_expanded_ggt_added,                           filename = paste0(output_location, \"single_sequence_14.png\"),                            return = FALSE,                           sequence_colours = sequence_colour_palettes$sanger,                           sequence_text_colour = \"white\",                           index_annotation_colour = \"magenta\",                           spacing = 0,                           outline_colour = \"magenta\") ## Warning: Using spacing = 0 without disabling index annotation is not recommended. ## It is likely to draw the annotations overlapping the sequence. ## Recommended to set index_annotation_interval = 0 to disable index annotations. ## View image knitr::include_graphics(paste0(github_location, \"single_sequence_14.png\"))"},{"path":[]},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_51-basic-visualisation","dir":"","previous_headings":"","what":"5.1 Basic visualisation","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"ggDNAvis can used visualise multiple DNA sequences via visualise_many_sequences(). function takes vector sequences primary input, length can blank spacing lines. can constructed manually e.g. c(\"GGCGGCGGC\", \"\", \"TTATTA\"), easily produced extract_and_sort_sequences(). example accomplished example_many_sequences data, reminder load sequence/quality data FASTQ merge metadata (fully explained reading standard FASTQ section):","code":"## Reminder of how to load data from file fastq_data <- read_fastq(\"inst/extdata/example_many_sequences_raw.fastq\", calculate_length = TRUE) metadata   <- read.csv(\"inst/extdata/example_many_sequences_metadata.csv\") merged_fastq_data <- merge_fastq_with_metadata(fastq_data, metadata)  ## Subset and change colnames to make it match example_many_sequences merged_fastq_data <- merged_fastq_data[, c(\"family\", \"individual\", \"read\", \"forward_sequence\", \"sequence_length\", \"forward_quality\")] colnames(merged_fastq_data)[c(4,6)] <- c(\"sequence\", \"quality\")  ## Prove equivalance to example_many_sequences identical(merged_fastq_data, example_many_sequences[, 1:6]) ## [1] TRUE ## Look at first 4 rows of the data as a reminder github_table(head(merged_fastq_data, 4)) ## Extract sequences to a character vector sequences_for_visualisation <- extract_and_sort_sequences(merged_fastq_data)  ## View the character vector sequences_for_visualisationse the character vector to make the image visualise_many_sequences(sequences_for_visualisation,                          filename = paste0(output_location, \"many_sequences_01.png\"),                          return = FALSE)  ## View image knitr::include_graphics(paste0(github_location, \"many_sequences_01.png\"))"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_52-sequence-arrangement-customisation","dir":"","previous_headings":"","what":"5.2 Sequence arrangement customisation","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"extract_and_sort_sequences() function highly configurable change arrangement spacing sequences. takes following arguments: sequence_dataframe: data processed sequence_variable: name column extracting. doesn’t actually sequence, information want convert sorted vector spaced empty strings. grouping_levels: data grouped. named numerical vector stating variables/columns used group data, many lines left groups level. example, default c(\"family\" = 8, \"individual\" = 2) means top-level grouping done categories \"family\" column 8 blank lines family, second-level gropuing done \"individual\" column 2 blank lines individuals within family. implemented recursively, number grouping variables can used (can set NA turn grouping entirely). sort_by: name column used sort sequences within lowest-level groups. generally sequence length (doesn’t ). desc_sort: Whether sequences sorted sort_by variable descending (desc_sort = TRUE) (desc_sort = FALSE). image used default values, set work columns present example_many_sequences use families-separated--8, individuals-separated--2 grouping arranged sequences descending length order. image default arguments explicitly stated:  top large cluster Family 1, containing individuals F1-1, F1-2, F-3. individuals contain 5, 2, 3 reads respectively, separated 2 blank lines. Family 1, 8 blank lines Family 2. Family 2 contains F2-1 F2-2 1 3 reads (individuals separated 2 blank lines), 8 blank lines Family 3. Family 3 contains F3-1, F3-2, F3-3, F3-4 2, 3, 1, 3 reads. wanted group individual without showing family structure, present reads ascending length order individual, following:  Now group individual, sequences ascending length order per individual, one blank line individuals. also turn grouping entirely just visualise reads length order, via grouping_levels = NA:  can also turn sorting entirely (keeping grouping ) sort_by = NA simply show reads order appear dataframe: NB: sort_by = NA used, desc_sort nothing doesn’t matter set .  also possible keep grouping turning sorting desired:  grouping spacers can set 0 sort within groups without visually separating (negative values don’t work - produce error rep() blank line can’t repeated negative number times). Additionally, order groups/levels within grouping variable can changed standard R fashion factor(x, levels = ...):  Finally, grouping sorting logic can used extract column character vector, though course isn’t DNA sequence resulting vector valid input visualise_many_sequences(). column extraction specified sequence_variable, column sorting sort_by. sort_by column non-numeric sorted alphabetically, just like using sort() character vector. extracted quality column, families separated 2 blank strings, sorted alphabetically quality string within family.","code":"## Extract sequences to a character vector ## Remember that example_many_sequences is identical to the data  ## read from FASTQ and metadata CSV in the previous code section sequences_for_visualisation <- extract_and_sort_sequences(example_many_sequences,                                                           sequence_variable = \"sequence\",                                                           grouping_levels = c(\"family\" = 8,                                                                               \"individual\" = 2),                                                           sort_by = \"sequence_length\",                                                           desc_sort = TRUE)  ## We will not view the character vector in the interests of avoiding clutter.  ## Use the character vector to make the image visualise_many_sequences(sequences_for_visualisation,                          filename = paste0(output_location, \"many_sequences_02.png\"),                          return = FALSE)  ## View image knitr::include_graphics(paste0(github_location, \"many_sequences_02.png\")) ## Extract sequences to a character vector sequences_for_visualisation <- extract_and_sort_sequences(example_many_sequences,                                                           sequence_variable = \"sequence\",                                                           grouping_levels = c(\"individual\" = 1),                                                           sort_by = \"sequence_length\",                                                           desc_sort = FALSE)  ## Use the character vector to make the image visualise_many_sequences(sequences_for_visualisation,                          filename = paste0(output_location, \"many_sequences_03.png\"),                          return = FALSE)  ## View image knitr::include_graphics(paste0(github_location, \"many_sequences_03.png\")) ## Extract sequences to a character vector sequences_for_visualisation <- extract_and_sort_sequences(example_many_sequences,                                                           sequence_variable = \"sequence\",                                                           grouping_levels = NA,                                                           sort_by = \"sequence_length\",                                                           desc_sort = TRUE)  ## Use the character vector to make the image visualise_many_sequences(sequences_for_visualisation,                          filename = paste0(output_location, \"many_sequences_04.png\"),                          return = FALSE)  ## View image knitr::include_graphics(paste0(github_location, \"many_sequences_04.png\")) ## Extract sequences to a character vector sequences_for_visualisation <- extract_and_sort_sequences(example_many_sequences,                                                           sequence_variable = \"sequence\",                                                           grouping_levels = NA,                                                           sort_by = NA)  ## Use the character vector to make the image visualise_many_sequences(sequences_for_visualisation,                          filename = paste0(output_location, \"many_sequences_05.png\"),                          return = FALSE)  ## View image knitr::include_graphics(paste0(github_location, \"many_sequences_05.png\")) ## Extract sequences to a character vector sequences_for_visualisation <- extract_and_sort_sequences(example_many_sequences,                                                           sequence_variable = \"sequence\",                                                           grouping_levels = c(\"family\" = 2,                                                                               \"individual\" = 1),                                                           sort_by = NA)  ## Use the character vector to make the image visualise_many_sequences(sequences_for_visualisation,                          filename = paste0(output_location, \"many_sequences_06.png\"),                          return = FALSE)  ## View image knitr::include_graphics(paste0(github_location, \"many_sequences_06.png\")) ## Reorder families example_many_sequences_reordered <- example_many_sequences example_many_sequences_reordered$family_reordered <- factor(example_many_sequences_reordered$family,                                                             levels = c(\"Family 2\",                                                                         \"Family 3\",                                                                         \"Family 1\"))  ## Extract sequences to a character vector sequences_for_visualisation <- extract_and_sort_sequences(example_many_sequences_reordered,                                                           sequence_variable = \"sequence\",                                                           grouping_levels = c(\"family_reordered\" = 0),                                                           sort_by = \"sequence_length\")  ## Use the character vector to make the image visualise_many_sequences(sequences_for_visualisation,                          filename = paste0(output_location, \"many_sequences_07.png\"),                          return = FALSE)  ## View image knitr::include_graphics(paste0(github_location, \"many_sequences_07.png\")) ## Extract qualities to character vector, ## sorted alphabetically by quality string extracted_and_sorted_qualities <- extract_and_sort_sequences(example_many_sequences,                                                              sequence_variable = \"quality\",                                                              grouping_levels = c(\"family\" = 2),                                                              sort_by = \"quality\",                                                              desc_sort = FALSE)  ## View character vector print(extracted_and_sorted_qualities, quote = F) ##  [1] )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90 ##  [2] *46.5//3:37?24:(:0*#.))E)?:,/172=2!4\">.*/;\"8+5<;D6.I2=>:C3)108,<)GC161)!55E!.>86/                      ##  [3] 60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139                                        ##  [4] 736/A@B121C269<2I,'5G66>46A6-9*&4*;4-E4C429?I+3@83(234E0%:43;!/3;2+956A0)(+'5G4=*3;1                   ##  [5] :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0                      ##  [6] ;4*2E3-48?@6A-!00!;-3%:H,4H>H530C(85I/&75-62.:2#!/D=A?8&7E!-@:=::5,)51,97D*04'2.!20@/;6)947<6          ##  [7] ;F42DF52#C-*I75!4?9>IA0<30!-:I:;+7!:<7<8=G@5*91D%193/2;><IA8.I<.722,68*!25;69*<<8C9889@                ##  [8] ?;.*26<C-8B,3#8/,-9!1++:94:/!A317=9>502=-+8;$=53@D*?/6:6&0D7-.@8,5;F,1?0D?$9'&665B8.604                ##  [9] E6(<)\"-./EE<(5:47,(C818I9CC1=.&)4G6-7<(*\"(,2C>8/5:0@@).A$97I!-<                                        ## [10] F='I#*5I:<F?)<4G3&:95*-5?1,!:9BD4B5.-27577<2E9)2:189B.5/*#7;;'**.7;-!                                  ## [11]                                                                                                        ## [12]                                                                                                        ## [13] 7?38,EC#3::=1)8&;<\">3.9BE)1661!2)5-4.11B<3)?')-+,B4.<7)/:IE=5$.3:66G9216-C20,>(0848(1$-                ## [14] ;1>:5417*<1.2H#260197.;7<(-3?0+=:)ID'I$6*128*!4.7-=5;+384F!=5>4!93+.6I7+H1-).H><68;7                   ## [15] =<\/-I354/,*>+<CA40*537/;<@I7/4%6192'5'>#4:&C,072+90:0+4;74\"D5,38&<7A?00+1>G>#=?;,@<<1=64D=!1&          ## [16] @86,/+6=8/;9=1)48E494IB3456/6.*=<\/B32+5469>8?@!1;*+81$>-99D7<@1$6B'?462?CE+=1+95=G?.6CA%>2             ## [17]                                                                                                        ## [18]                                                                                                        ## [19] $<,5\"7+!$';8<0794*@FI>34224!57+#1!F<+53$,?)-.A3;=1*71C02<.5:1)82!86$03/;%+1C3+D3;@9B-E#+/70;9<D'       ## [20] .85$#;!1F$8E:B+;7CI6@11/'65<3,4G:8@GF1413:0)3CH1=44.%G=#2E67=?;9DF7358.;(I!74:1I4                      ## [21] /*2<C643?*8?@9)-.'5A!=3-=;6,.%H3-!10'I>&@?;96;+/+36;:C;B@/=:6,;61>?>!,>.97@.48B38(;7;1F464=-7;)7       ## [22] /C<$>7/1(9%4:6>6I,D%*,&D?C/6@@;7)83.E.7:@9I906<!4536!850!164/8,<=?=15A;8B/5B364A66.1%9=(9876E8C:       ## [23] 0/2>@/6+-/(!=9-?G!AA70*,/!/?-E46:,-1G94*491,,38?(-!6<8A;/C9;,3)4C06=%',86A)1!E@/24G59<<                ## [24] 5@<733';9+3BB)=69,3!.2B*86'8E>@3?!(36:<002/4>:1.43A!+;<.3G*G8?0*991,B(C/\"I9*1-86)8.;;5-0+=             ## [25] 9>124!752+@06I/.72097*';-+A60=B?+/8'15477>4-435D;G@G'./21:(0/1/A=7'I>A\"3=9;;12,@\"2=3D=,458             ## [26] :0I4099<,4E01;/@96%2I2<,%<C&=81F+4<*@4A5.('4!%I3CE657<=!5;37>4D:%3;7'\"4<.9;?;7%0>:,84B512,B7/          ## [27] ?2-#-2\"1:(5(4>!I)>I,.?-+EG3IH4-.C:;570@2I;?D5#/;A7=>?<3?080::459*?8:3\"<2;I)C1400)6:3%19./);.I?35"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_53-colour-and-layout-customisation","dir":"","previous_headings":"","what":"5.3 Colour and layout customisation","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"visualise_single_sequence(), colours visualise_many_sequences() highly customisable can use various palettes sequence_colour_palettes. Additionally, margin, resolution, text size customisable (including turning text setting size 0). Colour-related arguments: sequence_colours: length-4 vector colours used boxes , C, G, T respectively. sequence_text_colour: colour used , C, G, T lettering inside boxes. background_colour: colour used background. outline_colour: colour used box outlines. Layout-related arguments: margin: margin around image terms size base boxes (e.g. default value 0.5 adds margin half size base boxes, 50 px default pixels_per_base = 100). sequence_text_size: size text inside boxes. Can set 0 disable text inside boxes. Defaults 16. outline_linewidth: thickness box outlines. Can set 0 disable box outlines. Defaults 3. outline_join: Changes corners box outlines handled. Must one \"mitre\", \"bevel\", \"round\". Defaults \"mitre\". unlikely ever need change . pixels_per_base: Resolution, determined number pixels side length one DNA base square. Everything else scaled proportionally. Defaults 100 (sensible text, can set lower e.g. 10 20 text turned ). render_device: device ggsave use render plot. Defaults ragg::agg_png, recommended change. Can set NULL infer device based filename extension. example, layout increased margins, enlarged text, crazy colours might :  visualise_single_sequence(), text can turned , case sensible reduce resolution: Note margin/outline warning produced whenever margin ≤0.25 outline linewidth >0. Getting warning necessarily mean outlines getting cut (happens half outline falls outside boxes thicker margin), get warning check. case ’s fine outlines getting cut 0.1 margin.","code":"## Extract sequences to a character vector sequences_for_visualisation <- extract_and_sort_sequences(example_many_sequences)  ## Use the character vector to make the image visualise_many_sequences(sequences_for_visualisation,                          filename = paste0(output_location, \"many_sequences_08.png\"),                          return = FALSE,                          sequence_colours = c(\"orange\", \"#00FF00\", \"magenta\", \"black\"),                          sequence_text_colour = \"cyan\",                          background_colour = \"yellow\",                          outline_colour = \"red\",                          outline_join = \"round\",                          outline_linewidth = 15,                          sequence_text_size = 40,                          margin = 5)  ## View image knitr::include_graphics(paste0(github_location, \"many_sequences_08.png\")) ## Extract sequences to a character vector sequences_for_visualisation <- extract_and_sort_sequences(example_many_sequences,                                                           grouping_levels = c(\"family\" = 4,                                                                               \"individual\" = 1))  ## Use the character vector to make the image visualise_many_sequences(sequences_for_visualisation,                          filename = paste0(output_location, \"many_sequences_09.png\"),                          return = FALSE,                          sequence_colours = sequence_colour_palettes$bright_pale,                          sequence_text_size = 0,                          margin = 0.1,                          pixels_per_base = 20,                          outline_join = \"round\") ## Warning: If margin is small and outlines are on (outline_linewidth > 0), ## outlines may be cut off at the edges of the plot. Check if this is happening ## and consider using a bigger margin. ## View image knitr::include_graphics(paste0(github_location, \"many_sequences_09.png\"))"},{"path":[]},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_61-basic-visualisation","dir":"","previous_headings":"","what":"6.1 Basic visualisation","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"basecalling Oxford Nanopore sequencing data Guppy Dorado, modified basecalling can enabled. means resulting BAM file contains information DNA modifications well sequence information. commonly, modification assessed 5-cytosine-methylation CpG sites (5’-CG-3’ dinucleotides). modification information stored MM ML tags BAM file. can written header row FASTQ file via: discussed detail reading modified FASTQ section. reminder, methylation information can read FASTQ follows: dataframe forward modification columns, can extract sort extract_methylation_from_dataframe(). function works extremely similarly extract_and_sort_sequences() (explained examples previously many sequences arrangement customisation section), instead taking single argument sequence column extract, takes three arguments locations, probabilities, sequence length colnames extract: returns 3-item list, item list vector either modification locations, probabilities, sequence lengths. modification locations indices (starting 1) along read modification assessed, probabilities 8-bit integers giving probability modification 0 255. explained detail introduction example_many_sequences section. use hydroxymethylation instead methylation, can simply change colnames read : hydroxymethylation locations methylation locations (assessed CpG sites), probabilities different. work modification type MM ML tags, though tested C+m? CG methylation C+h? CG hydroxymethylation. list locations, probabilities, lengths can used input visualise_methylation().  modification-assessed bases (Cs CG dinucleotides) coloured blue low methylation probability red high methylation probability linearly interpolated intermediate probabilities. Non-modification-assessed bases coloured grey, background white. ggDNAvis also contains function making scalebar methylation probabilities: visualise_methylation_colour_scale(). Unlike main visualise_ functions, one work scale aspect resolution, always returns ggplot object can exported manually via ggsave().","code":"samtools fastq -T MM,ML ${input_bam_file} > \"modified_fastq_file.fastq\" modified_fastq_data <- read_modified_fastq(\"inst/extdata/example_many_sequences_raw_modified.fastq\") metadata            <- read.csv(\"inst/extdata/example_many_sequences_metadata.csv\")  ## Merge with offset = 1 (map C to C of palindromic CG sites when reversing) ## See the reading from modified FASTQ section for a full discussion merged_modification_data <- merge_methylation_with_metadata(modified_fastq_data, metadata,                                                             reversed_location_offset = 1)  ## Subset and change colnames to make it match example_many_sequences merged_modification_data <- merged_modification_data[, c(\"family\", \"individual\", \"read\", \"forward_sequence\", \"sequence_length\", \"forward_quality\", \"forward_C+m?_locations\", \"forward_C+m?_probabilities\", \"forward_C+h?_locations\", \"forward_C+h?_probabilities\")] colnames(merged_modification_data)[c(4,6:10)] <- c(\"sequence\", \"quality\", \"methylation_locations\", \"methylation_probabilities\", \"hydroxymethylation_locations\", \"hydroxymethylation_probabilities\")  ## Prove equivalance to example_many_sequences identical(merged_modification_data, example_many_sequences) ## [1] TRUE ## Look at first 4 rows of the data as a reminder github_table(head(merged_modification_data, 4)) ## Extract locations, probabilities, and lengths ## Remember that example_many_sequences is identical to merged_modification_data methylation_data_for_visualisation <- extract_methylation_from_dataframe(     example_many_sequences,     locations_colname = \"methylation_locations\",     probabilities_colname = \"methylation_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"family\" = 8, \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = TRUE )  methylation_data_for_visualisation ## $locations ##  [1] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99\"                ##  [2] \"3,6,9,12,15,18,27,30,33,42,45,48,57,60,63,72,75,78,87,90\"                         ##  [3] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84\"                         ##  [4] \"3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78\"                         ##  [5] \"3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60\"                                     ##  [6] \"\"                                                                                 ##  [7] \"\"                                                                                 ##  [8] \"3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66\"                                     ##  [9] \"3,6,9,12,15,18,21,24,27,30,42,45,57,60\"                                           ## [10] \"\"                                                                                 ## [11] \"\"                                                                                 ## [12] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84\"                         ## [13] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,78,81\"                            ## [14] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78\"                   ## [15] \"\"                                                                                 ## [16] \"\"                                                                                 ## [17] \"\"                                                                                 ## [18] \"\"                                                                                 ## [19] \"\"                                                                                 ## [20] \"\"                                                                                 ## [21] \"\"                                                                                 ## [22] \"\"                                                                                 ## [23] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90\" ## [24] \"\"                                                                                 ## [25] \"\"                                                                                 ## [26] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,84,87\"    ## [27] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84\"       ## [28] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,78,81\"          ## [29] \"\"                                                                                 ## [30] \"\"                                                                                 ## [31] \"\"                                                                                 ## [32] \"\"                                                                                 ## [33] \"\"                                                                                 ## [34] \"\"                                                                                 ## [35] \"\"                                                                                 ## [36] \"\"                                                                                 ## [37] \"3,6,9,18,21,30,33,42,45,54,57,66,69,78,81,90,93\"                                  ## [38] \"3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93\"                            ## [39] \"\"                                                                                 ## [40] \"\"                                                                                 ## [41] \"3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90\"                               ## [42] \"3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87\"                                  ## [43] \"3,6,9,12,15,18,21,24,27,30,39,42,51,54,63,66,75,78,81,84\"                         ## [44] \"\"                                                                                 ## [45] \"\"                                                                                 ## [46] \"3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93\"                            ## [47] \"\"                                                                                 ## [48] \"\"                                                                                 ## [49] \"3,6,9,12,15,18,21,24,27,30,33,42,45,54,57,66,69,78,81,90,93\"                      ## [50] \"3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87\"                            ## [51] \"3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78\"                         ##  ## $probabilities ##  [1] \"29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41\"                            ##  [2] \"170,236,120,36,139,50,229,99,79,41,229,42,230,34,34,27,130,77,7,79\"                                        ##  [3] \"206,141,165,80,159,84,128,173,124,62,195,19,79,183,129,39,129,126,192,45\"                                  ##  [4] \"216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82\"                                         ##  [5] \"10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253\"                                                   ##  [6] \"\"                                                                                                          ##  [7] \"\"                                                                                                          ##  [8] \"31,56,233,241,71,31,203,190,234,254,240,124,72,64,128,127\"                                                 ##  [9] \"189,9,144,71,52,34,83,40,33,111,10,182,26,242\"                                                             ## [10] \"\"                                                                                                          ## [11] \"\"                                                                                                          ## [12] \"81,245,162,32,108,233,119,232,152,161,222,128,251,83,123,91,160,189,144,250\"                               ## [13] \"149,181,109,88,194,108,143,30,77,122,88,153,19,244,6,215,161,79,189\"                                       ## [14] \"147,112,58,21,217,60,252,153,255,96,142,110,147,110,57,22,163,110,19,205,83,193\"                           ## [15] \"\"                                                                                                          ## [16] \"\"                                                                                                          ## [17] \"\"                                                                                                          ## [18] \"\"                                                                                                          ## [19] \"\"                                                                                                          ## [20] \"\"                                                                                                          ## [21] \"\"                                                                                                          ## [22] \"\"                                                                                                          ## [23] \"163,253,33,225,207,210,213,187,251,163,168,135,81,196,134,187,78,103,52,251,144,71,47,193,145,238,163,179\" ## [24] \"\"                                                                                                          ## [25] \"\"                                                                                                          ## [26] \"191,91,194,96,204,7,129,209,139,68,88,94,109,234,200,188,72,116,73,178,209,167,105,243,62,155,193\"         ## [27] \"176,250,122,197,146,246,203,136,152,67,71,17,144,67,1,150,133,215,8,153,68,31,26,191,4,13\"                 ## [28] \"122,217,108,8,66,85,34,127,205,86,130,126,203,145,27,206,145,54,191,78,125,252,108,62,55\"                  ## [29] \"\"                                                                                                          ## [30] \"\"                                                                                                          ## [31] \"\"                                                                                                          ## [32] \"\"                                                                                                          ## [33] \"\"                                                                                                          ## [34] \"\"                                                                                                          ## [35] \"\"                                                                                                          ## [36] \"\"                                                                                                          ## [37] \"177,29,162,79,90,250,137,113,242,115,49,253,140,196,233,174,104\"                                           ## [38] \"104,37,50,49,104,89,213,51,220,101,39,87,94,109,48,168,235,187,225\"                                        ## [39] \"\"                                                                                                          ## [40] \"\"                                                                                                          ## [41] \"243,50,121,98,95,7,237,105,244,69,132,249,94,79,9,170,235,11\"                                              ## [42] \"51,190,33,181,255,241,151,186,124,196,1,142,117,84,213,249,168\"                                            ## [43] \"60,209,185,249,68,224,124,78,101,194,26,107,168,75,53,1,27,55,29,175\"                                      ## [44] \"\"                                                                                                          ## [45] \"\"                                                                                                          ## [46] \"49,251,241,176,189,187,166,43,235,144,137,5,93,175,106,193,198,146,48\"                                     ## [47] \"\"                                                                                                          ## [48] \"\"                                                                                                          ## [49] \"193,24,159,106,198,206,247,55,221,106,131,198,34,105,169,231,88,27,238,51,14\"                              ## [50] \"161,156,9,65,198,255,245,191,174,63,155,146,13,95,228,100,132,45,49\"                                       ## [51] \"109,86,70,169,200,112,237,69,168,97,239,188,150,208,225,190,128,252,142,224\"                               ##  ## $lengths ##  [1] 102  93  87  81  63   0   0  69  63   0   0  87  84  81   0   0   0   0   0 ## [20]   0   0   0  93   0   0  90  87  84   0   0   0   0   0   0   0   0  96  96 ## [39]   0   0  93  90  87   0   0  96   0   0  96  90  81 ## Extract locations, probabilities, and lengths hydroxymethylation_data_for_visualisation <- extract_methylation_from_dataframe(     example_many_sequences,     locations_colname = \"hydroxymethylation_locations\",     probabilities_colname = \"hydroxymethylation_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"family\" = 8, \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = TRUE )  hydroxymethylation_data_for_visualisation ## $locations ##  [1] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99\"                ##  [2] \"3,6,9,12,15,18,27,30,33,42,45,48,57,60,63,72,75,78,87,90\"                         ##  [3] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84\"                         ##  [4] \"3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78\"                         ##  [5] \"3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60\"                                     ##  [6] \"\"                                                                                 ##  [7] \"\"                                                                                 ##  [8] \"3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66\"                                     ##  [9] \"3,6,9,12,15,18,21,24,27,30,42,45,57,60\"                                           ## [10] \"\"                                                                                 ## [11] \"\"                                                                                 ## [12] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84\"                         ## [13] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,78,81\"                            ## [14] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78\"                   ## [15] \"\"                                                                                 ## [16] \"\"                                                                                 ## [17] \"\"                                                                                 ## [18] \"\"                                                                                 ## [19] \"\"                                                                                 ## [20] \"\"                                                                                 ## [21] \"\"                                                                                 ## [22] \"\"                                                                                 ## [23] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90\" ## [24] \"\"                                                                                 ## [25] \"\"                                                                                 ## [26] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,84,87\"    ## [27] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84\"       ## [28] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,78,81\"          ## [29] \"\"                                                                                 ## [30] \"\"                                                                                 ## [31] \"\"                                                                                 ## [32] \"\"                                                                                 ## [33] \"\"                                                                                 ## [34] \"\"                                                                                 ## [35] \"\"                                                                                 ## [36] \"\"                                                                                 ## [37] \"3,6,9,18,21,30,33,42,45,54,57,66,69,78,81,90,93\"                                  ## [38] \"3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93\"                            ## [39] \"\"                                                                                 ## [40] \"\"                                                                                 ## [41] \"3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90\"                               ## [42] \"3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87\"                                  ## [43] \"3,6,9,12,15,18,21,24,27,30,39,42,51,54,63,66,75,78,81,84\"                         ## [44] \"\"                                                                                 ## [45] \"\"                                                                                 ## [46] \"3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93\"                            ## [47] \"\"                                                                                 ## [48] \"\"                                                                                 ## [49] \"3,6,9,12,15,18,21,24,27,30,33,42,45,54,57,66,69,78,81,90,93\"                      ## [50] \"3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87\"                            ## [51] \"3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78\"                         ##  ## $probabilities ##  [1] \"26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34\"                 ##  [2] \"57,18,64,31,63,40,23,61,55,34,23,35,23,30,29,24,64,53,7,54\"                          ##  [3] \"40,63,58,55,60,56,64,56,64,47,46,17,55,52,64,33,63,64,47,37\"                         ##  [4] \"33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55\"                           ##  [5] \"10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2\"                                      ##  [6] \"\"                                                                                    ##  [7] \"\"                                                                                    ##  [8] \"27,44,20,13,51,28,41,48,19,1,14,64,52,48,64,64\"                                      ##  [9] \"49,9,63,52,41,30,56,33,29,63,9,52,23,12\"                                             ## [10] \"\"                                                                                    ## [11] \"\"                                                                                    ## [12] \"55,10,59,28,62,20,64,21,62,59,29,64,4,56,64,59,60,49,63,5\"                           ## [13] \"80,43,103,71,21,112,47,126,21,40,80,35,142,1,238,1,79,111,20\"                        ## [14] \"62,63,45,19,32,46,3,61,0,159,42,80,46,84,86,52,8,92,102,4,138,20\"                    ## [15] \"\"                                                                                    ## [16] \"\"                                                                                    ## [17] \"\"                                                                                    ## [18] \"\"                                                                                    ## [19] \"\"                                                                                    ## [20] \"\"                                                                                    ## [21] \"\"                                                                                    ## [22] \"\"                                                                                    ## [23] \"68,1,220,4,42,36,35,57,3,90,56,79,92,19,93,36,130,47,82,1,109,104,58,11,83,10,86,49\" ## [24] \"\"                                                                                    ## [25] \"\"                                                                                    ## [26] \"3,123,22,121,19,198,3,23,95,102,45,55,54,9,51,53,135,39,83,22,32,72,98,5,184,24,38\"  ## [27] \"17,3,130,28,84,5,50,95,55,112,49,67,7,106,67,0,72,21,209,3,112,60,28,6,188,4\"        ## [28] \"93,18,125,104,6,44,74,17,25,136,42,66,26,88,129,5,89,114,14,133,40,1,145,82,49\"      ## [29] \"\"                                                                                    ## [30] \"\"                                                                                    ## [31] \"\"                                                                                    ## [32] \"\"                                                                                    ## [33] \"\"                                                                                    ## [34] \"\"                                                                                    ## [35] \"\"                                                                                    ## [36] \"\"                                                                                    ## [37] \"59,157,11,112,51,2,116,77,6,133,93,0,114,32,17,74,103\"                               ## [38] \"61,89,30,41,29,68,15,170,7,133,86,26,55,54,88,16,13,63,22\"                           ## [39] \"\"                                                                                    ## [40] \"\"                                                                                    ## [41] \"11,195,26,74,62,93,1,139,5,178,33,3,158,65,76,3,13,225\"                              ## [42] \"9,13,165,10,0,10,104,65,78,43,124,87,0,95,19,2,73\"                                   ## [43] \"191,30,16,5,136,30,35,156,75,19,90,112,9,76,133,75,47,0,24,17\"                       ## [44] \"\"                                                                                    ## [45] \"\"                                                                                    ## [46] \"24,3,3,78,63,47,66,155,13,19,109,141,87,2,55,43,24,83,161\"                           ## [47] \"\"                                                                                    ## [48] \"\"                                                                                    ## [49] \"36,44,73,14,35,20,6,162,33,32,108,24,113,116,11,10,111,207,6,21,225\"                 ## [50] \"52,87,155,117,2,0,3,50,81,184,75,74,60,97,15,8,46,188,81\"                            ## [51] \"29,9,79,29,15,95,14,82,81,43,11,25,98,35,18,53,112,2,57,31\"                          ##  ## $lengths ##  [1] 102  93  87  81  63   0   0  69  63   0   0  87  84  81   0   0   0   0   0 ## [20]   0   0   0  93   0   0  90  87  84   0   0   0   0   0   0   0   0  96  96 ## [39]   0   0  93  90  87   0   0  96   0   0  96  90  81 ## Use saved methylation data for visualisation to make image visualise_methylation(modification_locations     = methylation_data_for_visualisation$locations,                       modification_probabilities = methylation_data_for_visualisation$probabilities,                       sequence_lengths           = methylation_data_for_visualisation$lengths,                       filename = paste0(output_location, \"modification_01.png\"),                       return = FALSE)  ## View image knitr::include_graphics(paste0(github_location, \"modification_01.png\")) ## Create scalebar and save to object scalebar <- visualise_methylation_colour_scale(x_axis_title = \"Methylation probability\")  ## Write png from object ggsave(paste0(output_location, \"modification_01_scalebar.png\"), scalebar, dpi = 300, width = 5, height = 1.25, device = ragg::agg_png)  ## View image knitr::include_graphics(paste0(github_location, \"modification_01_scalebar.png\"))"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_62-sequence-arrangement-customisation","dir":"","previous_headings":"","what":"6.2 Sequence arrangement customisation","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"extract_methylation_from_dataframe() customisable ways extract_and_sort_sequences(), discussed detail many sequences arrangement customisation section. section provide brief reminder, follow link full explanation. extract_methylation_from_dataframe() arguments: modification_data: data processed locations_colname: column locations extracted . probabilities_colname: column probabilities extracted . lengths_colname: column sequence lengths extracted . three just call extract_and_sort_sequences() extract columns, can technically used extract three columns regardless contain. However, trying extract sort non-DNA-information column, probably sensible directly via extract_and_sort_sequences(). grouping_levels: data grouped. named numerical vector stating variables/columns used group data, many lines left groups level. example, default c(\"family\" = 8, \"individual\" = 2) means top-level grouping done categories \"family\" column 8 blank lines family, second-level gropuing done \"individual\" column 2 blank lines individuals within family. implemented recursively, number grouping variables can used (can set NA turn grouping entirely). sort_by: name column used sort sequences within lowest-level groups. generally sequence length (doesn’t ). desc_sort: Whether sequences sorted sort_by variable descending (desc_sort = TRUE) (desc_sort = FALSE). single example arrangement might customised:  grouping family, 3 blank lines participant, sequences sorted ascending length order within participant.","code":"## Extract information to list of character vectors methylation_data_for_visualisation <- extract_methylation_from_dataframe(     example_many_sequences,     locations_colname = \"methylation_locations\",     probabilities_colname = \"methylation_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"individual\" = 3),     sort_by = \"sequence_length\",     desc_sort = FALSE )  ## Use saved methylation data for visualisation to make image visualise_methylation(modification_locations     = methylation_data_for_visualisation$locations,                       modification_probabilities = methylation_data_for_visualisation$probabilities,                       sequence_lengths           = methylation_data_for_visualisation$lengths,                       filename = paste0(output_location, \"modification_02.png\"),                       return = FALSE)  ## View image knitr::include_graphics(paste0(github_location, \"modification_02.png\"))"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_63-colour-and-layout-customisation","dir":"","previous_headings":"","what":"6.3 Colour and layout customisation","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"Colours visualise_methylation() controlled setting low high end points modification colour mapping scale, well colour use non-modification-assessed bases background. , margin resolution customisable. currently support text rendered well avoid visual clutter, resolution defaults much lower 20 pixels per base. One important feature note box outlines can controlled separately modification-assessed (e.g. C CpG) non-modification assessed bases. global outline_colour, outline_linewidth, outline_join parameters available single sequence multiple sequences functions. However, also modified_bases_outline_<parameter> other_bases_outline_<parameter> arguments can used override global setting, set NA inherit global setting. One use might draw outlines modification-assessed bases (using default black/3/mitre settings). accomplished setting other_bases_outline_linewidth = 0 disable outlines non-modification-assessed bases, allowing modification-assessed bases inherit global default outlines. Colour-related arguments: low_colour: colour use bottom end modification probability scale. Defaults blue (#0000FF). high_colour: colour use top end modification probability scale. Defaults red (#FF0000). other_bases_colour: colour use non-modification-assessed bases. Defaults grey generally fairly neutral (though enforced way). background_colour: colour use background. Defaults white. outline_colour: colour use box outlines. Defaults white. modified_bases_outline_colour: colour use box outlines modification-assessed bases specifically. Can set NA (default), case value outline_colour used. outline_colour modified_bases_outline_colour set different values, value modified_bases_outline_colour prioritised. other_bases_outline_colour: colour use box outlines non-modification-assessed bases specifically. Can set NA (default), case value outline_colour used. outline_colour other_bases_outline_colour set different values, value other_bases_outline_colour prioritised. Layout-related arguments: margin: margin around image terms size base boxes (e.g. default value 0.5 adds margin half size base boxes, 50 px default pixels_per_base = 100). outline_linewidth: thickness box outlines. Can set 0 disable box outlines. Defaults 3. modified_bases_outline_linewidth: thickness box outlines modification-assessed bases specifically. Can set NA (default) inherit value outline_linewidth, 0 disable box outlines specifically modification-assessed bases. outline_linewidth modified_bases_outline_linewidth set different values, value modified_bases_outline_linewidth prioritised. other_bases_outline_linewidth: thickness box outlines non-modification-assessed bases specifically. Can set NA (default) inherit value outline_linewidth, 0 disable box outlines specifically non-modification-assessed bases. outline_linewidth other_bases_outline_linewidth set different values, value other_bases_outline_linewidth prioritised. outline_join: Changes corners box outlines handled. Must one \"mitre\", \"bevel\", \"round\". Defaults \"mitre\". unlikely ever need change . modified_bases_outline_join: corners handled modification-assessed bases . Can set NA (default) inherit outline_join, otherwise overrides outline_join. other_bases_outline_join: corners handled non-modification-assessed bases . Can set NA (default) inherit outline_join, otherwise overrides outline_join. pixels_per_base: Resolution, determined number pixels side length one DNA base square. Everything else scaled proportionally. Defaults 20. render_device: device ggsave use render plot. Defaults ragg::agg_png, recommended change. Can set NULL infer device based filename extension. example wild colours:   One way might used practice making graphic “lollipop” style methylated/modified CGs black unmodified CGs white:","code":"## Extract information to list of character vectors methylation_data_for_visualisation <- extract_methylation_from_dataframe(     example_many_sequences,     locations_colname = \"methylation_locations\",     probabilities_colname = \"methylation_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"family\" = 6,                          \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = FALSE )  ## Use saved methylation data for visualisation to make image visualise_methylation(modification_locations     = methylation_data_for_visualisation$locations,                       modification_probabilities = methylation_data_for_visualisation$probabilities,                       sequence_lengths           = methylation_data_for_visualisation$lengths,                       filename = paste0(output_location, \"modification_03.png\"),                       return = FALSE,                       margin = 4,                        low_colour = \"#00FF00\",                       high_colour = \"blue\",                       modified_bases_outline_colour = \"purple\",                       modified_bases_outline_linewidth = 5,                       other_bases_colour = \"white\",                       other_bases_outline_colour = \"darkgreen\",                       other_bases_outline_linewidth = 0.5,                       background_colour = \"red\")  ## View image knitr::include_graphics(paste0(github_location, \"modification_03.png\")) ## Create scalebar and save to object ## Text colour doesn't have an argument within the function ## but can be modified by adding to the ggplot object like normal scalebar <- visualise_methylation_colour_scale(x_axis_title = \"Methylation probability\",                                                low_colour = \"green\",                                                high_colour = \"#0000FF\",                                                background_colour = \"#FF0000\",                                                outline_colour = \"darkgreen\",                                                outline_linewidth = 1) +     theme(axis.title = element_text(colour = \"white\"),           axis.text  = element_text(colour = \"white\"))  ## Write png from object ggsave(paste0(output_location, \"modification_03_scalebar.png\"), scalebar, dpi = 300, width = 5, height = 1.25, device = ragg::agg_png)  ## View image knitr::include_graphics(paste0(github_location, \"modification_03_scalebar.png\")) ## Extract information to list of character vectors methylation_data_for_visualisation <- extract_methylation_from_dataframe(     example_many_sequences,     locations_colname = \"methylation_locations\",     probabilities_colname = \"methylation_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"family\" = 6,                          \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = FALSE )  ## Use saved methylation data for visualisation to make image visualise_methylation(modification_locations     = methylation_data_for_visualisation$locations,                       modification_probabilities = methylation_data_for_visualisation$probabilities,                       sequence_lengths           = methylation_data_for_visualisation$lengths,                       filename = paste0(output_location, \"modification_04.png\"),                       return = FALSE,                       margin = 0.1,                        low_colour = \"white\",                       high_colour = \"black\",                       other_bases_colour = \"lightblue1\",                       other_bases_outline_colour = \"grey\",                       other_bases_outline_linewidth = 1,                       background_colour = \"white\") ## Warning: If margin is small and outlines are on (outline_linewidth > 0), ## outlines may be cut off at the edges of the plot. Check if this is happening ## and consider using a bigger margin. ## View image knitr::include_graphics(paste0(github_location, \"modification_04.png\")) ## Create scalebar and save to object scalebar <- visualise_methylation_colour_scale(x_axis_title = \"Methylation probability\",                                                low_colour = \"white\",                                                high_colour = \"black\",                                                background_colour = \"lightblue1\")  ## Write png from object ggsave(paste0(output_location, \"modification_04_scalebar.png\"), scalebar, dpi = 300, width = 5, height = 1.25, device = ragg::agg_png)  ## View image knitr::include_graphics(paste0(github_location, \"modification_04_scalebar.png\"))"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_64-colour-mapping-customisation","dir":"","previous_headings":"","what":"6.4 Colour mapping customisation","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"useful feature visualise_methylation() ability “clamp” scale. means probabilities low_clamp value set low colour, probabilities high_clamp value set high colour, linear colour interpolation occur clamp values. Clamping arguments: low_clamp: probability score values represented low_colour. high_clamp: probability score values represented high_colour. clamp values need scale probability input .e. 0-255 standard MM/ML tags Dorado/Guppy modified basecalling. possible input decimal probabilities e.g. \"0.1,0.5,0.9,0.23\", case default high clamp 255 appropriate must set sensible value ≤ 1. lollipop scale low_clamp = 127 high_clamp = 128 make values binary white/black depending whether equivalent 0.5 methylation probability:   clamping arguments integers. Clamping implemented pmin() pmax() relies default behaviour pm<\/ax>(vector, clamping_value), clamp fraction clamping value fractional. example, pmin(c(1,2,3,4,5), 3.5) produces c(1.0, 2.0, 3.0, 3.5, 3.5) .e. values 3.5 clamped 3.5. Therefore, clamping fractional values clamp extreme probabilities said fractional value, visible interfere plotting logic. means one approach define clamping values proportion*255, can easier working integer use. Using standard blue/red colour scheme hydroxymethylation data clamping 30% 70% probability gives following:   clamping need symmetrical. One use data skewed. example, methylation scores randomly generated 0 255 CpG example_many_sequences, hydroxymethylation scores generated 0 (255 - methylation score) CpG avoid >100% total modification probability, tend lower. hydroxymethylation data visualised clamping 10% 50%:   IMPORTANT: make sure provide scalebar presenting data, especially clamping used, otherwise colours misleading academically dishonest.","code":"## Extract information to list of character vectors methylation_data_for_visualisation <- extract_methylation_from_dataframe(     example_many_sequences,     locations_colname = \"methylation_locations\",     probabilities_colname = \"methylation_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"family\" = 6,                          \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = FALSE )  ## Use saved methylation data for visualisation to make image visualise_methylation(modification_locations     = methylation_data_for_visualisation$locations,                       modification_probabilities = methylation_data_for_visualisation$probabilities,                       sequence_lengths           = methylation_data_for_visualisation$lengths,                       filename = paste0(output_location, \"modification_05.png\"),                       return = FALSE,                       margin = 0.1,                        low_colour = \"white\",                       low_clamp = 127,                       high_colour = \"black\",                       high_clamp = 128,                       other_bases_colour = \"lightblue1\",                       other_bases_outline_colour = \"grey\",                       other_bases_outline_linewidth = 1,                       background_colour = \"white\") ## Warning: If margin is small and outlines are on (outline_linewidth > 0), ## outlines may be cut off at the edges of the plot. Check if this is happening ## and consider using a bigger margin. ## View image knitr::include_graphics(paste0(github_location, \"modification_05.png\")) ## Create scalebar and save to object scalebar <- visualise_methylation_colour_scale(x_axis_title = \"Methylation probability\",                                                low_colour = \"white\",                                                low_clamp = 127,                                                high_colour = \"black\",                                                high_clamp = 128,                                                background_colour = \"lightblue1\")  ## Write png from object ggsave(paste0(output_location, \"modification_05_scalebar.png\"), scalebar, dpi = 300, width = 5, height = 1.25, device = ragg::agg_png)  ## View image knitr::include_graphics(paste0(github_location, \"modification_05_scalebar.png\")) ## Extract information to list of character vectors methylation_data_for_visualisation <- extract_methylation_from_dataframe(     example_many_sequences,     locations_colname = \"methylation_locations\",     probabilities_colname = \"methylation_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"family\" = 6,                          \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = FALSE )  ## Use saved methylation data for visualisation to make image visualise_methylation(modification_locations     = methylation_data_for_visualisation$locations,                       modification_probabilities = methylation_data_for_visualisation$probabilities,                       sequence_lengths           = methylation_data_for_visualisation$lengths,                       filename = paste0(output_location, \"modification_06.png\"),                       return = FALSE,                       low_clamp = 0.3*255,                       high_clamp = 0.7*255,                       outline_linewidth = 0)  ## View image knitr::include_graphics(paste0(github_location, \"modification_06.png\")) ## Create scalebar and save to object scalebar <- visualise_methylation_colour_scale(x_axis_title = \"Methylation probability\",                                                low_clamp = 0.3*255,                                                high_clamp = 0.7*255)  ## Write png from object ggsave(paste0(output_location, \"modification_06_scalebar.png\"), scalebar, dpi = 300, width = 5, height = 1.25, device = ragg::agg_png)  ## View image knitr::include_graphics(paste0(github_location, \"modification_06_scalebar.png\")) ## Extract information to list of character vectors hydroxymethylation_data_for_visualisation <- extract_methylation_from_dataframe(     example_many_sequences,     locations_colname = \"hydroxymethylation_locations\",     probabilities_colname = \"hydroxymethylation_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"family\" = 6,                          \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = FALSE )  ## Use saved methylation data for visualisation to make image visualise_methylation(modification_locations     = hydroxymethylation_data_for_visualisation$locations,                       modification_probabilities = hydroxymethylation_data_for_visualisation$probabilities,                       sequence_lengths           = hydroxymethylation_data_for_visualisation$lengths,                       filename = paste0(output_location, \"modification_07.png\"),                       return = FALSE,                       low_clamp = 0.1*255,                       high_clamp = 0.5*255,                       other_bases_outline_linewidth = 0)  ## View image knitr::include_graphics(paste0(github_location, \"modification_07.png\")) ## Create scalebar and save to object scalebar <- visualise_methylation_colour_scale(x_axis_title = \"Hydroxymethylation probability\",                                                low_clamp = 0.1*255,                                                high_clamp = 0.5*255)  ## Write png from object ggsave(paste0(output_location, \"modification_07_scalebar.png\"), scalebar, dpi = 300, width = 5, height = 1.25, device = ragg::agg_png)  ## View image knitr::include_graphics(paste0(github_location, \"modification_07_scalebar.png\"))"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_65-scalebar-customisation","dir":"","previous_headings":"","what":"6.5 Scalebar customisation","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"scalebar produced visualise_methylation_colour_scale() , like rest visualisations, highly customisable. colours, clamping, precision, presence various plot elements customisable via following arguments: Colour arguments: low_colour: colour use bottom end modification probability scale. Defaults blue (#0000FF). high_colour: colour use top end modification probability scale. Defaults red (#FF0000). background_colour: colour use background. Defaults white. outline_colour: colour outline around whole scalebar. Defaults black. Clamping arguments: low_clamp: probability score values represented low_colour. Defaults 0. high_clamp: probability score values represented high_colour. Defaults 255. full_range: Length-2 numeric vector specifying range possible probability values. Defaults c(0, 255) c(0, 1) also sensible depending data. precision: many different shades rendered. Larger values give smoother gradient. Defaults 10^3 .e. 1000, looks smooth eyes isn’t intensive calculate. Layout arguments: x_axis_title: desired x-axis title. Defaults NULL (title). do_x_ticks: Boolean specifying whether ticks x axis enabled. Defaults TRUE. do_side_scale: Boolean specifying whether smaller scalebar rendered right. Defaults FALSE. think unlikely anyone want use , option . One potential usecase side scalebar shows raw probability values (e.g. 0 255), whereas x-axis normalised 0-1. side_scale_title: desired title right-hand scalebar, turned . Defaults NULL. outline_linewidth: width outline around whole scalebar. Can set 0 remove outline. Defaults 1. Using defaults lower precision gives following:  Disabling x axis ticks intermediate precision gives following:  ticks left , can customised scale_x_continuous() per usual ggplot. example side scalebar turned ticks customised:  example sensible scalebar side scale turned :","code":"## Create scalebar and save to object scalebar <- visualise_methylation_colour_scale(precision = 10)  ## Write png from object ggsave(paste0(output_location, \"modification_scalebar_alone_01.png\"), scalebar, dpi = 300, width = 5, height = 1.25, device = ragg::agg_png)  ## View image knitr::include_graphics(paste0(github_location, \"modification_scalebar_alone_01.png\")) ## Create scalebar and save to object scalebar <- visualise_methylation_colour_scale(precision = 50,                                                do_x_ticks = FALSE)  ## Write png from object ggsave(paste0(output_location, \"modification_scalebar_alone_02.png\"), scalebar, dpi = 300, width = 5, height = 1.25, device = ragg::agg_png)  ## View image knitr::include_graphics(paste0(github_location, \"modification_scalebar_alone_02.png\")) ## Create scalebar and save to object scalebar <- visualise_methylation_colour_scale(high_colour = \"green\",                                                low_colour = \"yellow\",                                                high_clamp = 0.8,                                                low_clamp = 0.5,                                                 full_range = c(0,1),                                                precision = 100,                                                do_x_ticks = TRUE,                                                x_axis_title = \"some kind of title\",                                                do_side_scale = TRUE,                                                side_scale_title = \"some other title\",                                                outline_colour = \"red\",                                                outline_linewidth = 3) +     scale_x_continuous(breaks = seq(0, 1, 0.1))  ## Write png from object ggsave(paste0(output_location, \"modification_scalebar_alone_03.png\"), scalebar, dpi = 300, width = 5, height = 2, device = ragg::agg_png)  ## View image knitr::include_graphics(paste0(github_location, \"modification_scalebar_alone_03.png\")) ## Create scalebar and save to object scalebar <- visualise_methylation_colour_scale(low_clamp = 0.1*255,                                                high_clamp  = 0.9*255,                                                x_axis_title = \"Methylation probability\",                                                do_side_scale = TRUE,                                                side_scale_title = \"Raw\\nprobability\\nscore\",                                                outline_linewidth = 0)  ## Write png from object ggsave(paste0(output_location, \"modification_scalebar_alone_04.png\"), scalebar, dpi = 300, width = 5, height = 2, device = ragg::agg_png)  ## View image knitr::include_graphics(paste0(github_location, \"modification_scalebar_alone_04.png\"))"},{"path":"https://ejade42.github.io/ggDNAvis/index.html","id":"id_66-think-about-the-offset","dir":"","previous_headings":"","what":"6.6 Think about the offset!","title":"ggplot2-Based Tools for Visualising DNA Sequences and Modifications","text":"merging modification data read FASTQ, positional offset reversing can changed (discussed detail reading modified FASTQ section). summary sensible offset options (.e. 0 1) copied section follows: visualisations thus far section used offset = 1 methylated Cs CGs reverse strand mapped Cs CGs forward strand reverse complemented, ensuring consistency reads forward begin . used offset = 0 show true biochemical locations modifications, get following: can see methylation-assessed sites now offset 1, location now assigned G CG site rather C. perhaps biochemically accurate, Gs complementary Cs reverse strands modification actually occurred. offset values theoretically possible, e.g. -1 : However, strongly discouraged produces warning. Offset values 0 1 tested results may unpredictable aspects visualisation may break. Finally, course possible read columns weren’t reversed/forward-ified. However, likely misleading implies positional equivalence bases opposite ends region opposite strands. recommended either, way identify warning produced.","code":"## Here the stars represent the true biochemical modifications on the reverse strand: ## (occurring at the Cs of CGs in the 5'-3' direction) ##  ##  ## 5'  GGCGGCGGCGGCGGCGGA  3' ## 3'  CCGCCGCCGCCGCCGCCT  5' ##        *  *  *  *  *  ## If we take the complementary locations on the forward strand, ## the modification locations correspond to Gs rather than Cs, ## but are in the exact same locations: ##  ##        o  o  o  o  o       ## 5'  GGCGGCGGCGGCGGCGGA  3' ## 3'  CCGCCGCCGCCGCCGCCT  5' ##        *  *  *  *  *  ## If we offset the locations by 1 on the forward strand, ## the modifications are always associated with the C of a CG, ## but the locations are moved slightly: ##  ##       o  o  o  o  o        ## 5'  GGCGGCGGCGGCGGCGGA  3' ## 3'  CCGCCGCCGCCGCCGCCT  5' ##        *  *  *  *  * modified_fastq_data <- read_modified_fastq(\"inst/extdata/example_many_sequences_raw_modified.fastq\") metadata            <- read.csv(\"inst/extdata/example_many_sequences_metadata.csv\")  ## Merge with offset = 0 (map C to G of palindromic CG sites when reversing) ## See the reading from modified FASTQ section for a full discussion merged_modification_data <- merge_methylation_with_metadata(modified_fastq_data, metadata,                                                             reversed_location_offset = 0)  ## Extract information to list of character vectors ## Note that this time we read from merged_modification_data, ## rather than example_many_sequences methylation_data_for_visualisation <- extract_methylation_from_dataframe(     merged_modification_data,     locations_colname = \"forward_C+m?_locations\",     probabilities_colname = \"forward_C+m?_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"family\" = 6,                          \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = FALSE )  ## Use saved methylation data for visualisation to make image visualise_methylation(modification_locations     = methylation_data_for_visualisation$locations,                       modification_probabilities = methylation_data_for_visualisation$probabilities,                       sequence_lengths           = methylation_data_for_visualisation$lengths,                       filename = paste0(output_location, \"modification_08.png\"),                       return = FALSE)  ## View image knitr::include_graphics(paste0(github_location, \"modification_08.png\")) modified_fastq_data <- read_modified_fastq(\"inst/extdata/example_many_sequences_raw_modified.fastq\") metadata            <- read.csv(\"inst/extdata/example_many_sequences_metadata.csv\")  ## Merge with offset = -1 (not recommended) merged_modification_data <- merge_methylation_with_metadata(modified_fastq_data, metadata,                                                             reversed_location_offset = -1) ## Warning: Setting location reversal offset to anything other than 0 or 1 is advanced use. Make sure this is intentional. ## Setting location reversal offset to anything other than 0 or 1 is advanced use. Make sure this is intentional. ## Extract information to list of character vectors methylation_data_for_visualisation <- extract_methylation_from_dataframe(     merged_modification_data,     locations_colname = \"forward_C+m?_locations\",     probabilities_colname = \"forward_C+m?_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"family\" = 6,                          \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = FALSE )  ## Use saved methylation data for visualisation to make image visualise_methylation(modification_locations     = methylation_data_for_visualisation$locations,                       modification_probabilities = methylation_data_for_visualisation$probabilities,                       sequence_lengths           = methylation_data_for_visualisation$lengths,                       filename = paste0(output_location, \"modification_09.png\"),                       return = FALSE)  ## View image knitr::include_graphics(paste0(github_location, \"modification_09.png\")) modified_fastq_data <- read_modified_fastq(\"inst/extdata/example_many_sequences_raw_modified.fastq\") metadata            <- read.csv(\"inst/extdata/example_many_sequences_metadata.csv\")  ## Merge with offset = 0 (but we aren't using the forward-ified information anyway) merged_modification_data <- merge_methylation_with_metadata(modified_fastq_data, metadata,                                                             reversed_location_offset = 0)  ## Extract information to list of character vectors methylation_data_for_visualisation <- extract_methylation_from_dataframe(     merged_modification_data,     locations_colname = \"C+m?_locations\",     probabilities_colname = \"C+m?_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"family\" = 6,                          \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = FALSE )  ## Use saved methylation data for visualisation to make image visualise_methylation(modification_locations     = methylation_data_for_visualisation$locations,                       modification_probabilities = methylation_data_for_visualisation$probabilities,                       sequence_lengths           = methylation_data_for_visualisation$lengths,                       filename = paste0(output_location, \"modification_10.png\"),                       return = FALSE)  ## View image knitr::include_graphics(paste0(github_location, \"modification_10.png\"))"},{"path":[]},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_MM_vector_to_locations.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert MM tag to absolute index locations (read_modified_fastq() helper) — convert_MM_vector_to_locations","title":"Convert MM tag to absolute index locations (read_modified_fastq() helper) — convert_MM_vector_to_locations","text":"function takes sequence, SAM-style vector number potential target bases skip target base actually assessed, target base type (defaults \"C\" 5-methylcytosine common). identifies indices/locations instances target base within sequence, goes along vector indices, skipping requested skips. example, sequence \"GGCGGCGGCGGC\" target \"C\" skips c(0, 0, 1) identify indices \"C\" occurs c(3, 6, 9, 12). take first index, second index, skip one, take fourth index .e. return c(3, 6, 12). instead skips given c(0, 2) take first index, skip two, take fourth index .e. return c(3, 12). skips given c(1, 1) skip one, take second index, skip one, take fourth index .e. return c(6, 12).  length skips corresponds number indices/locations returned (.e. length returned locations vector). Ideally length skips plus sum skips (.e. number returned plus total number skipped) less number possible locations. , last possible location taken; less number possible locations end skipped.Important: length skips plus sum skips greater number possible locations (instances target base within sequence), total number taken skipped locations greater number available locations. case, returned vector contain NA available locations run . example , skips = c(0, 0, 0, 0, 0) return c(3, 6, 9, 12, NA), skips = c(0, 2, 0) return c(3, 12, NA). Therefore, target base totally absent sequence (e.g. target \"\" \"GGCGGCGGCGGC\"), non-zero length skips return length NAs e.g. skips = c(0) return NA, skips = c(0, 1, 0) return c(NA, NA, NA). skips length zero, return numeric(0). function reversed convert_locations_to_MM_vector().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_MM_vector_to_locations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert MM tag to absolute index locations (read_modified_fastq() helper) — convert_MM_vector_to_locations","text":"","code":"convert_MM_vector_to_locations(sequence, skips, target_base = \"C\")"},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_MM_vector_to_locations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert MM tag to absolute index locations (read_modified_fastq() helper) — convert_MM_vector_to_locations","text":"sequence character. DNA sequence methylation information processed. skips integer vector. component SAM MM tag, representing number skipped target bases assessed base. target_base character. base type assessed skipped (defaults \"C\").","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_MM_vector_to_locations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert MM tag to absolute index locations (read_modified_fastq() helper) — convert_MM_vector_to_locations","text":"integer vector. base indices methylation/modification information processed. instances target base.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_MM_vector_to_locations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert MM tag to absolute index locations (read_modified_fastq() helper) — convert_MM_vector_to_locations","text":"","code":"convert_MM_vector_to_locations(     \"GGCGGCGGCGGC\",     skips = c(0, 0, 0, 0),     target_base = \"C\" ) #> [1]  3  6  9 12  convert_MM_vector_to_locations(     \"GGCGGCGGCGGC\",     skips = c(1, 1, 1, 1),     target_base = \"G\" ) #> [1]  2  5  8 11  convert_MM_vector_to_locations(     \"GGCGGCGGCGGC\",     skips = c(0, 0, 2, 1, 0),     target_base = \"G\" ) #> [1]  1  2  7 10 11"},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_base_to_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Map a single base to the corresponding number (generic ggDNAvis helper) — convert_base_to_number","title":"Map a single base to the corresponding number (generic ggDNAvis helper) — convert_base_to_number","text":"function takes single base numerically encodes visualisation via raster::raster().  Encoding: = 1, C = 2, G = 3, T/U = 4.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_base_to_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map a single base to the corresponding number (generic ggDNAvis helper) — convert_base_to_number","text":"","code":"convert_base_to_number(base)"},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_base_to_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map a single base to the corresponding number (generic ggDNAvis helper) — convert_base_to_number","text":"base character. single DNA/RNA base encode numerically (e.g. \"\").","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_base_to_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map a single base to the corresponding number (generic ggDNAvis helper) — convert_base_to_number","text":"integer. corresponding number.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_base_to_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map a single base to the corresponding number (generic ggDNAvis helper) — convert_base_to_number","text":"","code":"convert_base_to_number(\"A\") #> [1] 1 convert_base_to_number(\"c\") #> [1] 2 convert_base_to_number(\"g\") #> [1] 3 convert_base_to_number(\"T\") #> [1] 4 convert_base_to_number(\"u\") #> [1] 4"},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_input_seq_to_sequence_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a single input sequence into a vector of ","title":"Split a single input sequence into a vector of ","text":"Takes single input sequence integer line length, splits input sequence lines length (last line potentially shorter).  Optionally inserts empty strings \"\" line space .","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_input_seq_to_sequence_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a single input sequence into a vector of ","text":"","code":"convert_input_seq_to_sequence_list(   input_seq,   line_length,   spacing = 1,   spaces_first = TRUE )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_input_seq_to_sequence_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a single input sequence into a vector of ","text":"input_seq character. DNA/RNA sequence (purposes function, string, though DNA/RNA work later functions) split . line_length integer. long line (split-section) . spacing integer. many blank lines leave /line sequence. Defaults 0. spaces_first logical. Whether blank lines come (TRUE, default) (FALSE) line sequence.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_input_seq_to_sequence_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a single input sequence into a vector of ","text":"character vector. input sequence split multiple lines, specified spacing .","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_input_seq_to_sequence_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a single input sequence into a vector of ","text":"","code":"convert_input_seq_to_sequence_list(     \"GGCGGCGGC\",     line_length = 6,     spacing = 1,     spaces_first = TRUE ) #> Error in convert_input_seq_to_sequence_list(\"GGCGGCGGC\", line_length = 6,     spacing = 1, spaces_first = TRUE): unused argument (spaces_first = TRUE)  convert_input_seq_to_sequence_list(     \"GGCGGCGGC\",     line_length = 3,     spacing = 2,     spaces_first = FALSE ) #> Error in convert_input_seq_to_sequence_list(\"GGCGGCGGC\", line_length = 3,     spacing = 2, spaces_first = FALSE): unused argument (spaces_first = FALSE)  convert_input_seq_to_sequence_list(     \"GGCGGCGGC\",     line_length = 6,     spacing = 0 ) #> [1] \"GGCGGC\" \"GGC\""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_locations_to_MM_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert absolute index locations to MM tag (write_modified_fastq() helper) — convert_locations_to_MM_vector","title":"Convert absolute index locations to MM tag (write_modified_fastq() helper) — convert_locations_to_MM_vector","text":"function takes vector modified base locations absolute indices (.e. 1 mean first base sequence assessed modification; 15 mean 15th base ), converts vector format SAM/BAM MM tags. MM tag defines particular target base (e.g. C methylation), stores number skipped instances base sites modification assessed. practice, often means counting number non-CpG Cs CpG Cs. GGC repeat, bunch 0s every C CpG, unique sequence many non-CpG Cs. function reversed convert_MM_vector_to_locations().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_locations_to_MM_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert absolute index locations to MM tag (write_modified_fastq() helper) — convert_locations_to_MM_vector","text":"","code":"convert_locations_to_MM_vector(sequence, locations, target_base = \"C\")"},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_locations_to_MM_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert absolute index locations to MM tag (write_modified_fastq() helper) — convert_locations_to_MM_vector","text":"sequence character. DNA sequence methylation information processed. locations integer vector. base indices methylation/modification information processed. Must instances target base. target_base character. base type assessed skipped (defaults \"C\").","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_locations_to_MM_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert absolute index locations to MM tag (write_modified_fastq() helper) — convert_locations_to_MM_vector","text":"integer vector. component SAM MM tag, representing number skipped target bases assessed base.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_locations_to_MM_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert absolute index locations to MM tag (write_modified_fastq() helper) — convert_locations_to_MM_vector","text":"","code":"convert_locations_to_MM_vector(     \"GGCGGCGGCGGC\",     locations = c(3, 6, 9, 12),     target_base = \"C\" ) #> [1] 0 0 0 0  convert_locations_to_MM_vector(     \"GGCGGCGGCGGC\",     locations = c(1, 4, 7, 10),     target_base = \"G\" ) #> [1] 0 1 1 1  convert_locations_to_MM_vector(     \"GGCGGCGGCGGC\",     locations = c(1, 2, 4, 5, 7, 8, 10, 11),     target_base = \"G\" ) #> [1] 0 0 0 0 0 0 0 0"},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_modification_to_number_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert string-ified modification probabilities and locations to a single vector of probabilities (visualise_methylation() helper) — convert_modification_to_number_vector","title":"Convert string-ified modification probabilities and locations to a single vector of probabilities (visualise_methylation() helper) — convert_modification_to_number_vector","text":"Takes modification locations (indices along read signifying bases modification probability assessed) modification probabilities (probability modification assessed location, integer 0 255), comma-separated strings (e.g. \"1,5,25\") produced numerical vectors via vector_to_string(). Outputs numerical vector modification probability base along read. .e. -2 indices outside sequences, -1 bases modification assessed, probability 0-255 bases modification assessed.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_modification_to_number_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert string-ified modification probabilities and locations to a single vector of probabilities (visualise_methylation() helper) — convert_modification_to_number_vector","text":"","code":"convert_modification_to_number_vector(   modification_locations_str,   modification_probabilities_str,   max_length,   sequence_length )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_modification_to_number_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert string-ified modification probabilities and locations to a single vector of probabilities (visualise_methylation() helper) — convert_modification_to_number_vector","text":"modification_locations_str character. comma-separated string representing condensed numerical vector (e.g. \"3,6,9,12\", produced via vector_to_string()) indices along read modification assessed. Indexing starts 1. modification_probabilities_str character. comma-separated string representing condensed numerical vector (e.g. \"2,212,128,64\", produced via vector_to_string()) probability modification 8-bit (0-255) integer base modification assessed. max_length integer. long output vector . sequence_length integer. long sequence . smaller max_length, remaining spaces filled -2s .e. set background colour visualise_methylation().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_modification_to_number_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert string-ified modification probabilities and locations to a single vector of probabilities (visualise_methylation() helper) — convert_modification_to_number_vector","text":"numeric vector. vector length max_length indicating probability methylation index along read - 0 methylation assessed, probability 0-255 methylation assessed.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_modification_to_number_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert string-ified modification probabilities and locations to a single vector of probabilities (visualise_methylation() helper) — convert_modification_to_number_vector","text":"","code":"convert_modification_to_number_vector(     modification_locations_str = \"3,6,9,12\",     modification_probabilities = \"100,200,50,150\",     max_length = 15,     sequence_length = 13 ) #>  [1]  -1  -1 100  -1  -1 200  -1  -1  50  -1  -1 150  -1  -2  -2"},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_sequence_to_numbers.html","id":null,"dir":"Reference","previous_headings":"","what":"Map a sequence to a vector of numbers (generic ggDNAvis helper) — convert_sequence_to_numbers","title":"Map a sequence to a vector of numbers (generic ggDNAvis helper) — convert_sequence_to_numbers","text":"function takes sequence encodes vector numbers visualisation via raster::raster().  Encoding: = 1, C = 2, G = 3, T/U = 4.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_sequence_to_numbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map a sequence to a vector of numbers (generic ggDNAvis helper) — convert_sequence_to_numbers","text":"","code":"convert_sequence_to_numbers(sequence, length = NA)"},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_sequence_to_numbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map a sequence to a vector of numbers (generic ggDNAvis helper) — convert_sequence_to_numbers","text":"sequence character. DNA/RNA sequence (/C/G/T/U) encoded numerically. characters allowed. one sequence allowed. length integer. long output numerical vector . shorter sequence, vector include first n bases length. longer sequence, vector padded 0s end. left blank/set NA (default), output vector length input sequence.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_sequence_to_numbers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map a sequence to a vector of numbers (generic ggDNAvis helper) — convert_sequence_to_numbers","text":"integer vector. numerical encoding input sequence, cut/padded desired length.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_sequence_to_numbers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map a sequence to a vector of numbers (generic ggDNAvis helper) — convert_sequence_to_numbers","text":"","code":"convert_sequence_to_numbers(\"ATCGATCG\") #> [1] 1 4 2 3 1 4 2 3 convert_sequence_to_numbers(\"ATCGATCG\", length = NA) #> [1] 1 4 2 3 1 4 2 3 convert_sequence_to_numbers(\"ATCGATCG\", length = 4) #> [1] 1 4 2 3 convert_sequence_to_numbers(\"ATCGATCG\", length = 10) #>  [1] 1 4 2 3 1 4 2 3 0 0"},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_sequences_to_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a vector of sequences to a dataframe for plotting sequence contents and index annotations (visualise_single_sequence() helper) — convert_sequences_to_annotations","title":"Convert a vector of sequences to a dataframe for plotting sequence contents and index annotations (visualise_single_sequence() helper) — convert_sequences_to_annotations","text":"Takes sequence list output convert_input_seq_to_sequence_list() creates dataframe specifying x y coordinates character plot coordinate. applies sequence (e.g. determining plot place \"\") periodicit annotations index number (e.g. determining plot annotate base number 15).","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_sequences_to_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a vector of sequences to a dataframe for plotting sequence contents and index annotations (visualise_single_sequence() helper) — convert_sequences_to_annotations","text":"","code":"convert_sequences_to_annotations(   sequences,   line_length,   interval = 15,   annotations_above = TRUE,   annotation_vertical_position = 1/3 )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_sequences_to_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a vector of sequences to a dataframe for plotting sequence contents and index annotations (visualise_single_sequence() helper) — convert_sequences_to_annotations","text":"sequences character vector. Sequence plotted, split lines optionally including blank spacer lines. Output convert_input_seq_to_sequence_list(). line_length integer. long line . interval integer. frequently bases annotated index. Defaults 15. annotations_above logical. Whether annotations go (TRUE, default) (FALSE) line sequence. annotation_vertical_position numeric. far annotation numbers rendered (index_annotations_above = TRUE) (index_annotations_above = FALSE) base. Defaults 1/3. recommended change . Strongly discouraged set 0 1.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_sequences_to_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a vector of sequences to a dataframe for plotting sequence contents and index annotations (visualise_single_sequence() helper) — convert_sequences_to_annotations","text":"dataframe Dataframe coordinates labels (e.g. \"\" \"15), readable geom_text.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/convert_sequences_to_annotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a vector of sequences to a dataframe for plotting sequence contents and index annotations (visualise_single_sequence() helper) — convert_sequences_to_annotations","text":"","code":"convert_sequences_to_annotations(     c(\"GGCGGC\", \"\", \"ATCG\", \"\"),     line_length = 6,     interval = 3,     annotations_above = TRUE,     annotation_vertical_position = 1/3 ) #>    x_position y_position annotation     type #> 1  0.08333333  0.8750000          G Sequence #> 2  0.25000000  0.8750000          G Sequence #> 3  0.41666667  0.8750000          C Sequence #> 4  0.41666667  1.0833333          3   Number #> 5  0.58333333  0.8750000          G Sequence #> 6  0.75000000  0.8750000          G Sequence #> 7  0.91666667  0.8750000          C Sequence #> 8  0.91666667  1.0833333          6   Number #> 9  0.08333333  0.3750000          A Sequence #> 10 0.25000000  0.3750000          T Sequence #> 11 0.41666667  0.3750000          C Sequence #> 12 0.41666667  0.5833333          9   Number #> 13 0.58333333  0.3750000          G Sequence  convert_sequences_to_annotations(     c(\"GGCGGC\", \"\", \"ATCG\", \"\"),     line_length = 6,     interval = 0 ) #>    x_position y_position annotation     type #> 1  0.08333333      0.875          G Sequence #> 2  0.25000000      0.875          G Sequence #> 3  0.41666667      0.875          C Sequence #> 4  0.58333333      0.875          G Sequence #> 5  0.75000000      0.875          G Sequence #> 6  0.91666667      0.875          C Sequence #> 7  0.08333333      0.375          A Sequence #> 8  0.25000000      0.375          T Sequence #> 9  0.41666667      0.375          C Sequence #> 10 0.58333333      0.375          G Sequence"},{"path":"https://ejade42.github.io/ggDNAvis/reference/create_image_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Rasterise a vector of sequences into a numerical dataframe for ggplotting (generic ggDNAvis helper) — create_image_data","title":"Rasterise a vector of sequences into a numerical dataframe for ggplotting (generic ggDNAvis helper) — create_image_data","text":"Takes character vector sequences (allowed empty \"\" act spacing line) rasterises dataframe ggplot can read.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/create_image_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rasterise a vector of sequences into a numerical dataframe for ggplotting (generic ggDNAvis helper) — create_image_data","text":"","code":"create_image_data(sequences)"},{"path":"https://ejade42.github.io/ggDNAvis/reference/create_image_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rasterise a vector of sequences into a numerical dataframe for ggplotting (generic ggDNAvis helper) — create_image_data","text":"sequences character vector. vector sequences plotting, e.g. c(\"ATCG\", \"\", \"GGCGGC\", \"\"). sequence plotted left-aligned new line.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/create_image_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rasterise a vector of sequences into a numerical dataframe for ggplotting (generic ggDNAvis helper) — create_image_data","text":"dataframe. Rasterised dataframe representation sequences, readable ggplot2::ggplot().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/create_image_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rasterise a vector of sequences into a numerical dataframe for ggplotting (generic ggDNAvis helper) — create_image_data","text":"","code":"create_image_data(c(\"ATCG\", \"\", \"GGCGGC\", \"\")) #>             x     y layer #> 1  0.08333333 0.875     1 #> 2  0.25000000 0.875     4 #> 3  0.41666667 0.875     2 #> 4  0.58333333 0.875     3 #> 5  0.75000000 0.875     0 #> 6  0.91666667 0.875     0 #> 7  0.08333333 0.625     0 #> 8  0.25000000 0.625     0 #> 9  0.41666667 0.625     0 #> 10 0.58333333 0.625     0 #> 11 0.75000000 0.625     0 #> 12 0.91666667 0.625     0 #> 13 0.08333333 0.375     3 #> 14 0.25000000 0.375     3 #> 15 0.41666667 0.375     2 #> 16 0.58333333 0.375     3 #> 17 0.75000000 0.375     3 #> 18 0.91666667 0.375     2 #> 19 0.08333333 0.125     0 #> 20 0.25000000 0.125     0 #> 21 0.41666667 0.125     0 #> 22 0.58333333 0.125     0 #> 23 0.75000000 0.125     0 #> 24 0.91666667 0.125     0"},{"path":"https://ejade42.github.io/ggDNAvis/reference/debug_join_vector_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a numeric vector to console (ggDNAvis debug helper) — debug_join_vector_num","title":"Print a numeric vector to console (ggDNAvis debug helper) — debug_join_vector_num","text":"Takes numeric vector, prints console separated \", \". allows output copy-pasted vector within R script. Used taking vector outputs writing literals within script.  E.g. given input 1:5, prints 1, 2, 3, 4, 5, can directly copy-pasted within c() input vector. Printing normally via print(1:5) instead prints [1] 1 2 3 4 5, valid vector input copy-pasted directly. See debug_join_vector_str() equivalent character/string vectors.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/debug_join_vector_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a numeric vector to console (ggDNAvis debug helper) — debug_join_vector_num","text":"","code":"debug_join_vector_num(vector)"},{"path":"https://ejade42.github.io/ggDNAvis/reference/debug_join_vector_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a numeric vector to console (ggDNAvis debug helper) — debug_join_vector_num","text":"vector numeric vector. Usually generated function. function allows copy-pasting output directly create vector value.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/debug_join_vector_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a numeric vector to console (ggDNAvis debug helper) — debug_join_vector_num","text":"","code":"debug_join_vector_num(1:5) #> 1, 2, 3, 4, 5"},{"path":"https://ejade42.github.io/ggDNAvis/reference/debug_join_vector_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a character/string vector to console (ggDNAvis debug helper) — debug_join_vector_str","title":"Print a character/string vector to console (ggDNAvis debug helper) — debug_join_vector_str","text":"Takes character/string vector, prints console separated \", \". allows output copy-pasted vector within R script. Used taking vector outputs writing literals within script.  E.g. given input strsplit(\"ABCD\", split = \"\")[[1]], prints \"\", \"B\", \"C\", \"D\", can directly copy-pasted within c() input vector. Printing normally via print(strsplit(\"ABCD\", split = \"\")[[1]]) instead prints [1] \"\" \"B\" \"C\" \"D\", valid vector input copy-pasted directly. See debug_join_vector_num() equivalent numeric vectors.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/debug_join_vector_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a character/string vector to console (ggDNAvis debug helper) — debug_join_vector_str","text":"","code":"debug_join_vector_str(vector)"},{"path":"https://ejade42.github.io/ggDNAvis/reference/debug_join_vector_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a character/string vector to console (ggDNAvis debug helper) — debug_join_vector_str","text":"vector character vector. Usually generated function. function allows copy-pasting output directly create vector value.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/debug_join_vector_str.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a character/string vector to console (ggDNAvis debug helper) — debug_join_vector_str","text":"","code":"debug_join_vector_str(c(\"A\", \"B\", \"C\", \"D\")) #> \"A\", \"B\", \"C\", \"D\""},{"path":"https://ejade42.github.io/ggDNAvis/reference/example_many_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Example multiple sequences data — example_many_sequences","title":"Example multiple sequences data — example_many_sequences","text":"collection made-sequences style long reads repeat region (e.g. NOTCH2NLC), meta-data describing participant read family participant . Can used visualise_many_sequences(), visualise_methylation(), helper functions visualise sequences. Generation code available data-raw/example_many_sequences.R","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/example_many_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example multiple sequences data — example_many_sequences","text":"","code":"example_many_sequences"},{"path":[]},{"path":"https://ejade42.github.io/ggDNAvis/reference/example_many_sequences.html","id":"example-many-sequences","dir":"Reference","previous_headings":"","what":"example_many_sequences","title":"Example multiple sequences data — example_many_sequences","text":"dataframe 23 rows 10 columns: family Participant family individual Participant ID read Unique read ID sequence DNA sequence read sequence_length Length (nucleotides) read quality FASTQ quality scores read. character represents score 0 40 - see fastq_quality_scores. values made via pmin(pmax(round(rnorm(n, mean = 20, sd = 10)), 0), 40) .e. sampled normal distribution mean 20 standard deviation 10, rounded integers 0 40 (inclusive) - see example_many_sequences.R methylation_locations Indices along read (starting 1) methylation probability assessed .e. CpG sites. Stored single character value per read, condensed numeric vector via vector_to_string(). methylation_probabilities Probability methylation (8-bit integer .e. 0-255) assessed base. Stored single character value per read, condensed numeric vector via vector_to_string(). values made via round(runif(n, min = 0, max = 255)) - see example_many_sequences.R hydroxymethylation_locations Indices along read (starting 1) hydroxymethylation probability assessed .e. CpG sites. Stored single character value per read, condensed numeric vector via vector_to_string(). hydroxymethylation_probabilities Probability hydroxymethylation (8-bit integer .e. 0-255) assessed base. Stored single character value per read, condensed numeric vector via vector_to_string(). values made via round(runif(n, min = 0, max = 255 - this_base_methylation_probability)) summed methylation hydroxymethylation probability never exceeds 255 (100%) - see example_many_sequences.R","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/extract_and_sort_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract, sort, and add spacers between sequences in a dataframe — extract_and_sort_sequences","title":"Extract, sort, and add spacers between sequences in a dataframe — extract_and_sort_sequences","text":"function takes dataframe contains sequences metadata, recursively splits multiple levels groups defined grouping_levels, adds breaks level group defined grouping_levels. Within lowest-level group, reads sorted sort_by, order determined desc_sort.  Default values set work included dataset example_many_sequences.  returned sequences vector ideal input visualise_many_sequences(). Also called extract_methylation_from_dataframe() produce input visualise_methylation().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/extract_and_sort_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract, sort, and add spacers between sequences in a dataframe — extract_and_sort_sequences","text":"","code":"extract_and_sort_sequences(   sequence_dataframe,   sequence_variable = \"sequence\",   grouping_levels = c(family = 8, individual = 2),   sort_by = \"sequence_length\",   desc_sort = TRUE )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/extract_and_sort_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract, sort, and add spacers between sequences in a dataframe — extract_and_sort_sequences","text":"sequence_dataframe dataframe. dataframe containing sequence information required meta-data. See example_many_sequences example compatible dataframe. sequence_variable character. name column within dataframe containing sequence information output. Defaults \"sequence\". grouping_levels named character vector. variables used define groups/chunks, large gap left groups level. Set NA turn grouping. Defaults c(\"family\" = 8, \"individual\" = 2), meaning highest-level groups defined family column, gap 8 family. Likewise second-level groups (within family) defined individual column, gap 2 individual. number grouping variables gaps can given, long grouping variable column within dataframe. recommended lower-level groups granular subdivide higher-level groups (e.g. first divide families, individuals within families).  change order groups within level, make column factor order specified e.g. example_many_sequences$family <- factor(example_many_sequences$family, levels = c(\"Family 2\", \"Family 3\", \"Family 1\")) change order Family 2, Family 3, Family 1. sort_by character. name column within dataframe used sort/order rows within lowest-level group. Set NA turn sorting within groups. Recommended length sequence information, case default \"sequence_length\" generated via example_many_sequences$sequence_length <- nchar(example_many_sequences$sequence). desc_sort logical. Boolean specifying whether rows within groups sorted sort_by variable descending (TRUE, default) ascending (FALSE).","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/extract_and_sort_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract, sort, and add spacers between sequences in a dataframe — extract_and_sort_sequences","text":"character vector. sequences ordered grouped specified, blank sequences (\"\") inserted spacers specified.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/extract_and_sort_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract, sort, and add spacers between sequences in a dataframe — extract_and_sort_sequences","text":"","code":"extract_and_sort_sequences(     example_many_sequences,     sequence_variable = \"sequence\",     grouping_levels = c(\"family\" = 8, \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sortextract_and_sort_sequences(     example_many_sequences,     sequence_variable = \"sequence\",     grouping_levels = c(\"family\" = 3),     sort_by = \"sequence_length\",     desc_sort = FALSE ) #>  [1] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                        #>  [2] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                        #>  [3] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                  #>  [4] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                      #>  [5] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                      #>  [6] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGA\"                   #>  [7] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                #>  [8] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                #>  [9] \"GGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"          #> [10] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\" #> [11] \"\"                                                                                                       #> [12] \"\"                                                                                                       #> [13] \"\"                                                                                                       #> [14] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                   #> [15] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                #> [16] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"             #> [17] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"          #> [18] \"\"                                                                                                       #> [19] \"\"                                                                                                       #> [20] \"\"                                                                                                       #> [21] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA\"                      #> [22] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                #> [23] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA\"             #> [24] \"GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA\"             #> [25] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"          #> [26] \"GGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [27] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [28] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [29] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"        extract_and_sort_sequences(     example_many_sequences,     sequence_variable = \"sequence\",     grouping_levels = NA,     sort_by = \"sequence_length\",     desc_sort = TRUE ) #>  [1] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\" #>  [2] \"GGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #>  [3] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #>  [4] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #>  [5] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #>  [6] \"GGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"          #>  [7] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"          #>  [8] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"          #>  [9] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"             #> [10] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA\"             #> [11] \"GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA\"             #> [12] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                #> [13] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                #> [14] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                #> [15] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                #> [16] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGA\"                   #> [17] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                   #> [18] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                      #> [19] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                      #> [20] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA\"                      #> [21] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                  #> [22] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                        #> [23] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                         extract_and_sort_sequences(     example_many_sequences,     sequence_variable = \"sequence\",     grouping_levels = c(\"family\" = 8, \"individual\" = 2),     sort_byextract_and_sort_sequences(     example_many_sequences,     sequence_variable = \"sequence\",     grouping_levels = NA,     sort_by = NA ) #>  [1] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\" #>  [2] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                        #>  [3] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                #>  [4] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                      #>  [5] \"GGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"          #>  [6] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                        #>  [7] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                  #>  [8] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                #>  [9] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                      #> [10] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGA\"                   #> [11] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"          #> [12] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                   #> [13] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                #> [14] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"             #> [15] \"GGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [16] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [17] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"          #> [18] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA\"             #> [19] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                #> [20] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [21] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [22] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA\"                      #> [23] \"GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA\"              extract_and_sort_sequences(     example_many_sequences,     sequence_variable = \"quality\",     grouping_levels = c(\"individual\" = 3),     sort_by = \"quality\",     desc_sort},{"path":"https://ejade42.github.io/ggDNAvis/reference/extract_methylation_from_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract methylation information from dataframe for visualisation — extract_methylation_from_dataframe","title":"Extract methylation information from dataframe for visualisation — extract_methylation_from_dataframe","text":"function takes dataframe contains methylation information form locations (indices along read signifying bases modification probability assessed)  probabilities (probability modification assessed location, integer 0 255). observation/row dataframe represents one sequence (e.g. Nanopore read). locations probabilities column, sequence (row) many numbers associated. stored one string per observation e.g. \"3,6,9,12\", column representing character vector strings (e.g. c(\"3,6,9,12\", \"1,2,3,4\")). function calls extract_and_sort_sequences() three columns returns list vectors stored $locations, $probabilities, $lengths. can used input visualise_methylation().  Default arguments set work included example_many_sequences data.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/extract_methylation_from_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract methylation information from dataframe for visualisation — extract_methylation_from_dataframe","text":"","code":"extract_methylation_from_dataframe(   modification_data,   locations_colname = \"methylation_locations\",   probabilities_colname = \"methylation_probabilities\",   lengths_colname = \"sequence_length\",   grouping_levels = c(family = 8, individual = 2),   sort_by = \"sequence_length\",   desc_sort = TRUE )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/extract_methylation_from_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract methylation information from dataframe for visualisation — extract_methylation_from_dataframe","text":"modification_data dataframe. dataframe must contain columns methylation locations, methylation probabilities, sequence length read. former two condensed strings produced vector_to_string() e.g. \"1,2,3,4\". latter integer. See example_many_sequences example compatible dataframe. locations_colname character. name column within input dataframe contains methylation/modification location information. Defaults \"methylation_locations\". Values within column must comma-separated string representing condensed numerical vector (e.g. \"3,6,9,12\", produced via vector_to_string()) indices along read modification assessed. Indexing starts 1. probabilities_colname character. name column within input dataframe contains methylation/modification probability information. Defaults \"methylation_probabilities\". Values within column must comma-separated string representing condensed numerical vector (e.g. \"2,212,128,64\", produced via vector_to_string()) probability modification 8-bit (0-255) integer base modification assessed. lengths_colname character. name column within input dataframe contains length sequence. Defaults \"sequence_length\". Values within column must non-negative integers. grouping_levels named character vector. variables used define groups/chunks, large gap left groups level. Set NA turn grouping. Defaults c(\"family\" = 8, \"individual\" = 2), meaning highest-level groups defined family column, gap 8 family. Likewise second-level groups (within family) defined individual column, gap 2 individual. number grouping variables gaps can given, long grouping variable column within dataframe. recommended lower-level groups granular subdivide higher-level groups (e.g. first divide families, individuals within families).  change order groups within level, make column factor order specified e.g. example_many_sequences$family <- factor(example_many_sequences$family, levels = c(\"Family 2\", \"Family 3\", \"Family 1\")) change order Family 2, Family 3, Family 1. sort_by character. name column within dataframe used sort/order rows within lowest-level group. Set NA turn sorting within groups. Recommended length sequence information, case default \"sequence_length\" generated via example_many_sequences$sequence_legnth <- nchar(example_many_sequences$sequence). desc_sort logical. Boolean specifying whether rows within groups sorted sort_by variable descending (TRUE, default) ascending (FALSE).","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/extract_methylation_from_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract methylation information from dataframe for visualisation — extract_methylation_from_dataframe","text":"list, containing $locations (character vector), $probabilities (character vector), $lengths (numeric vector).","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/extract_methylation_from_dataframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract methylation information from dataframe for visualisation — extract_methylation_from_dataframe","text":"","code":"## See documentation for extract_and_sort_sequences() ## for more examples of changing sorting/grouping extract_methylation_from_dataframe(     example_many_sequences,     locations_colname = \"methylation_locations\",     probabilities_colname = \"methylation_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"family\" = 8, \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = TRUE ) #> $locations #>  [1] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99\"                #>  [2] \"3,6,9,12,15,18,27,30,33,42,45,48,57,60,63,72,75,78,87,90\"                         #>  [3] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84\"                         #>  [4] \"3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78\"                         #>  [5] \"3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60\"                                     #>  [6] \"\"                                                                                 #>  [7] \"\"                                                                                 #>  [8] \"3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66\"                                     #>  [9] \"3,6,9,12,15,18,21,24,27,30,42,45,57,60\"                                           #> [10] \"\"                                                                                 #> [11] \"\"                                                                                 #> [12] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84\"                         #> [13] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,78,81\"                            #> [14] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78\"                   #> [15] \"\"                                                                                 #> [16] \"\"                                                                                 #> [17] \"\"                                                                                 #> [18] \"\"                                                                                 #> [19] \"\"                                                                                 #> [20] \"\"                                                                                 #> [21] \"\"                                                                                 #> [22] \"\"                                                                                 #> [23] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90\" #> [24] \"\"                                                                                 #> [25] \"\"                                                                                 #> [26] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,84,87\"    #> [27] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84\"       #> [28] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,78,81\"          #> [29] \"\"                                                                                 #> [30] \"\"                                                                                 #> [31] \"\"                                                                                 #> [32] \"\"                                                                                 #> [33] \"\"                                                                                 #> [34] \"\"                                                                                 #> [35] \"\"                                                                                 #> [36] \"\"                                                                                 #> [37] \"3,6,9,18,21,30,33,42,45,54,57,66,69,78,81,90,93\"                                  #> [38] \"3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93\"                            #> [39] \"\"                                                                                 #> [40] \"\"                                                                                 #> [41] \"3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90\"                               #> [42] \"3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87\"                                  #> [43] \"3,6,9,12,15,18,21,24,27,30,39,42,51,54,63,66,75,78,81,84\"                         #> [44] \"\"                                                                                 #> [45] \"\"                                                                                 #> [46] \"3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93\"                            #> [47] \"\"                                                                                 #> [48] \"\"                                                                                 #> [49] \"3,6,9,12,15,18,21,24,27,30,33,42,45,54,57,66,69,78,81,90,93\"                      #> [50] \"3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87\"                            #> [51] \"3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78\"                         #>  #> $probabilities #>  [1] \"29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41\"                            #>  [2] \"170,236,120,36,139,50,229,99,79,41,229,42,230,34,34,27,130,77,7,79\"                                        #>  [3] \"206,141,165,80,159,84,128,173,124,62,195,19,79,183,129,39,129,126,192,45\"                                  #>  [4] \"216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82\"                                         #>  [5] \"10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253\"                                                   #>  [6] \"\"                                                                                                          #>  [7] \"\"                                                                                                          #>  [8] \"31,56,233,241,71,31,203,190,234,254,240,124,72,64,128,127\"                                                 #>  [9] \"189,9,144,71,52,34,83,40,33,111,10,182,26,242\"                                                             #> [10] \"\"                                                                                                          #> [11] \"\"                                                                                                          #> [12] \"81,245,162,32,108,233,119,232,152,161,222,128,251,83,123,91,160,189,144,250\"                               #> [13] \"149,181,109,88,194,108,143,30,77,122,88,153,19,244,6,215,161,79,189\"                                       #> [14] \"147,112,58,21,217,60,252,153,255,96,142,110,147,110,57,22,163,110,19,205,83,193\"                           #> [15] \"\"                                                                                                          #> [16] \"\"                                                                                                          #> [17] \"\"                                                                                                          #> [18] \"\"                                                                                                          #> [19] \"\"                                                                                                          #> [20] \"\"                                                                                                          #> [21] \"\"                                                                                                          #> [22] \"\"                                                                                                          #> [23] \"163,253,33,225,207,210,213,187,251,163,168,135,81,196,134,187,78,103,52,251,144,71,47,193,145,238,163,179\" #> [24] \"\"                                                                                                          #> [25] \"\"                                                                                                          #> [26] \"191,91,194,96,204,7,129,209,139,68,88,94,109,234,200,188,72,116,73,178,209,167,105,243,62,155,193\"         #> [27] \"176,250,122,197,146,246,203,136,152,67,71,17,144,67,1,150,133,215,8,153,68,31,26,191,4,13\"                 #> [28] \"122,217,108,8,66,85,34,127,205,86,130,126,203,145,27,206,145,54,191,78,125,252,108,62,55\"                  #> [29] \"\"                                                                                                          #> [30] \"\"                                                                                                          #> [31] \"\"                                                                                                          #> [32] \"\"                                                                                                          #> [33] \"\"                                                                                                          #> [34] \"\"                                                                                                          #> [35] \"\"                                                                                                          #> [36] \"\"                                                                                                          #> [37] \"177,29,162,79,90,250,137,113,242,115,49,253,140,196,233,174,104\"                                           #> [38] \"104,37,50,49,104,89,213,51,220,101,39,87,94,109,48,168,235,187,225\"                                        #> [39] \"\"                                                                                                          #> [40] \"\"                                                                                                          #> [41] \"243,50,121,98,95,7,237,105,244,69,132,249,94,79,9,170,235,11\"                                              #> [42] \"51,190,33,181,255,241,151,186,124,196,1,142,117,84,213,249,168\"                                            #> [43] \"60,209,185,249,68,224,124,78,101,194,26,107,168,75,53,1,27,55,29,175\"                                      #> [44] \"\"                                                                                                          #> [45] \"\"                                                                                                          #> [46] \"49,251,241,176,189,187,166,43,235,144,137,5,93,175,106,193,198,146,48\"                                     #> [47] \"\"                                                                                                          #> [48] \"\"                                                                                                          #> [49] \"193,24,159,106,198,206,247,55,221,106,131,198,34,105,169,231,88,27,238,51,14\"                              #> [50] \"161,156,9,65,198,255,245,191,174,63,155,146,13,95,228,100,132,45,49\"                                       #> [51] \"109,86,70,169,200,112,237,69,168,97,239,188,150,208,225,190,128,252,142,224\"                               #>  #> $lengths #>  [1] 102  93  87  81  63   0   0  69  63   0   0  87  84  81   0   0   0   0   0 #> [20]   0   0   0  93   0   0  90  87  84   0   0   0   0   0   0   0   0  96  96 #> [39]   0   0  93  90  87   0   0  96   0   0  96  90  81 #>   extract_methylation_from_dataframe(     example_many_sequences,     locations_colname = \"hydroxymethylation_locations\",     probabilities_colname = \"hydroxymethylation_probabilities\",     lengths_colname = \"sequence_length\",     grouping_levels = c(\"family\" = 8, \"individual\" = 2),     sort_by = \"sequence_length\",     desc_sort = TRUE ) #> $locations #>  [1] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99\"                #>  [2] \"3,6,9,12,15,18,27,30,33,42,45,48,57,60,63,72,75,78,87,90\"                         #>  [3] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84\"                         #>  [4] \"3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78\"                         #>  [5] \"3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60\"                                     #>  [6] \"\"                                                                                 #>  [7] \"\"                                                                                 #>  [8] \"3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66\"                                     #>  [9] \"3,6,9,12,15,18,21,24,27,30,42,45,57,60\"                                           #> [10] \"\"                                                                                 #> [11] \"\"                                                                                 #> [12] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84\"                         #> [13] \"3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,78,81\"                            #> [14] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78\"                   #> [15] \"\"                                                                                 #> [16] \"\"                                                                                 #> [17] \"\"                                                                                 #> [18] \"\"                                                                                 #> [19] \"\"                                                                                 #> [20] \"\"                                                                                 #> [21] \"\"                                                                                 #> [22] \"\"                                                                                 #> [23] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90\" #> [24] \"\"                                                                                 #> [25] \"\"                                                                                 #> [26] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,84,87\"    #> [27] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84\"       #> [28] \"3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,78,81\"          #> [29] \"\"                                                                                 #> [30] \"\"                                                                                 #> [31] \"\"                                                                                 #> [32] \"\"                                                                                 #> [33] \"\"                                                                                 #> [34] \"\"                                                                                 #> [35] \"\"                                                                                 #> [36] \"\"                                                                                 #> [37] \"3,6,9,18,21,30,33,42,45,54,57,66,69,78,81,90,93\"                                  #> [38] \"3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93\"                            #> [39] \"\"                                                                                 #> [40] \"\"                                                                                 #> [41] \"3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90\"                               #> [42] \"3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87\"                                  #> [43] \"3,6,9,12,15,18,21,24,27,30,39,42,51,54,63,66,75,78,81,84\"                         #> [44] \"\"                                                                                 #> [45] \"\"                                                                                 #> [46] \"3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93\"                            #> [47] \"\"                                                                                 #> [48] \"\"                                                                                 #> [49] \"3,6,9,12,15,18,21,24,27,30,33,42,45,54,57,66,69,78,81,90,93\"                      #> [50] \"3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87\"                            #> [51] \"3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78\"                         #>  #> $probabilities #>  [1] \"26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34\"                 #>  [2] \"57,18,64,31,63,40,23,61,55,34,23,35,23,30,29,24,64,53,7,54\"                          #>  [3] \"40,63,58,55,60,56,64,56,64,47,46,17,55,52,64,33,63,64,47,37\"                         #>  [4] \"33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55\"                           #>  [5] \"10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2\"                                      #>  [6] \"\"                                                                                    #>  [7] \"\"                                                                                    #>  [8] \"27,44,20,13,51,28,41,48,19,1,14,64,52,48,64,64\"                                      #>  [9] \"49,9,63,52,41,30,56,33,29,63,9,52,23,12\"                                             #> [10] \"\"                                                                                    #> [11] \"\"                                                                                    #> [12] \"55,10,59,28,62,20,64,21,62,59,29,64,4,56,64,59,60,49,63,5\"                           #> [13] \"80,43,103,71,21,112,47,126,21,40,80,35,142,1,238,1,79,111,20\"                        #> [14] \"62,63,45,19,32,46,3,61,0,159,42,80,46,84,86,52,8,92,102,4,138,20\"                    #> [15] \"\"                                                                                    #> [16] \"\"                                                                                    #> [17] \"\"                                                                                    #> [18] \"\"                                                                                    #> [19] \"\"                                                                                    #> [20] \"\"                                                                                    #> [21] \"\"                                                                                    #> [22] \"\"                                                                                    #> [23] \"68,1,220,4,42,36,35,57,3,90,56,79,92,19,93,36,130,47,82,1,109,104,58,11,83,10,86,49\" #> [24] \"\"                                                                                    #> [25] \"\"                                                                                    #> [26] \"3,123,22,121,19,198,3,23,95,102,45,55,54,9,51,53,135,39,83,22,32,72,98,5,184,24,38\"  #> [27] \"17,3,130,28,84,5,50,95,55,112,49,67,7,106,67,0,72,21,209,3,112,60,28,6,188,4\"        #> [28] \"93,18,125,104,6,44,74,17,25,136,42,66,26,88,129,5,89,114,14,133,40,1,145,82,49\"      #> [29] \"\"                                                                                    #> [30] \"\"                                                                                    #> [31] \"\"                                                                                    #> [32] \"\"                                                                                    #> [33] \"\"                                                                                    #> [34] \"\"                                                                                    #> [35] \"\"                                                                                    #> [36] \"\"                                                                                    #> [37] \"59,157,11,112,51,2,116,77,6,133,93,0,114,32,17,74,103\"                               #> [38] \"61,89,30,41,29,68,15,170,7,133,86,26,55,54,88,16,13,63,22\"                           #> [39] \"\"                                                                                    #> [40] \"\"                                                                                    #> [41] \"11,195,26,74,62,93,1,139,5,178,33,3,158,65,76,3,13,225\"                              #> [42] \"9,13,165,10,0,10,104,65,78,43,124,87,0,95,19,2,73\"                                   #> [43] \"191,30,16,5,136,30,35,156,75,19,90,112,9,76,133,75,47,0,24,17\"                       #> [44] \"\"                                                                                    #> [45] \"\"                                                                                    #> [46] \"24,3,3,78,63,47,66,155,13,19,109,141,87,2,55,43,24,83,161\"                           #> [47] \"\"                                                                                    #> [48] \"\"                                                                                    #> [49] \"36,44,73,14,35,20,6,162,33,32,108,24,113,116,11,10,111,207,6,21,225\"                 #> [50] \"52,87,155,117,2,0,3,50,81,184,75,74,60,97,15,8,46,188,81\"                            #> [51] \"29,9,79,29,15,95,14,82,81,43,11,25,98,35,18,53,112,2,57,31\"                          #>  #> $lengths #>  [1] 102  93  87  81  63   0   0  69  63   0   0  87  84  81   0   0   0   0   0 #> [20]   0   0   0  93   0   0  90  87  84   0   0   0   0   0   0   0   0  96  96 #> [39]   0   0  93  90  87   0   0  96   0   0  96  90  81 #>"},{"path":"https://ejade42.github.io/ggDNAvis/reference/fastq_quality_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector of the quality scores used by the FASTQ format — fastq_quality_scores","title":"Vector of the quality scores used by the FASTQ format — fastq_quality_scores","text":"vector characters used indicate quality scores 0 40 FASTQ format. scores related error probability \\(p\\) via \\(Q = -10 \\text{ log}_{10}(p)\\), Q-score 10 (represented \"+\") means error probability 0.1, Q-score 20 (\"5\") means error probability 0.01, Q-score 30 (\"?\") means error probability 0.001. character representations store Q-scores one byte using ASCII encodings, Q-score character ASCII code minus 33 (e.g. ASCII code 65 represents Q-score 32). vector contains characters order starting score 0, meaning character index \\(n\\) represents Q-score \\(n-1\\) e.g. first character (\"!\") represents score 0; eleventh character (\"+\") represents score 10. full set possible score representations, order presented single string, !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHI. Generation code available data-raw/fastq_quality_scores.R","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/fastq_quality_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector of the quality scores used by the FASTQ format — fastq_quality_scores","text":"","code":"fastq_quality_scores"},{"path":[]},{"path":"https://ejade42.github.io/ggDNAvis/reference/fastq_quality_scores.html","id":"fastq-quality-scores","dir":"Reference","previous_headings":"","what":"fastq_quality_scores","title":"Vector of the quality scores used by the FASTQ format — fastq_quality_scores","text":"character vector length 41 fastq_quality_scores vector c(\"!\", '\"', \"#\", \"$\", \"%\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \"-\", \".\", \"/\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \":\", \";\", \"<\", \"=\", \">\", \"?\", \"@\", \"\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"\")","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/ggDNAvis-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggDNAvis: 'ggplot2'-Based Tools for Visualising DNA Sequences and Modifications — ggDNAvis-package","title":"ggDNAvis: 'ggplot2'-Based Tools for Visualising DNA Sequences and Modifications — ggDNAvis-package","text":"Uses 'ggplot2' visualise either () single DNA/RNA sequence split across multiple lines, (b) multiple DNA/RNA sequences, occupying whole line, (c) base modifications DNA methylation called modified bases models Dorado Guppy. Functions starting visualise_<something>() main plotting functions, functions starting extract_<something>() key helper functions reading files reformatting data. Source code available https://github.com/ejade42/ggDNAvis full non-expert user guide available https://ejade42.github.io/ggDNAvis/.","code":""},{"path":[]},{"path":"https://ejade42.github.io/ggDNAvis/reference/ggDNAvis-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggDNAvis: 'ggplot2'-Based Tools for Visualising DNA Sequences and Modifications — ggDNAvis-package","text":"Maintainer: Evelyn Jade evelynjade42@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/merge_fastq_with_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge FASTQ data with metadata — merge_fastq_with_metadata","title":"Merge FASTQ data with metadata — merge_fastq_with_metadata","text":"Merge dataframe sequence quality data (produced read_fastq() unmodified FASTQ file) dataframe metadata, reverse-complementing sequences required reads now forward direction. merge_methylation_with_metadata() equivalent function working FASTQs contain DNA modification information. FASTQ dataframe must contain columns \"read\" (unique read ID), \"sequence\" (DNA sequence), \"quality\" (FASTQ quality score). columns allowed required, preserved unaltered merged data. Metadata dataframe must contain \"read\" (unique read ID) \"direction\" (read direction, either \"forward\" \"reverse\" read) columns, can contain columns arbitrary information read. Columns might useful include participant ID family designations read can associated participant family.Important: key feature function uses direction column metadata identify rows reverse reads. reverse reads reversed-complemented quality scores reversed reads forward direction, ideal consistent analysis visualisation. output columns \"forward_sequence\" \"forward_quality\". Calls reverse_sequence_if_needed() reverse_quality_if_needed() implement reversing - see documentation functions details.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/merge_fastq_with_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge FASTQ data with metadata — merge_fastq_with_metadata","text":"","code":"merge_fastq_with_metadata(   fastq_data,   metadata,   reverse_complement_mode = \"DNA\" )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/merge_fastq_with_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge FASTQ data with metadata — merge_fastq_with_metadata","text":"fastq_data dataframe. dataframe contaning sequence quality data, produced read_fastq(). Must contain read id column (must called \"read\"), sequence column (\"sequence\"), quality column (\"quality\"). Additional columns fine simply included unaltered merged dataframe. metadata dataframe. dataframe containing metadata read fastq_data. Must contain \"read\" column identical column name fastq_data, containing unique read IDs (used merge dataframes). Must also contain \"direction\" column \"forward\" \"reverse\" (e.g. c(\"forward\", \"forward\", \"reverse\")) indicating direction read.Important: Reverse reads sequence quality scores reversed every output read now forward. stored columns called \"forward_sequence\" \"forward_quality\". See reverse_sequence_if_needed() reverse_quality_if_needed() documentation details reversing implemented. reverse_complement_mode character. Whether reverse-complemented sequences converted DNA (.e. complements T) RNA (.e. complements U). Must either \"DNA\" \"RNA\". affects reverse-complemented sequences. Sequences forward begin altered. Uses reverse_complement() via reverse_sequence_if_needed().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/merge_fastq_with_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge FASTQ data with metadata — merge_fastq_with_metadata","text":"dataframe. merged dataframe containing columns input dataframes, well forward versions sequences qualities.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/merge_fastq_with_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge FASTQ data with metadata — merge_fastq_with_metadata","text":"","code":"## Locate files fastq_file <- system.file(\"extdata\",                           \"example_many_sequences_raw.fastq\",                           package = \"ggDNAvis\") metadata_file <- system.file(\"extdata\",                              \"example_many_sequences_metadata.csv\",                              package = \"ggDNAvis\")  ## Read files fastq_data <- read_fastq(fastq_file) metadata   <- read.csv(metadata_file)  ## Merge data (including reversing if needed) merge_fastq_with_metadata(fastq_data, metadata) #>     read   family individual direction #> 1  F1-1a Family 1       F1-1   forward #> 2  F1-1b Family 1       F1-1   forward #> 3  F1-1c Family 1       F1-1   reverse #> 4  F1-1d Family 1       F1-1   forward #> 5  F1-1e Family 1       F1-1   reverse #> 6  F1-2a Family 1       F1-2   reverse #> 7  F1-2b Family 1       F1-2   forward #> 8  F1-3a Family 1       F1-3   forward #> 9  F1-3b Family 1       F1-3   forward #> 10 F1-3c Family 1       F1-3   reverse #> 11 F2-1a Family 2       F2-1   forward #> 12 F2-2a Family 2       F2-2   reverse #> 13 F2-2b Family 2       F2-2   forward #> 14 F2-2c Family 2       F2-2   reverse #> 15 F3-1a Family 3       F3-1   reverse #> 16 F3-1b Family 3       F3-1   reverse #> 17 F3-2a Family 3       F3-2   forward #> 18 F3-2b Family 3       F3-2   forward #> 19 F3-2c Family 3       F3-2   reverse #> 20 F3-3a Family 3       F3-3   forward #> 21 F3-4a Family 3       F3-4   reverse #> 22 F3-4b Family 3       F3-4   forward #> 23 F3-4c Family 3       F3-4   forward #>                                                                                                  sequence #> 1  GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 2                                         GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 3                 TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 4                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 5           TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCC #> 6                                         TCCGCCGCCTCCTCCTCCGCCGCCTCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 7                                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA #> 8                 GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 9                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA #> 10                   TCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 11          GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 12                   TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 13                GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 14             TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 15       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCC #> 16       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCC #> 17          GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 18             GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA #> 19                TCCGCCGCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 20       GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 21       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 22                      GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA #> 23             GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA #>                                                                                                   quality #> 1  )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90 #> 2                                         60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139 #> 3                 @9889C8<<*96;52!*86,227.<I.8AI<>;2/391%D19*5@G=8<7<:!7+;:I:-!03<0AI>9?4!57I*-C#25FD24F; #> 4                       :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0 #> 5           6<749)6;/@02!.2'40*D79,15),5::=:@-!E7&8?A=D/!#2:.26-57&/I58(C035H>H4,H:%3-;!00!-A6@?84-3E2*4; #> 6                                         <-!I79$A.)@@0:5/8>C2,(\"*(<7-6G4)&.=1CC9I818C(,74:5(<EE/.-\")<(6E #> 7                                   F='I#*5I:<F?)<4G3&:95*-5?1,!:9BD4B5.-27577<2E9)2:189B.5/*#7;;'**.7;-! #> 8                 ?;.*26<C-8B,3#8/,-9!1++:94:/!A317=9>502=-+8;$=53@D*?/6:6&0D7-.@8,5;F,1?0D?$9'&665B8.604 #> 9                       *46.5//3:37?24:(:0*#.))E)?:,/172=2!4\">.*/;\"8+5<;D6.I2=>:C3)108,<)GC161)!55E!.>86/ #> 10                   1;3*=4G5'+()0A659+2;3/!;34:%0E432(38@3+I?924C4E-4;*4&*9-6A64>66G5',I2<962C121B@A/637 #> 11          =<\/-I354/,*>+<CA40*537/;<@I7/4%6192'5'>#4:&C,072+90:0+4;74\"D5,38&<7A?00+1>G>#=?;,@<<1=64D=!1& #> 12                   7;86<>H.)-1H+7I6.+39!4>5=!F483+;5=-7.4!*821*6$I'DI):=+0?3-(<7;.791062#H2.1<*7145:>1; #> 13                7?38,EC#3::=1)8&;<\">3.9BE)1661!2)5-4.11B<3)?')-+,B4.<7)/:IE=5$.3:66G9216-C20,>(0848(1$- #> 14             2>%AC6.?G=59+1=+EC?264?'B6$1@<7D99->$18+*;1!@?8>9645+23B/<=*.6/6543BI494E84)1=9;/8=6+/,68@ #> 15       7);7-=464F1;7;(83B84.@79.>,!>?>16;,6:=/@B;C:;63+/+;69;?@&>I'01!-3H%.,6;=-3=!A5'.-)9@?8*?346C<2*/ #> 16       :C8E6789(=9%1.66A463B5/B8;A51=?=<,8/461!058!6354!<609I9@:7.E.38)7;@@6/C?D&,*%D,I6>6:4%9(1/7>$<C/ #> 17          :0I4099<,4E01;/@96%2I2<,%<C&=81F+4<*@4A5.('4!%I3CE657<=!5;37>4D:%3;7'\"4<.9;?;7%0>:,84B512,B7/ #> 18             9>124!752+@06I/.72097*';-+A60=B?+/8'15477>4-435D;G@G'./21:(0/1/A=7'I>A\"3=9;;12,@\"2=3D=,458 #> 19                <<95G42/@E!1)A68,'%=60C4)3,;9C/;A8<6!-(?83,,194*49G1-,:64E-?/!/,*07AA!G?-9=!(/-+6/@>2/0 #> 20       $<,5\"7+!$';8<0794*@FI>34224!57+#1!F<+53$,?)-.A3;=1*71C02<.5:1)82!86$03/;%+1C3+D3;@9B-E#+/70;9<D' #> 21       53?I.;)/.91%3:6)0041C)I;2<\"3:8?*954::080?3<?>=7A;/#5D?;I2@075;:C.-4HI3GE+-?.,I>)I!>4(5(:1\"2-#-2? #> 22                      .85$#;!1F$8E:B+;7CI6@11/'65<3,4G:8@GF1413:0)3CH1=44.%G=#2E67=?;9DF7358.;(I!74:1I4 #> 23             5@<733';9+3BB)=69,3!.2B*86'8E>@3?!(36:<002/4>:1.43A!+;<.3G*G8?0*991,B(C/\"I9*1-86)8.;;5-0+= #>    sequence_length #> 1              102 #> 2               63 #> 3               87 #> 4               81 #> 5               93 #> 6               63 #> 7               69 #> 8               87 #> 9               81 #> 10              84 #> 11              93 #> 12              84 #> 13              87 #> 14              90 #> 15              96 #> 16              96 #> 17              93 #> 18              90 #> 19              87 #> 20              96 #> 21              96 #> 22              81 #> 23              90 #>                                                                                          forward_sequence #> 1  GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 2                                         GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 3                 GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 4                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 5           GGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 6                                         GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA #> 7                                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA #> 8                 GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 9                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA #> 10                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGA #> 11          GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 12                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 13                GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 14             GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 15       GGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 16       GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 17          GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 18             GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA #> 19                GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGCGGA #> 20       GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 21       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 22                      GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA #> 23             GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA #>                                                                                           forward_quality #> 1  )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90 #> 2                                         60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139 #> 3                 ;F42DF52#C-*I75!4?9>IA0<30!-:I:;+7!:<7<8=G@5*91D%193/2;><IA8.I<.722,68*!25;69*<<8C9889@ #> 4                       :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0 #> 5           ;4*2E3-48?@6A-!00!;-3%:H,4H>H530C(85I/&75-62.:2#!/D=A?8&7E!-@:=::5,)51,97D*04'2.!20@/;6)947<6 #> 6                                         E6(<)\"-./EE<(5:47,(C818I9CC1=.&)4G6-7<(*\"(,2C>8/5:0@@).A$97I!-< #> 7                                   F='I#*5I:<F?)<4G3&:95*-5?1,!:9BD4B5.-27577<2E9)2:189B.5/*#7;;'**.7;-! #> 8                 ?;.*26<C-8B,3#8/,-9!1++:94:/!A317=9>502=-+8;$=53@D*?/6:6&0D7-.@8,5;F,1?0D?$9'&665B8.604 #> 9                       *46.5//3:37?24:(:0*#.))E)?:,/172=2!4\">.*/;\"8+5<;D6.I2=>:C3)108,<)GC161)!55E!.>86/ #> 10                   736/A@B121C269<2I,'5G66>46A6-9*&4*;4-E4C429?I+3@83(234E0%:43;!/3;2+956A0)(+'5G4=*3;1 #> 11          =<\/-I354/,*>+<CA40*537/;<@I7/4%6192'5'>#4:&C,072+90:0+4;74\"D5,38&<7A?00+1>G>#=?;,@<<1=64D=!1& #> 12                   ;1>:5417*<1.2H#260197.;7<(-3?0+=:)ID'I$6*128*!4.7-=5;+384F!=5>4!93+.6I7+H1-).H><68;7 #> 13                7?38,EC#3::=1)8&;<\">3.9BE)1661!2)5-4.11B<3)?')-+,B4.<7)/:IE=5$.3:66G9216-C20,>(0848(1$- #> 14             @86,/+6=8/;9=1)48E494IB3456/6.*=<\/B32+5469>8?@!1;*+81$>-99D7<@1$6B'?462?CE+=1+95=G?.6CA%>2 #> 15       /*2<C643?*8?@9)-.'5A!=3-=;6,.%H3-!10'I>&@?;96;+/+36;:C;B@/=:6,;61>?>!,>.97@.48B38(;7;1F464=-7;)7 #> 16       /C<$>7/1(9%4:6>6I,D%*,&D?C/6@@;7)83.E.7:@9I906<!4536!850!164/8,<=?=15A;8B/5B364A66.1%9=(9876E8C: #> 17          :0I4099<,4E01;/@96%2I2<,%<C&=81F+4<*@4A5.('4!%I3CE657<=!5;37>4D:%3;7'\"4<.9;?;7%0>:,84B512,B7/ #> 18             9>124!752+@06I/.72097*';-+A60=B?+/8'15477>4-435D;G@G'./21:(0/1/A=7'I>A\"3=9;;12,@\"2=3D=,458 #> 19                0/2>@/6+-/(!=9-?G!AA70*,/!/?-E46:,-1G94*491,,38?(-!6<8A;/C9;,3)4C06=%',86A)1!E@/24G59<< #> 20       $<,5\"7+!$';8<0794*@FI>34224!57+#1!F<+53$,?)-.A3;=1*71C02<.5:1)82!86$03/;%+1C3+D3;@9B-E#+/70;9<D' #> 21       ?2-#-2\"1:(5(4>!I)>I,.?-+EG3IH4-.C:;570@2I;?D5#/;A7=>?<3?080::459*?8:3\"<2;I)C1400)6:3%19./);.I?35 #> 22                      .85$#;!1F$8E:B+;7CI6@11/'65<3,4G:8@GF1413:0)3CH1=44.%G=#2E67=?;9DF7358.;(I!74:1I4 #> 23             5@<733';9+3BB)=69,3!.2B*86'8E>@3?!(36:<002/4>:1.43A!+;<.3G*G8?0*991,B(C/\"I9*1-86)8.;;5-0+="},{"path":"https://ejade42.github.io/ggDNAvis/reference/merge_methylation_with_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge methylation with metadata — merge_methylation_with_metadata","title":"Merge methylation with metadata — merge_methylation_with_metadata","text":"Merge dataframe methylation/modification data (produced read_modified_fastq()) dataframe metadata, reversing sequence modification information required information now forward direction. merge_fastq_with_metadata() equivalent function working unmodified FASTQs (sequence quality ). Methylation/modification dataframe must contain columns \"read\" (unique read ID), \"sequence\" (DNA sequence), \"quality\" (FASTQ quality score), \"sequence_length\" (read length), \"modification_types\" (comma-separated string SAMtools modification headers produced via vector_to_string() e.g. \"C+h?,C+m?\"), , modification type, column comma-separated strings modification locations (e.g. \"3,6,9,12\") column comma-separated strings modification probabilities (e.g. \"255,0,64,128\"). See read_modified_fastq() information dataframe formatted produced. columns allowed required, preserved unaltered merged data. Metadata dataframe must contain \"read\" (unique read ID) \"direction\" (read direction, either \"forward\" \"reverse\" read) columns, can contain columns arbitrary information read. Columns might useful include participant ID family designations read can associated participant family.Important: key feature function uses direction column metadata identify rows reverse reads. reverse reads reversed-complemented modification information reversed reads forward direction, ideal consistent analysis visualisation. output columns \"forward_sequence\", \"forward_quality\", \"forward_<modification_type>_locations\", \"forward_<modification_type>_probabilities\". Calls reverse_sequence_if_needed(), reverse_quality_if_needed(), reverse_locations_if_needed(), reverse_probabilities_if_needed() implement reversing - see documentation functions details. wanting write reversed sequences FASTQ via write_modified_fastq(), locations must symmetric (e.g. CpG) offset must set 1. Asymmetric locations impossible write modified FASTQ reversed e.g. cytosine methylation assessed guanines, SAMtools account . Symmetrically reversing CpGs via reversed_location_offset = 1 way fix .","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/merge_methylation_with_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge methylation with metadata — merge_methylation_with_metadata","text":"","code":"merge_methylation_with_metadata(   methylation_data,   metadata,   reversed_location_offset = 0,   reverse_complement_mode = \"DNA\" )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/merge_methylation_with_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge methylation with metadata — merge_methylation_with_metadata","text":"methylation_data dataframe. dataframe contaning methylation/modification data, produced read_modified_fastq(). Must contain read id column (must called \"read\"), sequence column (\"sequence\"), quality column (\"quality\"), sequence length column (\"sequence_length\"), modification types column (\"modification_types\"), , modification type listed modification_types, column locations (\"<modification_type>_locations\") column probabilities (\"<modification_type>_probabilities\"). Additional columns fine simply included unaltered merged dataframe.  See read_modified_fastq() documentation details expected dataframe format. metadata dataframe. dataframe containing metadata read methylation_data. Must contain \"read\" column identical column name methylation_data, containing unique read IDs (used merge dataframes). Must also contain \"direction\" column \"forward\" \"reverse\" (e.g. c(\"forward\", \"forward\", \"reverse\")) indicating direction read.Important: Reverse reads sequence, quality scores, modification locations, modification probabilities reversed every output read now forward. stored columns called \"forward_sequence\", \"forward_quality\", \"forward_<modification_type>_locations\", \"forward_<modification_type>_probabilities\". multiple modification types present, multiple locations probabilities columns created. See reverse_sequence_if_needed(), reverse_quality_if_needed(), reverse_locations_if_needed(), reverse_probabilities_if_needed() documentation details reversing implemented. reversed_location_offset integer. much modification locations shifted . Defaults 0. important CpG assessed methylation C, reverse complementing give methylation score G reverse-complemented strand. biologically accurate, visualising methylation may desired shift locations 1 .e. correspond C reverse-complemented CpG rather G, allows consistent visualisation forward reverse strands. Setting (integer) values 0 1 work, may biologically misleading recommended.Highly recommended: considering using option, read reverse_locations_if_needed() documentation fully understand works. reverse_complement_mode character. Whether reverse-complemented sequences converted DNA (.e. complements T) RNA (.e. complements U). Must either \"DNA\" \"RNA\". affects reverse-complemented sequences. Sequences forward begin altered. Uses reverse_complement() via reverse_sequence_if_needed().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/merge_methylation_with_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge methylation with metadata — merge_methylation_with_metadata","text":"dataframe. merged dataframe containing columns input dataframes, well forward versions sequences, qualities, modification locations, modification probabilities (separate locations probabilities columns created modification type modification data).","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/merge_methylation_with_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge methylation with metadata — merge_methylation_with_metadata","text":"","code":"## Locate files modified_fastq_file <- system.file(\"extdata\",                                    \"example_many_sequences_raw_modified.fastq\",                                    package = \"ggDNAvis\") metadata_file <- system.file(\"extdata\",                              \"example_many_sequences_metadata.csv\",                              package = \"ggDNAvis\")  ## Read files methylation_data <- read_modified_fastq(modified_fastq_file) metadata <- read.csv(metadata_file)  ## Merge data (including reversing if needed) merge_methylation_with_metadata(methylation_data, metadata, reversed_location_offset = 0) #>     read   family individual direction #> 1  F1-1a Family 1       F1-1   forward #> 2  F1-1b Family 1       F1-1   forward #> 3  F1-1c Family 1       F1-1   reverse #> 4  F1-1d Family 1       F1-1   forward #> 5  F1-1e Family 1       F1-1   reverse #> 6  F1-2a Family 1       F1-2   reverse #> 7  F1-2b Family 1       F1-2   forward #> 8  F1-3a Family 1       F1-3   forward #> 9  F1-3b Family 1       F1-3   forward #> 10 F1-3c Family 1       F1-3   reverse #> 11 F2-1a Family 2       F2-1   forward #> 12 F2-2a Family 2       F2-2   reverse #> 13 F2-2b Family 2       F2-2   forward #> 14 F2-2c Family 2       F2-2   reverse #> 15 F3-1a Family 3       F3-1   reverse #> 16 F3-1b Family 3       F3-1   reverse #> 17 F3-2a Family 3       F3-2   forward #> 18 F3-2b Family 3       F3-2   forward #> 19 F3-2c Family 3       F3-2   reverse #> 20 F3-3a Family 3       F3-3   forward #> 21 F3-4a Family 3       F3-4   reverse #> 22 F3-4b Family 3       F3-4   forward #> 23 F3-4c Family 3       F3-4   forward #>                                                                                                  sequence #> 1  GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 2                                         GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 3                 TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 4                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 5           TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCC #> 6                                         TCCGCCGCCTCCTCCTCCGCCGCCTCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 7                                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA #> 8                 GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 9                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA #> 10                   TCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 11          GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 12                   TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 13                GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 14             TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 15       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCC #> 16       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCC #> 17          GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 18             GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA #> 19                TCCGCCGCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 20       GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 21       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 22                      GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA #> 23             GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA #>    sequence_length #> 1              102 #> 2               63 #> 3               87 #> 4               81 #> 5               93 #> 6               63 #> 7               69 #> 8               87 #> 9               81 #> 10              84 #> 11              93 #> 12              84 #> 13              87 #> 14              90 #> 15              96 #> 16              96 #> 17              93 #> 18              90 #> 19              87 #> 20              96 #> 21              96 #> 22              81 #> 23              90 #>                                                                                                   quality #> 1  )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90 #> 2                                         60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139 #> 3                 @9889C8<<*96;52!*86,227.<I.8AI<>;2/391%D19*5@G=8<7<:!7+;:I:-!03<0AI>9?4!57I*-C#25FD24F; #> 4                       :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0 #> 5           6<749)6;/@02!.2'40*D79,15),5::=:@-!E7&8?A=D/!#2:.26-57&/I58(C035H>H4,H:%3-;!00!-A6@?84-3E2*4; #> 6                                         <-!I79$A.)@@0:5/8>C2,(\"*(<7-6G4)&.=1CC9I818C(,74:5(<EE/.-\")<(6E #> 7                                   F='I#*5I:<F?)<4G3&:95*-5?1,!:9BD4B5.-27577<2E9)2:189B.5/*#7;;'**.7;-! #> 8                 ?;.*26<C-8B,3#8/,-9!1++:94:/!A317=9>502=-+8;$=53@D*?/6:6&0D7-.@8,5;F,1?0D?$9'&665B8.604 #> 9                       *46.5//3:37?24:(:0*#.))E)?:,/172=2!4\">.*/;\"8+5<;D6.I2=>:C3)108,<)GC161)!55E!.>86/ #> 10                   1;3*=4G5'+()0A659+2;3/!;34:%0E432(38@3+I?924C4E-4;*4&*9-6A64>66G5',I2<962C121B@A/637 #> 11          =<\/-I354/,*>+<CA40*537/;<@I7/4%6192'5'>#4:&C,072+90:0+4;74\"D5,38&<7A?00+1>G>#=?;,@<<1=64D=!1& #> 12                   7;86<>H.)-1H+7I6.+39!4>5=!F483+;5=-7.4!*821*6$I'DI):=+0?3-(<7;.791062#H2.1<*7145:>1; #> 13                7?38,EC#3::=1)8&;<\">3.9BE)1661!2)5-4.11B<3)?')-+,B4.<7)/:IE=5$.3:66G9216-C20,>(0848(1$- #> 14             2>%AC6.?G=59+1=+EC?264?'B6$1@<7D99->$18+*;1!@?8>9645+23B/<=*.6/6543BI494E84)1=9;/8=6+/,68@ #> 15       7);7-=464F1;7;(83B84.@79.>,!>?>16;,6:=/@B;C:;63+/+;69;?@&>I'01!-3H%.,6;=-3=!A5'.-)9@?8*?346C<2*/ #> 16       :C8E6789(=9%1.66A463B5/B8;A51=?=<,8/461!058!6354!<609I9@:7.E.38)7;@@6/C?D&,*%D,I6>6:4%9(1/7>$<C/ #> 17          :0I4099<,4E01;/@96%2I2<,%<C&=81F+4<*@4A5.('4!%I3CE657<=!5;37>4D:%3;7'\"4<.9;?;7%0>:,84B512,B7/ #> 18             9>124!752+@06I/.72097*';-+A60=B?+/8'15477>4-435D;G@G'./21:(0/1/A=7'I>A\"3=9;;12,@\"2=3D=,458 #> 19                <<95G42/@E!1)A68,'%=60C4)3,;9C/;A8<6!-(?83,,194*49G1-,:64E-?/!/,*07AA!G?-9=!(/-+6/@>2/0 #> 20       $<,5\"7+!$';8<0794*@FI>34224!57+#1!F<+53$,?)-.A3;=1*71C02<.5:1)82!86$03/;%+1C3+D3;@9B-E#+/70;9<D' #> 21       53?I.;)/.91%3:6)0041C)I;2<\"3:8?*954::080?3<?>=7A;/#5D?;I2@075;:C.-4HI3GE+-?.,I>)I!>4(5(:1\"2-#-2? #> 22                      .85$#;!1F$8E:B+;7CI6@11/'65<3,4G:8@GF1413:0)3CH1=44.%G=#2E67=?;9DF7358.;(I!74:1I4 #> 23             5@<733';9+3BB)=69,3!.2B*86'8E>@3?!(36:<002/4>:1.43A!+;<.3G*G8?0*991,B(C/\"I9*1-86)8.;;5-0+= #>    modification_types #> 1           C+h?,C+m? #> 2           C+h?,C+m? #> 3           C+h?,C+m? #> 4           C+h?,C+m? #> 5           C+h?,C+m? #> 6           C+h?,C+m? #> 7           C+h?,C+m? #> 8           C+h?,C+m? #> 9           C+h?,C+m? #> 10          C+h?,C+m? #> 11          C+h?,C+m? #> 12          C+h?,C+m? #> 13          C+h?,C+m? #> 14          C+h?,C+m? #> 15          C+h?,C+m? #> 16          C+h?,C+m? #> 17          C+h?,C+m? #> 18          C+h?,C+m? #> 19          C+h?,C+m? #> 20          C+h?,C+m? #> 21          C+h?,C+m? #> 22          C+h?,C+m? #> 23          C+h?,C+m? #>                                                                      C+h?_locations #> 1                 3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99 #> 2                                      3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60 #> 3                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,69,72,75,78,81,84 #> 4                          3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78 #> 5                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,75,78,81,84,87,90 #> 6                                           3,6,18,21,33,36,39,42,45,48,51,54,57,60 #> 7                                      3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66 #> 8                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 9                    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78 #> 10                           3,6,15,18,27,30,33,42,45,48,57,60,63,66,69,72,75,78,81 #> 11 3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90 #> 12         3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81 #> 13       3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84 #> 14   3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87 #> 15                                 3,6,15,18,27,30,39,42,51,54,63,66,75,78,87,90,93 #> 16                           3,6,15,18,27,30,39,42,51,54,63,66,75,78,81,84,87,90,93 #> 17                               3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90 #> 18                                  3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87 #> 19                         3,6,9,12,21,24,33,36,45,48,57,60,63,66,69,72,75,78,81,84 #> 20                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 21                     3,6,15,18,27,30,39,42,51,54,63,66,69,72,75,78,81,84,87,90,93 #> 22                         3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78 #> 23                            3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87 #>                                                                     C+h?_probabilities #> 1                  26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34 #> 2                                       10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2 #> 3                          37,47,64,63,33,64,52,55,17,46,47,64,56,64,56,60,55,58,63,40 #> 4                            33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55 #> 5                           54,7,53,64,24,29,30,23,35,23,34,55,61,23,40,63,31,64,18,57 #> 6                                              12,23,52,9,63,29,33,56,30,41,52,63,9,49 #> 7                                       27,44,20,13,51,28,41,48,19,1,14,64,52,48,64,64 #> 8                            55,10,59,28,62,20,64,21,62,59,29,64,4,56,64,59,60,49,63,5 #> 9                     62,63,45,19,32,46,3,61,0,159,42,80,46,84,86,52,8,92,102,4,138,20 #> 10                        20,111,79,1,238,1,142,35,80,40,21,126,47,112,21,71,103,43,80 #> 11 68,1,220,4,42,36,35,57,3,90,56,79,92,19,93,36,130,47,82,1,109,104,58,11,83,10,86,49 #> 12      49,82,145,1,40,133,14,114,89,5,129,88,26,66,42,136,25,17,74,44,6,104,125,18,93 #> 13        17,3,130,28,84,5,50,95,55,112,49,67,7,106,67,0,72,21,209,3,112,60,28,6,188,4 #> 14  38,24,184,5,98,72,32,22,83,39,135,53,51,9,54,55,45,102,95,23,3,198,19,121,22,123,3 #> 15                               103,74,17,32,114,0,93,133,6,77,116,2,51,112,11,157,59 #> 16                           22,63,13,16,88,54,55,26,86,133,7,170,15,68,29,41,30,89,61 #> 17                              11,195,26,74,62,93,1,139,5,178,33,3,158,65,76,3,13,225 #> 18                                   9,13,165,10,0,10,104,65,78,43,124,87,0,95,19,2,73 #> 19                       17,24,0,47,75,133,76,9,112,90,19,75,156,35,30,136,5,16,30,191 #> 20                           24,3,3,78,63,47,66,155,13,19,109,141,87,2,55,43,24,83,161 #> 21                 225,21,6,207,111,10,11,116,113,24,108,32,33,162,6,20,35,14,73,44,36 #> 22                          29,9,79,29,15,95,14,82,81,43,11,25,98,35,18,53,112,2,57,31 #> 23                            52,87,155,117,2,0,3,50,81,184,75,74,60,97,15,8,46,188,81 #>                                                                      C+m?_locations #> 1                 3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99 #> 2                                      3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60 #> 3                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,69,72,75,78,81,84 #> 4                          3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78 #> 5                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,75,78,81,84,87,90 #> 6                                           3,6,18,21,33,36,39,42,45,48,51,54,57,60 #> 7                                      3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66 #> 8                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 9                    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78 #> 10                           3,6,15,18,27,30,33,42,45,48,57,60,63,66,69,72,75,78,81 #> 11 3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90 #> 12         3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81 #> 13       3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84 #> 14   3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87 #> 15                                 3,6,15,18,27,30,39,42,51,54,63,66,75,78,87,90,93 #> 16                           3,6,15,18,27,30,39,42,51,54,63,66,75,78,81,84,87,90,93 #> 17                               3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90 #> 18                                  3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87 #> 19                         3,6,9,12,21,24,33,36,45,48,57,60,63,66,69,72,75,78,81,84 #> 20                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 21                     3,6,15,18,27,30,39,42,51,54,63,66,69,72,75,78,81,84,87,90,93 #> 22                         3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78 #> 23                            3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87 #>                                                                                           C+m?_probabilities #> 1                             29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41 #> 2                                                    10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253 #> 3                                   45,192,126,129,39,129,183,79,19,195,62,124,173,128,84,159,80,165,141,206 #> 4                                          216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82 #> 5                                         79,7,77,130,27,34,34,230,42,229,41,79,99,229,50,139,36,120,236,170 #> 6                                                              242,26,182,10,111,33,40,83,34,52,71,144,9,189 #> 7                                                  31,56,233,241,71,31,203,190,234,254,240,124,72,64,128,127 #> 8                                81,245,162,32,108,233,119,232,152,161,222,128,251,83,123,91,160,189,144,250 #> 9                            147,112,58,21,217,60,252,153,255,96,142,110,147,110,57,22,163,110,19,205,83,193 #> 10                                       189,79,161,215,6,244,19,153,88,122,77,30,143,108,194,88,109,181,149 #> 11 163,253,33,225,207,210,213,187,251,163,168,135,81,196,134,187,78,103,52,251,144,71,47,193,145,238,163,179 #> 12                  55,62,108,252,125,78,191,54,145,206,27,145,203,126,130,86,205,127,34,85,66,8,108,217,122 #> 13                 176,250,122,197,146,246,203,136,152,67,71,17,144,67,1,150,133,215,8,153,68,31,26,191,4,13 #> 14         193,155,62,243,105,167,209,178,73,116,72,188,200,234,109,94,88,68,139,209,129,7,204,96,194,91,191 #> 15                                           104,174,233,196,140,253,49,115,242,113,137,250,90,79,162,29,177 #> 16                                        225,187,235,168,48,109,94,87,39,101,220,51,213,89,104,49,50,37,104 #> 17                                              243,50,121,98,95,7,237,105,244,69,132,249,94,79,9,170,235,11 #> 18                                            51,190,33,181,255,241,151,186,124,196,1,142,117,84,213,249,168 #> 19                                      175,29,55,27,1,53,75,168,107,26,194,101,78,124,224,68,249,185,209,60 #> 20                                     49,251,241,176,189,187,166,43,235,144,137,5,93,175,106,193,198,146,48 #> 21                              14,51,238,27,88,231,169,105,34,198,131,106,221,55,247,206,198,106,159,24,193 #> 22                               109,86,70,169,200,112,237,69,168,97,239,188,150,208,225,190,128,252,142,224 #> 23                                       161,156,9,65,198,255,245,191,174,63,155,146,13,95,228,100,132,45,49 #>                                                                                          forward_sequence #> 1  GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 2                                         GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 3                 GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 4                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 5           GGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 6                                         GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA #> 7                                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA #> 8                 GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 9                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA #> 10                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGA #> 11          GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 12                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 13                GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 14             GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 15       GGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 16       GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 17          GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 18             GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA #> 19                GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGCGGA #> 20       GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 21       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 22                      GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA #> 23             GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA #>                                                                                           forward_quality #> 1  )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90 #> 2                                         60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139 #> 3                 ;F42DF52#C-*I75!4?9>IA0<30!-:I:;+7!:<7<8=G@5*91D%193/2;><IA8.I<.722,68*!25;69*<<8C9889@ #> 4                       :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0 #> 5           ;4*2E3-48?@6A-!00!;-3%:H,4H>H530C(85I/&75-62.:2#!/D=A?8&7E!-@:=::5,)51,97D*04'2.!20@/;6)947<6 #> 6                                         E6(<)\"-./EE<(5:47,(C818I9CC1=.&)4G6-7<(*\"(,2C>8/5:0@@).A$97I!-< #> 7                                   F='I#*5I:<F?)<4G3&:95*-5?1,!:9BD4B5.-27577<2E9)2:189B.5/*#7;;'**.7;-! #> 8                 ?;.*26<C-8B,3#8/,-9!1++:94:/!A317=9>502=-+8;$=53@D*?/6:6&0D7-.@8,5;F,1?0D?$9'&665B8.604 #> 9                       *46.5//3:37?24:(:0*#.))E)?:,/172=2!4\">.*/;\"8+5<;D6.I2=>:C3)108,<)GC161)!55E!.>86/ #> 10                   736/A@B121C269<2I,'5G66>46A6-9*&4*;4-E4C429?I+3@83(234E0%:43;!/3;2+956A0)(+'5G4=*3;1 #> 11          =<\/-I354/,*>+<CA40*537/;<@I7/4%6192'5'>#4:&C,072+90:0+4;74\"D5,38&<7A?00+1>G>#=?;,@<<1=64D=!1& #> 12                   ;1>:5417*<1.2H#260197.;7<(-3?0+=:)ID'I$6*128*!4.7-=5;+384F!=5>4!93+.6I7+H1-).H><68;7 #> 13                7?38,EC#3::=1)8&;<\">3.9BE)1661!2)5-4.11B<3)?')-+,B4.<7)/:IE=5$.3:66G9216-C20,>(0848(1$- #> 14             @86,/+6=8/;9=1)48E494IB3456/6.*=<\/B32+5469>8?@!1;*+81$>-99D7<@1$6B'?462?CE+=1+95=G?.6CA%>2 #> 15       /*2<C643?*8?@9)-.'5A!=3-=;6,.%H3-!10'I>&@?;96;+/+36;:C;B@/=:6,;61>?>!,>.97@.48B38(;7;1F464=-7;)7 #> 16       /C<$>7/1(9%4:6>6I,D%*,&D?C/6@@;7)83.E.7:@9I906<!4536!850!164/8,<=?=15A;8B/5B364A66.1%9=(9876E8C: #> 17          :0I4099<,4E01;/@96%2I2<,%<C&=81F+4<*@4A5.('4!%I3CE657<=!5;37>4D:%3;7'\"4<.9;?;7%0>:,84B512,B7/ #> 18             9>124!752+@06I/.72097*';-+A60=B?+/8'15477>4-435D;G@G'./21:(0/1/A=7'I>A\"3=9;;12,@\"2=3D=,458 #> 19                0/2>@/6+-/(!=9-?G!AA70*,/!/?-E46:,-1G94*491,,38?(-!6<8A;/C9;,3)4C06=%',86A)1!E@/24G59<< #> 20       $<,5\"7+!$';8<0794*@FI>34224!57+#1!F<+53$,?)-.A3;=1*71C02<.5:1)82!86$03/;%+1C3+D3;@9B-E#+/70;9<D' #> 21       ?2-#-2\"1:(5(4>!I)>I,.?-+EG3IH4-.C:;570@2I;?D5#/;A7=>?<3?080::459*?8:3\"<2;I)C1400)6:3%19./);.I?35 #> 22                      .85$#;!1F$8E:B+;7CI6@11/'65<3,4G:8@GF1413:0)3CH1=44.%G=#2E67=?;9DF7358.;(I!74:1I4 #> 23             5@<733';9+3BB)=69,3!.2B*86'8E>@3?!(36:<002/4>:1.43A!+;<.3G*G8?0*991,B(C/\"I9*1-86)8.;;5-0+= #>                                                              forward_C+h?_locations #> 1                 3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99 #> 2                                      3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60 #> 3                         4,7,10,13,16,19,22,25,28,37,40,43,52,55,58,67,70,73,82,85 #> 4                          3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78 #> 5                         4,7,10,13,16,19,28,31,34,43,46,49,58,61,64,73,76,79,88,91 #> 6                                           4,7,10,13,16,19,22,25,28,31,43,46,58,61 #> 7                                      3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66 #> 8                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 9                    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78 #> 10                           4,7,10,13,16,19,22,25,28,37,40,43,52,55,58,67,70,79,82 #> 11 3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90 #> 12         4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,79,82 #> 13       3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84 #> 14   4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73,76,85,88 #> 15                                 4,7,10,19,22,31,34,43,46,55,58,67,70,79,82,91,94 #> 16                           4,7,10,13,16,19,22,31,34,43,46,55,58,67,70,79,82,91,94 #> 17                               3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90 #> 18                                  3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87 #> 19                        4,7,10,13,16,19,22,25,28,31,40,43,52,55,64,67,76,79,82,85 #> 20                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 21                     4,7,10,13,16,19,22,25,28,31,34,43,46,55,58,67,70,79,82,91,94 #> 22                         3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78 #> 23                            3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87 #>                                                             forward_C+h?_probabilities #> 1                  26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34 #> 2                                       10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2 #> 3                          40,63,58,55,60,56,64,56,64,47,46,17,55,52,64,33,63,64,47,37 #> 4                            33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55 #> 5                           57,18,64,31,63,40,23,61,55,34,23,35,23,30,29,24,64,53,7,54 #> 6                                              49,9,63,52,41,30,56,33,29,63,9,52,23,12 #> 7                                       27,44,20,13,51,28,41,48,19,1,14,64,52,48,64,64 #> 8                            55,10,59,28,62,20,64,21,62,59,29,64,4,56,64,59,60,49,63,5 #> 9                     62,63,45,19,32,46,3,61,0,159,42,80,46,84,86,52,8,92,102,4,138,20 #> 10                        80,43,103,71,21,112,47,126,21,40,80,35,142,1,238,1,79,111,20 #> 11 68,1,220,4,42,36,35,57,3,90,56,79,92,19,93,36,130,47,82,1,109,104,58,11,83,10,86,49 #> 12      93,18,125,104,6,44,74,17,25,136,42,66,26,88,129,5,89,114,14,133,40,1,145,82,49 #> 13        17,3,130,28,84,5,50,95,55,112,49,67,7,106,67,0,72,21,209,3,112,60,28,6,188,4 #> 14  3,123,22,121,19,198,3,23,95,102,45,55,54,9,51,53,135,39,83,22,32,72,98,5,184,24,38 #> 15                               59,157,11,112,51,2,116,77,6,133,93,0,114,32,17,74,103 #> 16                           61,89,30,41,29,68,15,170,7,133,86,26,55,54,88,16,13,63,22 #> 17                              11,195,26,74,62,93,1,139,5,178,33,3,158,65,76,3,13,225 #> 18                                   9,13,165,10,0,10,104,65,78,43,124,87,0,95,19,2,73 #> 19                       191,30,16,5,136,30,35,156,75,19,90,112,9,76,133,75,47,0,24,17 #> 20                           24,3,3,78,63,47,66,155,13,19,109,141,87,2,55,43,24,83,161 #> 21                 36,44,73,14,35,20,6,162,33,32,108,24,113,116,11,10,111,207,6,21,225 #> 22                          29,9,79,29,15,95,14,82,81,43,11,25,98,35,18,53,112,2,57,31 #> 23                            52,87,155,117,2,0,3,50,81,184,75,74,60,97,15,8,46,188,81 #>                                                              forward_C+m?_locations #> 1                 3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99 #> 2                                      3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60 #> 3                         4,7,10,13,16,19,22,25,28,37,40,43,52,55,58,67,70,73,82,85 #> 4                          3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78 #> 5                         4,7,10,13,16,19,28,31,34,43,46,49,58,61,64,73,76,79,88,91 #> 6                                           4,7,10,13,16,19,22,25,28,31,43,46,58,61 #> 7                                      3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66 #> 8                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 9                    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78 #> 10                           4,7,10,13,16,19,22,25,28,37,40,43,52,55,58,67,70,79,82 #> 11 3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90 #> 12         4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,79,82 #> 13       3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84 #> 14   4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73,76,85,88 #> 15                                 4,7,10,19,22,31,34,43,46,55,58,67,70,79,82,91,94 #> 16                           4,7,10,13,16,19,22,31,34,43,46,55,58,67,70,79,82,91,94 #> 17                               3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90 #> 18                                  3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87 #> 19                        4,7,10,13,16,19,22,25,28,31,40,43,52,55,64,67,76,79,82,85 #> 20                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 21                     4,7,10,13,16,19,22,25,28,31,34,43,46,55,58,67,70,79,82,91,94 #> 22                         3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78 #> 23                            3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87 #>                                                                                   forward_C+m?_probabilities #> 1                             29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41 #> 2                                                    10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253 #> 3                                   206,141,165,80,159,84,128,173,124,62,195,19,79,183,129,39,129,126,192,45 #> 4                                          216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82 #> 5                                         170,236,120,36,139,50,229,99,79,41,229,42,230,34,34,27,130,77,7,79 #> 6                                                              189,9,144,71,52,34,83,40,33,111,10,182,26,242 #> 7                                                  31,56,233,241,71,31,203,190,234,254,240,124,72,64,128,127 #> 8                                81,245,162,32,108,233,119,232,152,161,222,128,251,83,123,91,160,189,144,250 #> 9                            147,112,58,21,217,60,252,153,255,96,142,110,147,110,57,22,163,110,19,205,83,193 #> 10                                       149,181,109,88,194,108,143,30,77,122,88,153,19,244,6,215,161,79,189 #> 11 163,253,33,225,207,210,213,187,251,163,168,135,81,196,134,187,78,103,52,251,144,71,47,193,145,238,163,179 #> 12                  122,217,108,8,66,85,34,127,205,86,130,126,203,145,27,206,145,54,191,78,125,252,108,62,55 #> 13                 176,250,122,197,146,246,203,136,152,67,71,17,144,67,1,150,133,215,8,153,68,31,26,191,4,13 #> 14         191,91,194,96,204,7,129,209,139,68,88,94,109,234,200,188,72,116,73,178,209,167,105,243,62,155,193 #> 15                                           177,29,162,79,90,250,137,113,242,115,49,253,140,196,233,174,104 #> 16                                        104,37,50,49,104,89,213,51,220,101,39,87,94,109,48,168,235,187,225 #> 17                                              243,50,121,98,95,7,237,105,244,69,132,249,94,79,9,170,235,11 #> 18                                            51,190,33,181,255,241,151,186,124,196,1,142,117,84,213,249,168 #> 19                                      60,209,185,249,68,224,124,78,101,194,26,107,168,75,53,1,27,55,29,175 #> 20                                     49,251,241,176,189,187,166,43,235,144,137,5,93,175,106,193,198,146,48 #> 21                              193,24,159,106,198,206,247,55,221,106,131,198,34,105,169,231,88,27,238,51,14 #> 22                               109,86,70,169,200,112,237,69,168,97,239,188,150,208,225,190,128,252,142,224 #> 23                                       161,156,9,65,198,255,245,191,174,63,155,146,13,95,228,100,132,45,49  ## Merge data with offset = 1 merge_methylation_with_metadata(methylation_data, metadata, reversed_location_offset = 1) #>     read   family individual direction #> 1  F1-1a Family 1       F1-1   forward #> 2  F1-1b Family 1       F1-1   forward #> 3  F1-1c Family 1       F1-1   reverse #> 4  F1-1d Family 1       F1-1   forward #> 5  F1-1e Family 1       F1-1   reverse #> 6  F1-2a Family 1       F1-2   reverse #> 7  F1-2b Family 1       F1-2   forward #> 8  F1-3a Family 1       F1-3   forward #> 9  F1-3b Family 1       F1-3   forward #> 10 F1-3c Family 1       F1-3   reverse #> 11 F2-1a Family 2       F2-1   forward #> 12 F2-2a Family 2       F2-2   reverse #> 13 F2-2b Family 2       F2-2   forward #> 14 F2-2c Family 2       F2-2   reverse #> 15 F3-1a Family 3       F3-1   reverse #> 16 F3-1b Family 3       F3-1   reverse #> 17 F3-2a Family 3       F3-2   forward #> 18 F3-2b Family 3       F3-2   forward #> 19 F3-2c Family 3       F3-2   reverse #> 20 F3-3a Family 3       F3-3   forward #> 21 F3-4a Family 3       F3-4   reverse #> 22 F3-4b Family 3       F3-4   forward #> 23 F3-4c Family 3       F3-4   forward #>                                                                                                  sequence #> 1  GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 2                                         GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 3                 TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 4                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 5           TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCC #> 6                                         TCCGCCGCCTCCTCCTCCGCCGCCTCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 7                                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA #> 8                 GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 9                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA #> 10                   TCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 11          GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 12                   TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 13                GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 14             TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 15       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCC #> 16       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCC #> 17          GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 18             GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA #> 19                TCCGCCGCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 20       GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 21       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 22                      GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA #> 23             GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA #>    sequence_length #> 1              102 #> 2               63 #> 3               87 #> 4               81 #> 5               93 #> 6               63 #> 7               69 #> 8               87 #> 9               81 #> 10              84 #> 11              93 #> 12              84 #> 13              87 #> 14              90 #> 15              96 #> 16              96 #> 17              93 #> 18              90 #> 19              87 #> 20              96 #> 21              96 #> 22              81 #> 23              90 #>                                                                                                   quality #> 1  )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90 #> 2                                         60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139 #> 3                 @9889C8<<*96;52!*86,227.<I.8AI<>;2/391%D19*5@G=8<7<:!7+;:I:-!03<0AI>9?4!57I*-C#25FD24F; #> 4                       :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0 #> 5           6<749)6;/@02!.2'40*D79,15),5::=:@-!E7&8?A=D/!#2:.26-57&/I58(C035H>H4,H:%3-;!00!-A6@?84-3E2*4; #> 6                                         <-!I79$A.)@@0:5/8>C2,(\"*(<7-6G4)&.=1CC9I818C(,74:5(<EE/.-\")<(6E #> 7                                   F='I#*5I:<F?)<4G3&:95*-5?1,!:9BD4B5.-27577<2E9)2:189B.5/*#7;;'**.7;-! #> 8                 ?;.*26<C-8B,3#8/,-9!1++:94:/!A317=9>502=-+8;$=53@D*?/6:6&0D7-.@8,5;F,1?0D?$9'&665B8.604 #> 9                       *46.5//3:37?24:(:0*#.))E)?:,/172=2!4\">.*/;\"8+5<;D6.I2=>:C3)108,<)GC161)!55E!.>86/ #> 10                   1;3*=4G5'+()0A659+2;3/!;34:%0E432(38@3+I?924C4E-4;*4&*9-6A64>66G5',I2<962C121B@A/637 #> 11          =<\/-I354/,*>+<CA40*537/;<@I7/4%6192'5'>#4:&C,072+90:0+4;74\"D5,38&<7A?00+1>G>#=?;,@<<1=64D=!1& #> 12                   7;86<>H.)-1H+7I6.+39!4>5=!F483+;5=-7.4!*821*6$I'DI):=+0?3-(<7;.791062#H2.1<*7145:>1; #> 13                7?38,EC#3::=1)8&;<\">3.9BE)1661!2)5-4.11B<3)?')-+,B4.<7)/:IE=5$.3:66G9216-C20,>(0848(1$- #> 14             2>%AC6.?G=59+1=+EC?264?'B6$1@<7D99->$18+*;1!@?8>9645+23B/<=*.6/6543BI494E84)1=9;/8=6+/,68@ #> 15       7);7-=464F1;7;(83B84.@79.>,!>?>16;,6:=/@B;C:;63+/+;69;?@&>I'01!-3H%.,6;=-3=!A5'.-)9@?8*?346C<2*/ #> 16       :C8E6789(=9%1.66A463B5/B8;A51=?=<,8/461!058!6354!<609I9@:7.E.38)7;@@6/C?D&,*%D,I6>6:4%9(1/7>$<C/ #> 17          :0I4099<,4E01;/@96%2I2<,%<C&=81F+4<*@4A5.('4!%I3CE657<=!5;37>4D:%3;7'\"4<.9;?;7%0>:,84B512,B7/ #> 18             9>124!752+@06I/.72097*';-+A60=B?+/8'15477>4-435D;G@G'./21:(0/1/A=7'I>A\"3=9;;12,@\"2=3D=,458 #> 19                <<95G42/@E!1)A68,'%=60C4)3,;9C/;A8<6!-(?83,,194*49G1-,:64E-?/!/,*07AA!G?-9=!(/-+6/@>2/0 #> 20       $<,5\"7+!$';8<0794*@FI>34224!57+#1!F<+53$,?)-.A3;=1*71C02<.5:1)82!86$03/;%+1C3+D3;@9B-E#+/70;9<D' #> 21       53?I.;)/.91%3:6)0041C)I;2<\"3:8?*954::080?3<?>=7A;/#5D?;I2@075;:C.-4HI3GE+-?.,I>)I!>4(5(:1\"2-#-2? #> 22                      .85$#;!1F$8E:B+;7CI6@11/'65<3,4G:8@GF1413:0)3CH1=44.%G=#2E67=?;9DF7358.;(I!74:1I4 #> 23             5@<733';9+3BB)=69,3!.2B*86'8E>@3?!(36:<002/4>:1.43A!+;<.3G*G8?0*991,B(C/\"I9*1-86)8.;;5-0+= #>    modification_types #> 1           C+h?,C+m? #> 2           C+h?,C+m? #> 3           C+h?,C+m? #> 4           C+h?,C+m? #> 5           C+h?,C+m? #> 6           C+h?,C+m? #> 7           C+h?,C+m? #> 8           C+h?,C+m? #> 9           C+h?,C+m? #> 10          C+h?,C+m? #> 11          C+h?,C+m? #> 12          C+h?,C+m? #> 13          C+h?,C+m? #> 14          C+h?,C+m? #> 15          C+h?,C+m? #> 16          C+h?,C+m? #> 17          C+h?,C+m? #> 18          C+h?,C+m? #> 19          C+h?,C+m? #> 20          C+h?,C+m? #> 21          C+h?,C+m? #> 22          C+h?,C+m? #> 23          C+h?,C+m? #>                                                                      C+h?_locations #> 1                 3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99 #> 2                                      3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60 #> 3                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,69,72,75,78,81,84 #> 4                          3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78 #> 5                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,75,78,81,84,87,90 #> 6                                           3,6,18,21,33,36,39,42,45,48,51,54,57,60 #> 7                                      3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66 #> 8                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 9                    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78 #> 10                           3,6,15,18,27,30,33,42,45,48,57,60,63,66,69,72,75,78,81 #> 11 3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90 #> 12         3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81 #> 13       3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84 #> 14   3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87 #> 15                                 3,6,15,18,27,30,39,42,51,54,63,66,75,78,87,90,93 #> 16                           3,6,15,18,27,30,39,42,51,54,63,66,75,78,81,84,87,90,93 #> 17                               3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90 #> 18                                  3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87 #> 19                         3,6,9,12,21,24,33,36,45,48,57,60,63,66,69,72,75,78,81,84 #> 20                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 21                     3,6,15,18,27,30,39,42,51,54,63,66,69,72,75,78,81,84,87,90,93 #> 22                         3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78 #> 23                            3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87 #>                                                                     C+h?_probabilities #> 1                  26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34 #> 2                                       10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2 #> 3                          37,47,64,63,33,64,52,55,17,46,47,64,56,64,56,60,55,58,63,40 #> 4                            33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55 #> 5                           54,7,53,64,24,29,30,23,35,23,34,55,61,23,40,63,31,64,18,57 #> 6                                              12,23,52,9,63,29,33,56,30,41,52,63,9,49 #> 7                                       27,44,20,13,51,28,41,48,19,1,14,64,52,48,64,64 #> 8                            55,10,59,28,62,20,64,21,62,59,29,64,4,56,64,59,60,49,63,5 #> 9                     62,63,45,19,32,46,3,61,0,159,42,80,46,84,86,52,8,92,102,4,138,20 #> 10                        20,111,79,1,238,1,142,35,80,40,21,126,47,112,21,71,103,43,80 #> 11 68,1,220,4,42,36,35,57,3,90,56,79,92,19,93,36,130,47,82,1,109,104,58,11,83,10,86,49 #> 12      49,82,145,1,40,133,14,114,89,5,129,88,26,66,42,136,25,17,74,44,6,104,125,18,93 #> 13        17,3,130,28,84,5,50,95,55,112,49,67,7,106,67,0,72,21,209,3,112,60,28,6,188,4 #> 14  38,24,184,5,98,72,32,22,83,39,135,53,51,9,54,55,45,102,95,23,3,198,19,121,22,123,3 #> 15                               103,74,17,32,114,0,93,133,6,77,116,2,51,112,11,157,59 #> 16                           22,63,13,16,88,54,55,26,86,133,7,170,15,68,29,41,30,89,61 #> 17                              11,195,26,74,62,93,1,139,5,178,33,3,158,65,76,3,13,225 #> 18                                   9,13,165,10,0,10,104,65,78,43,124,87,0,95,19,2,73 #> 19                       17,24,0,47,75,133,76,9,112,90,19,75,156,35,30,136,5,16,30,191 #> 20                           24,3,3,78,63,47,66,155,13,19,109,141,87,2,55,43,24,83,161 #> 21                 225,21,6,207,111,10,11,116,113,24,108,32,33,162,6,20,35,14,73,44,36 #> 22                          29,9,79,29,15,95,14,82,81,43,11,25,98,35,18,53,112,2,57,31 #> 23                            52,87,155,117,2,0,3,50,81,184,75,74,60,97,15,8,46,188,81 #>                                                                      C+m?_locations #> 1                 3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99 #> 2                                      3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60 #> 3                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,69,72,75,78,81,84 #> 4                          3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78 #> 5                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,75,78,81,84,87,90 #> 6                                           3,6,18,21,33,36,39,42,45,48,51,54,57,60 #> 7                                      3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66 #> 8                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 9                    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78 #> 10                           3,6,15,18,27,30,33,42,45,48,57,60,63,66,69,72,75,78,81 #> 11 3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90 #> 12         3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81 #> 13       3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84 #> 14   3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87 #> 15                                 3,6,15,18,27,30,39,42,51,54,63,66,75,78,87,90,93 #> 16                           3,6,15,18,27,30,39,42,51,54,63,66,75,78,81,84,87,90,93 #> 17                               3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90 #> 18                                  3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87 #> 19                         3,6,9,12,21,24,33,36,45,48,57,60,63,66,69,72,75,78,81,84 #> 20                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 21                     3,6,15,18,27,30,39,42,51,54,63,66,69,72,75,78,81,84,87,90,93 #> 22                         3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78 #> 23                            3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87 #>                                                                                           C+m?_probabilities #> 1                             29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41 #> 2                                                    10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253 #> 3                                   45,192,126,129,39,129,183,79,19,195,62,124,173,128,84,159,80,165,141,206 #> 4                                          216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82 #> 5                                         79,7,77,130,27,34,34,230,42,229,41,79,99,229,50,139,36,120,236,170 #> 6                                                              242,26,182,10,111,33,40,83,34,52,71,144,9,189 #> 7                                                  31,56,233,241,71,31,203,190,234,254,240,124,72,64,128,127 #> 8                                81,245,162,32,108,233,119,232,152,161,222,128,251,83,123,91,160,189,144,250 #> 9                            147,112,58,21,217,60,252,153,255,96,142,110,147,110,57,22,163,110,19,205,83,193 #> 10                                       189,79,161,215,6,244,19,153,88,122,77,30,143,108,194,88,109,181,149 #> 11 163,253,33,225,207,210,213,187,251,163,168,135,81,196,134,187,78,103,52,251,144,71,47,193,145,238,163,179 #> 12                  55,62,108,252,125,78,191,54,145,206,27,145,203,126,130,86,205,127,34,85,66,8,108,217,122 #> 13                 176,250,122,197,146,246,203,136,152,67,71,17,144,67,1,150,133,215,8,153,68,31,26,191,4,13 #> 14         193,155,62,243,105,167,209,178,73,116,72,188,200,234,109,94,88,68,139,209,129,7,204,96,194,91,191 #> 15                                           104,174,233,196,140,253,49,115,242,113,137,250,90,79,162,29,177 #> 16                                        225,187,235,168,48,109,94,87,39,101,220,51,213,89,104,49,50,37,104 #> 17                                              243,50,121,98,95,7,237,105,244,69,132,249,94,79,9,170,235,11 #> 18                                            51,190,33,181,255,241,151,186,124,196,1,142,117,84,213,249,168 #> 19                                      175,29,55,27,1,53,75,168,107,26,194,101,78,124,224,68,249,185,209,60 #> 20                                     49,251,241,176,189,187,166,43,235,144,137,5,93,175,106,193,198,146,48 #> 21                              14,51,238,27,88,231,169,105,34,198,131,106,221,55,247,206,198,106,159,24,193 #> 22                               109,86,70,169,200,112,237,69,168,97,239,188,150,208,225,190,128,252,142,224 #> 23                                       161,156,9,65,198,255,245,191,174,63,155,146,13,95,228,100,132,45,49 #>                                                                                          forward_sequence #> 1  GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 2                                         GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 3                 GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 4                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 5           GGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 6                                         GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA #> 7                                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA #> 8                 GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 9                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA #> 10                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGA #> 11          GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 12                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 13                GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 14             GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 15       GGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 16       GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 17          GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 18             GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA #> 19                GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGCGGA #> 20       GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 21       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 22                      GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA #> 23             GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA #>                                                                                           forward_quality #> 1  )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90 #> 2                                         60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139 #> 3                 ;F42DF52#C-*I75!4?9>IA0<30!-:I:;+7!:<7<8=G@5*91D%193/2;><IA8.I<.722,68*!25;69*<<8C9889@ #> 4                       :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0 #> 5           ;4*2E3-48?@6A-!00!;-3%:H,4H>H530C(85I/&75-62.:2#!/D=A?8&7E!-@:=::5,)51,97D*04'2.!20@/;6)947<6 #> 6                                         E6(<)\"-./EE<(5:47,(C818I9CC1=.&)4G6-7<(*\"(,2C>8/5:0@@).A$97I!-< #> 7                                   F='I#*5I:<F?)<4G3&:95*-5?1,!:9BD4B5.-27577<2E9)2:189B.5/*#7;;'**.7;-! #> 8                 ?;.*26<C-8B,3#8/,-9!1++:94:/!A317=9>502=-+8;$=53@D*?/6:6&0D7-.@8,5;F,1?0D?$9'&665B8.604 #> 9                       *46.5//3:37?24:(:0*#.))E)?:,/172=2!4\">.*/;\"8+5<;D6.I2=>:C3)108,<)GC161)!55E!.>86/ #> 10                   736/A@B121C269<2I,'5G66>46A6-9*&4*;4-E4C429?I+3@83(234E0%:43;!/3;2+956A0)(+'5G4=*3;1 #> 11          =<\/-I354/,*>+<CA40*537/;<@I7/4%6192'5'>#4:&C,072+90:0+4;74\"D5,38&<7A?00+1>G>#=?;,@<<1=64D=!1& #> 12                   ;1>:5417*<1.2H#260197.;7<(-3?0+=:)ID'I$6*128*!4.7-=5;+384F!=5>4!93+.6I7+H1-).H><68;7 #> 13                7?38,EC#3::=1)8&;<\">3.9BE)1661!2)5-4.11B<3)?')-+,B4.<7)/:IE=5$.3:66G9216-C20,>(0848(1$- #> 14             @86,/+6=8/;9=1)48E494IB3456/6.*=<\/B32+5469>8?@!1;*+81$>-99D7<@1$6B'?462?CE+=1+95=G?.6CA%>2 #> 15       /*2<C643?*8?@9)-.'5A!=3-=;6,.%H3-!10'I>&@?;96;+/+36;:C;B@/=:6,;61>?>!,>.97@.48B38(;7;1F464=-7;)7 #> 16       /C<$>7/1(9%4:6>6I,D%*,&D?C/6@@;7)83.E.7:@9I906<!4536!850!164/8,<=?=15A;8B/5B364A66.1%9=(9876E8C: #> 17          :0I4099<,4E01;/@96%2I2<,%<C&=81F+4<*@4A5.('4!%I3CE657<=!5;37>4D:%3;7'\"4<.9;?;7%0>:,84B512,B7/ #> 18             9>124!752+@06I/.72097*';-+A60=B?+/8'15477>4-435D;G@G'./21:(0/1/A=7'I>A\"3=9;;12,@\"2=3D=,458 #> 19                0/2>@/6+-/(!=9-?G!AA70*,/!/?-E46:,-1G94*491,,38?(-!6<8A;/C9;,3)4C06=%',86A)1!E@/24G59<< #> 20       $<,5\"7+!$';8<0794*@FI>34224!57+#1!F<+53$,?)-.A3;=1*71C02<.5:1)82!86$03/;%+1C3+D3;@9B-E#+/70;9<D' #> 21       ?2-#-2\"1:(5(4>!I)>I,.?-+EG3IH4-.C:;570@2I;?D5#/;A7=>?<3?080::459*?8:3\"<2;I)C1400)6:3%19./);.I?35 #> 22                      .85$#;!1F$8E:B+;7CI6@11/'65<3,4G:8@GF1413:0)3CH1=44.%G=#2E67=?;9DF7358.;(I!74:1I4 #> 23             5@<733';9+3BB)=69,3!.2B*86'8E>@3?!(36:<002/4>:1.43A!+;<.3G*G8?0*991,B(C/\"I9*1-86)8.;;5-0+= #>                                                              forward_C+h?_locations #> 1                 3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99 #> 2                                      3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60 #> 3                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 4                          3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78 #> 5                          3,6,9,12,15,18,27,30,33,42,45,48,57,60,63,72,75,78,87,90 #> 6                                            3,6,9,12,15,18,21,24,27,30,42,45,57,60 #> 7                                      3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66 #> 8                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 9                    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78 #> 10                            3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,78,81 #> 11 3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90 #> 12          3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,78,81 #> 13       3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84 #> 14    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,84,87 #> 15                                  3,6,9,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 16                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 17                               3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90 #> 18                                  3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87 #> 19                         3,6,9,12,15,18,21,24,27,30,39,42,51,54,63,66,75,78,81,84 #> 20                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 21                      3,6,9,12,15,18,21,24,27,30,33,42,45,54,57,66,69,78,81,90,93 #> 22                         3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78 #> 23                            3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87 #>                                                             forward_C+h?_probabilities #> 1                  26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34 #> 2                                       10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2 #> 3                          40,63,58,55,60,56,64,56,64,47,46,17,55,52,64,33,63,64,47,37 #> 4                            33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55 #> 5                           57,18,64,31,63,40,23,61,55,34,23,35,23,30,29,24,64,53,7,54 #> 6                                              49,9,63,52,41,30,56,33,29,63,9,52,23,12 #> 7                                       27,44,20,13,51,28,41,48,19,1,14,64,52,48,64,64 #> 8                            55,10,59,28,62,20,64,21,62,59,29,64,4,56,64,59,60,49,63,5 #> 9                     62,63,45,19,32,46,3,61,0,159,42,80,46,84,86,52,8,92,102,4,138,20 #> 10                        80,43,103,71,21,112,47,126,21,40,80,35,142,1,238,1,79,111,20 #> 11 68,1,220,4,42,36,35,57,3,90,56,79,92,19,93,36,130,47,82,1,109,104,58,11,83,10,86,49 #> 12      93,18,125,104,6,44,74,17,25,136,42,66,26,88,129,5,89,114,14,133,40,1,145,82,49 #> 13        17,3,130,28,84,5,50,95,55,112,49,67,7,106,67,0,72,21,209,3,112,60,28,6,188,4 #> 14  3,123,22,121,19,198,3,23,95,102,45,55,54,9,51,53,135,39,83,22,32,72,98,5,184,24,38 #> 15                               59,157,11,112,51,2,116,77,6,133,93,0,114,32,17,74,103 #> 16                           61,89,30,41,29,68,15,170,7,133,86,26,55,54,88,16,13,63,22 #> 17                              11,195,26,74,62,93,1,139,5,178,33,3,158,65,76,3,13,225 #> 18                                   9,13,165,10,0,10,104,65,78,43,124,87,0,95,19,2,73 #> 19                       191,30,16,5,136,30,35,156,75,19,90,112,9,76,133,75,47,0,24,17 #> 20                           24,3,3,78,63,47,66,155,13,19,109,141,87,2,55,43,24,83,161 #> 21                 36,44,73,14,35,20,6,162,33,32,108,24,113,116,11,10,111,207,6,21,225 #> 22                          29,9,79,29,15,95,14,82,81,43,11,25,98,35,18,53,112,2,57,31 #> 23                            52,87,155,117,2,0,3,50,81,184,75,74,60,97,15,8,46,188,81 #>                                                              forward_C+m?_locations #> 1                 3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99 #> 2                                      3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60 #> 3                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 4                          3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78 #> 5                          3,6,9,12,15,18,27,30,33,42,45,48,57,60,63,72,75,78,87,90 #> 6                                            3,6,9,12,15,18,21,24,27,30,42,45,57,60 #> 7                                      3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66 #> 8                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 9                    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78 #> 10                            3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,78,81 #> 11 3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90 #> 12          3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,78,81 #> 13       3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84 #> 14    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,84,87 #> 15                                  3,6,9,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 16                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 17                               3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90 #> 18                                  3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87 #> 19                         3,6,9,12,15,18,21,24,27,30,39,42,51,54,63,66,75,78,81,84 #> 20                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 21                      3,6,9,12,15,18,21,24,27,30,33,42,45,54,57,66,69,78,81,90,93 #> 22                         3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78 #> 23                            3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87 #>                                                                                   forward_C+m?_probabilities #> 1                             29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41 #> 2                                                    10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253 #> 3                                   206,141,165,80,159,84,128,173,124,62,195,19,79,183,129,39,129,126,192,45 #> 4                                          216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82 #> 5                                         170,236,120,36,139,50,229,99,79,41,229,42,230,34,34,27,130,77,7,79 #> 6                                                              189,9,144,71,52,34,83,40,33,111,10,182,26,242 #> 7                                                  31,56,233,241,71,31,203,190,234,254,240,124,72,64,128,127 #> 8                                81,245,162,32,108,233,119,232,152,161,222,128,251,83,123,91,160,189,144,250 #> 9                            147,112,58,21,217,60,252,153,255,96,142,110,147,110,57,22,163,110,19,205,83,193 #> 10                                       149,181,109,88,194,108,143,30,77,122,88,153,19,244,6,215,161,79,189 #> 11 163,253,33,225,207,210,213,187,251,163,168,135,81,196,134,187,78,103,52,251,144,71,47,193,145,238,163,179 #> 12                  122,217,108,8,66,85,34,127,205,86,130,126,203,145,27,206,145,54,191,78,125,252,108,62,55 #> 13                 176,250,122,197,146,246,203,136,152,67,71,17,144,67,1,150,133,215,8,153,68,31,26,191,4,13 #> 14         191,91,194,96,204,7,129,209,139,68,88,94,109,234,200,188,72,116,73,178,209,167,105,243,62,155,193 #> 15                                           177,29,162,79,90,250,137,113,242,115,49,253,140,196,233,174,104 #> 16                                        104,37,50,49,104,89,213,51,220,101,39,87,94,109,48,168,235,187,225 #> 17                                              243,50,121,98,95,7,237,105,244,69,132,249,94,79,9,170,235,11 #> 18                                            51,190,33,181,255,241,151,186,124,196,1,142,117,84,213,249,168 #> 19                                      60,209,185,249,68,224,124,78,101,194,26,107,168,75,53,1,27,55,29,175 #> 20                                     49,251,241,176,189,187,166,43,235,144,137,5,93,175,106,193,198,146,48 #> 21                              193,24,159,106,198,206,247,55,221,106,131,198,34,105,169,231,88,27,238,51,14 #> 22                               109,86,70,169,200,112,237,69,168,97,239,188,150,208,225,190,128,252,142,224 #> 23                                       161,156,9,65,198,255,245,191,174,63,155,146,13,95,228,100,132,45,49"},{"path":"https://ejade42.github.io/ggDNAvis/reference/read_fastq.html","id":null,"dir":"Reference","previous_headings":"","what":"Read sequence and quality information from FASTQ — read_fastq","title":"Read sequence and quality information from FASTQ — read_fastq","text":"function simply reads FASTQ file dataframe containing columns read ID, sequence, quality scores. Optionally also contains column sequence lengths. See fastq_quality_scores explanation quality. Resulting dataframe can written back FASTQ via write_fastq(). read/write modified FASTQ containing modification information (SAM/BAM MM ML tags) header lines, use read_modified_fastq() write_modified_fastq().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/read_fastq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read sequence and quality information from FASTQ — read_fastq","text":"","code":"read_fastq(filename = file.choose(), calculate_length = TRUE)"},{"path":"https://ejade42.github.io/ggDNAvis/reference/read_fastq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read sequence and quality information from FASTQ — read_fastq","text":"filename character. file read. Defaults file.choose() select file interactively. calculate_length logical. Whether sequence_length column calculated included.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/read_fastq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read sequence and quality information from FASTQ — read_fastq","text":"dataframe. dataframe read, sequence, quality, optionally sequence_length columns.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/read_fastq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read sequence and quality information from FASTQ — read_fastq","text":"","code":"## Locate file fastq_file <- system.file(\"extdata\",                           \"example_many_sequences_raw.fastq\",                           package = \"ggDNAvis\")  ## View file for (i in 1:16) {     cat(readLines(fastq_file)[i], \"\\n\") } #> F1-1a  #> GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  #> +  #> )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90  #> F1-1b  #> GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  #> +  #> 60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139  #> F1-1c  #> TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC  #> +  #> @9889C8<<*96;52!*86,227.<I.8AI<>;2/391%D19*5@G=8<7<:!7+;:I:-!03<0AI>9?4!57I*-C#25FD24F;  #> F1-1d  #> GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  #> +  #> :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0   ## Read file to dataframe read_fastq(fastq_file, calculate_length = FALSE) #>     read #> 1  F1-1a #> 2  F1-1b #> 3  F1-1c #> 4  F1-1d #> 5  F1-1e #> 6  F1-2a #> 7  F1-2b #> 8  F1-3a #> 9  F1-3b #> 10 F1-3c #> 11 F2-1a #> 12 F2-2a #> 13 F2-2b #> 14 F2-2c #> 15 F3-1a #> 16 F3-1b #> 17 F3-2a #> 18 F3-2b #> 19 F3-2c #> 20 F3-3a #> 21 F3-4a #> 22 F3-4b #> 23 F3-4c #>                                                                                                  sequence #> 1  GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 2                                         GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 3                 TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 4                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 5           TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCC #> 6                                         TCCGCCGCCTCCTCCTCCGCCGCCTCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 7                                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA #> 8                 GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 9                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA #> 10                   TCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 11          GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 12                   TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 13                GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 14             TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 15       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCC #> 16       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCC #> 17          GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 18             GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA #> 19                TCCGCCGCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 20       GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 21       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 22                      GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA #> 23             GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA #>                                                                                                   quality #> 1  )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90 #> 2                                         60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139 #> 3                 @9889C8<<*96;52!*86,227.<I.8AI<>;2/391%D19*5@G=8<7<:!7+;:I:-!03<0AI>9?4!57I*-C#25FD24F; #> 4                       :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0 #> 5           6<749)6;/@02!.2'40*D79,15),5::=:@-!E7&8?A=D/!#2:.26-57&/I58(C035H>H4,H:%3-;!00!-A6@?84-3E2*4; #> 6                                         <-!I79$A.)@@0:5/8>C2,(\"*(<7-6G4)&.=1CC9I818C(,74:5(<EE/.-\")<(6E #> 7                                   F='I#*5I:<F?)<4G3&:95*-5?1,!:9BD4B5.-27577<2E9)2:189B.5/*#7;;'**.7;-! #> 8                 ?;.*26<C-8B,3#8/,-9!1++:94:/!A317=9>502=-+8;$=53@D*?/6:6&0D7-.@8,5;F,1?0D?$9'&665B8.604 #> 9                       *46.5//3:37?24:(:0*#.))E)?:,/172=2!4\">.*/;\"8+5<;D6.I2=>:C3)108,<)GC161)!55E!.>86/ #> 10                   1;3*=4G5'+()0A659+2;3/!;34:%0E432(38@3+I?924C4E-4;*4&*9-6A64>66G5',I2<962C121B@A/637 #> 11          =<\/-I354/,*>+<CA40*537/;<@I7/4%6192'5'>#4:&C,072+90:0+4;74\"D5,38&<7A?00+1>G>#=?;,@<<1=64D=!1& #> 12                   7;86<>H.)-1H+7I6.+39!4>5=!F483+;5=-7.4!*821*6$I'DI):=+0?3-(<7;.791062#H2.1<*7145:>1; #> 13                7?38,EC#3::=1)8&;<\">3.9BE)1661!2)5-4.11B<3)?')-+,B4.<7)/:IE=5$.3:66G9216-C20,>(0848(1$- #> 14             2>%AC6.?G=59+1=+EC?264?'B6$1@<7D99->$18+*;1!@?8>9645+23B/<=*.6/6543BI494E84)1=9;/8=6+/,68@ #> 15       7);7-=464F1;7;(83B84.@79.>,!>?>16;,6:=/@B;C:;63+/+;69;?@&>I'01!-3H%.,6;=-3=!A5'.-)9@?8*?346C<2*/ #> 16       :C8E6789(=9%1.66A463B5/B8;A51=?=<,8/461!058!6354!<609I9@:7.E.38)7;@@6/C?D&,*%D,I6>6:4%9(1/7>$<C/ #> 17          :0I4099<,4E01;/@96%2I2<,%<C&=81F+4<*@4A5.('4!%I3CE657<=!5;37>4D:%3;7'\"4<.9;?;7%0>:,84B512,B7/ #> 18             9>124!752+@06I/.72097*';-+A60=B?+/8'15477>4-435D;G@G'./21:(0/1/A=7'I>A\"3=9;;12,@\"2=3D=,458 #> 19                <<95G42/@E!1)A68,'%=60C4)3,;9C/;A8<6!-(?83,,194*49G1-,:64E-?/!/,*07AA!G?-9=!(/-+6/@>2/0 #> 20       $<,5\"7+!$';8<0794*@FI>34224!57+#1!F<+53$,?)-.A3;=1*71C02<.5:1)82!86$03/;%+1C3+D3;@9B-E#+/70;9<D' #> 21       53?I.;)/.91%3:6)0041C)I;2<\"3:8?*954::080?3<?>=7A;/#5D?;I2@075;:C.-4HI3GE+-?.,I>)I!>4(5(:1\"2-#-2? #> 22                      .85$#;!1F$8E:B+;7CI6@11/'65<3,4G:8@GF1413:0)3CH1=44.%G=#2E67=?;9DF7358.;(I!74:1I4 #> 23             5@<733';9+3BB)=69,3!.2B*86'8E>@3?!(36:<002/4>:1.43A!+;<.3G*G8?0*991,B(C/\"I9*1-86)8.;;5-0+= read_fastq(fastq_file, calculate_length = TRUE) #>     read #> 1  F1-1a #> 2  F1-1b #> 3  F1-1c #> 4  F1-1d #> 5  F1-1e #> 6  F1-2a #> 7  F1-2b #> 8  F1-3a #> 9  F1-3b #> 10 F1-3c #> 11 F2-1a #> 12 F2-2a #> 13 F2-2b #> 14 F2-2c #> 15 F3-1a #> 16 F3-1b #> 17 F3-2a #> 18 F3-2b #> 19 F3-2c #> 20 F3-3a #> 21 F3-4a #> 22 F3-4b #> 23 F3-4c #>                                                                                                  sequence #> 1  GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 2                                         GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 3                 TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 4                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 5           TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCC #> 6                                         TCCGCCGCCTCCTCCTCCGCCGCCTCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 7                                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA #> 8                 GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 9                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA #> 10                   TCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 11          GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 12                   TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 13                GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 14             TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 15       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCC #> 16       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCC #> 17          GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 18             GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA #> 19                TCCGCCGCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 20       GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 21       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 22                      GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA #> 23             GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA #>                                                                                                   quality #> 1  )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90 #> 2                                         60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139 #> 3                 @9889C8<<*96;52!*86,227.<I.8AI<>;2/391%D19*5@G=8<7<:!7+;:I:-!03<0AI>9?4!57I*-C#25FD24F; #> 4                       :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0 #> 5           6<749)6;/@02!.2'40*D79,15),5::=:@-!E7&8?A=D/!#2:.26-57&/I58(C035H>H4,H:%3-;!00!-A6@?84-3E2*4; #> 6                                         <-!I79$A.)@@0:5/8>C2,(\"*(<7-6G4)&.=1CC9I818C(,74:5(<EE/.-\")<(6E #> 7                                   F='I#*5I:<F?)<4G3&:95*-5?1,!:9BD4B5.-27577<2E9)2:189B.5/*#7;;'**.7;-! #> 8                 ?;.*26<C-8B,3#8/,-9!1++:94:/!A317=9>502=-+8;$=53@D*?/6:6&0D7-.@8,5;F,1?0D?$9'&665B8.604 #> 9                       *46.5//3:37?24:(:0*#.))E)?:,/172=2!4\">.*/;\"8+5<;D6.I2=>:C3)108,<)GC161)!55E!.>86/ #> 10                   1;3*=4G5'+()0A659+2;3/!;34:%0E432(38@3+I?924C4E-4;*4&*9-6A64>66G5',I2<962C121B@A/637 #> 11          =<\/-I354/,*>+<CA40*537/;<@I7/4%6192'5'>#4:&C,072+90:0+4;74\"D5,38&<7A?00+1>G>#=?;,@<<1=64D=!1& #> 12                   7;86<>H.)-1H+7I6.+39!4>5=!F483+;5=-7.4!*821*6$I'DI):=+0?3-(<7;.791062#H2.1<*7145:>1; #> 13                7?38,EC#3::=1)8&;<\">3.9BE)1661!2)5-4.11B<3)?')-+,B4.<7)/:IE=5$.3:66G9216-C20,>(0848(1$- #> 14             2>%AC6.?G=59+1=+EC?264?'B6$1@<7D99->$18+*;1!@?8>9645+23B/<=*.6/6543BI494E84)1=9;/8=6+/,68@ #> 15       7);7-=464F1;7;(83B84.@79.>,!>?>16;,6:=/@B;C:;63+/+;69;?@&>I'01!-3H%.,6;=-3=!A5'.-)9@?8*?346C<2*/ #> 16       :C8E6789(=9%1.66A463B5/B8;A51=?=<,8/461!058!6354!<609I9@:7.E.38)7;@@6/C?D&,*%D,I6>6:4%9(1/7>$<C/ #> 17          :0I4099<,4E01;/@96%2I2<,%<C&=81F+4<*@4A5.('4!%I3CE657<=!5;37>4D:%3;7'\"4<.9;?;7%0>:,84B512,B7/ #> 18             9>124!752+@06I/.72097*';-+A60=B?+/8'15477>4-435D;G@G'./21:(0/1/A=7'I>A\"3=9;;12,@\"2=3D=,458 #> 19                <<95G42/@E!1)A68,'%=60C4)3,;9C/;A8<6!-(?83,,194*49G1-,:64E-?/!/,*07AA!G?-9=!(/-+6/@>2/0 #> 20       $<,5\"7+!$';8<0794*@FI>34224!57+#1!F<+53$,?)-.A3;=1*71C02<.5:1)82!86$03/;%+1C3+D3;@9B-E#+/70;9<D' #> 21       53?I.;)/.91%3:6)0041C)I;2<\"3:8?*954::080?3<?>=7A;/#5D?;I2@075;:C.-4HI3GE+-?.,I>)I!>4(5(:1\"2-#-2? #> 22                      .85$#;!1F$8E:B+;7CI6@11/'65<3,4G:8@GF1413:0)3CH1=44.%G=#2E67=?;9DF7358.;(I!74:1I4 #> 23             5@<733';9+3BB)=69,3!.2B*86'8E>@3?!(36:<002/4>:1.43A!+;<.3G*G8?0*991,B(C/\"I9*1-86)8.;;5-0+= #>    sequence_length #> 1              102 #> 2               63 #> 3               87 #> 4               81 #> 5               93 #> 6               63 #> 7               69 #> 8               87 #> 9               81 #> 10              84 #> 11              93 #> 12              84 #> 13              87 #> 14              90 #> 15              96 #> 16              96 #> 17              93 #> 18              90 #> 19              87 #> 20              96 #> 21              96 #> 22              81 #> 23              90"},{"path":"https://ejade42.github.io/ggDNAvis/reference/read_modified_fastq.html","id":null,"dir":"Reference","previous_headings":"","what":"Read modification information from modified FASTQ — read_modified_fastq","title":"Read modification information from modified FASTQ — read_modified_fastq","text":"function reads modified FASTQ file (e.g. created samtools fastq -T MM,ML BAM basecalled modification-capable model Dorado Guppy) dataframe. default, dataframe contains columns unique read id (read), sequence (sequence), sequence length (sequence_length), quality (quality), comma-separated (via vector_to_string()) modification types present read (modification_types), modification type, column comma-separated modification locations (<type>_locations) column comma-separated modification probabilities (<type>_probabilities). Modification locations indices along read modification assessed e.g. 3 indicates third base read assessed modifications given type. Modification probabilities probability given modification present, given integer 0-255 integer \\(N\\) represents probability space \\(\\frac{N}{256}\\) \\(\\frac{N+1}{256}\\). extract numbers columns numeric vectors analyse, use string_to_vector() e.g. list_of_locations <- lapply(test_01$`C+h?_locations`, string_to_vector). aware SAM modification types often contain special characters, meaning colname may need enclosed backticks example. Alternatively, use extract_methylation_from_dataframe() create list locations, probabilities, lengths ready visualisation visualise_methylation(). works modification type extracted function, just provide relevant colname calling extract_methylation_from_dataframe(). Optionally (specifying debug = TRUE), dataframe also contain columns raw MM ML tags (<MM/ML>_raw) tags initial label trimmed (<MM/ML>_tags). recommended situations may help debugging unexpected issues contains raw data exactly FASTQ. Dataframes produced function can written back modified FASTQ via write_modified_fastq().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/read_modified_fastq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read modification information from modified FASTQ — read_modified_fastq","text":"","code":"read_modified_fastq(filename = file.choose(), debug = FALSE)"},{"path":"https://ejade42.github.io/ggDNAvis/reference/read_modified_fastq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read modification information from modified FASTQ — read_modified_fastq","text":"filename character. file read. Defaults file.choose() select file interactively. debug logical. Boolean value whether extra <MM/ML>_tags <MM/ML>_raw columns added dataframe. Defaults FALSE imagine often helpful, option provided assist debugging.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/read_modified_fastq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read modification information from modified FASTQ — read_modified_fastq","text":"dataframe. Dataframe modification information, described . Sequences can visualised visualise_many_sequences() modification information can visualised visualise_methylation() (despite name, type information can visualised long locations probabilities columns). Can written back FASTQ via write_modified_fastq().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/read_modified_fastq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read modification information from modified FASTQ — read_modified_fastq","text":"","code":"## Locate file modified_fastq_file <- system.file(\"extdata\",                                    \"example_many_sequences_raw_modified.fastq\",                                    package = \"ggDNAvis\")  ## View file for (i in 1:16) {     cat(readLines(modified_fastq_file)[i], \"\\n\") } #> F1-1a\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\tML:B:C,26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34,29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41  #> GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  #> +  #> )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90  #> F1-1b\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\tML:B:C,10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2,10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253  #> GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  #> +  #> 60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139  #> F1-1c\tMM:Z:C+h?,1,1,5,1,1,5,1,1,5,1,1,5,1,1,1,1,1,1,1,1;C+m?,1,1,5,1,1,5,1,1,5,1,1,5,1,1,1,1,1,1,1,1;\tML:B:C,37,47,64,63,33,64,52,55,17,46,47,64,56,64,56,60,55,58,63,40,45,192,126,129,39,129,183,79,19,195,62,124,173,128,84,159,80,165,141,206  #> TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC  #> +  #> @9889C8<<*96;52!*86,227.<I.8AI<>;2/391%D19*5@G=8<7<:!7+;:I:-!03<0AI>9?4!57I*-C#25FD24F;  #> F1-1d\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\tML:B:C,33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55,216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82  #> GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA  #> +  #> :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0   ## Read file to dataframe read_modified_fastq(modified_fastq_file, debug = FALSE) #>     read #> 1  F1-1a #> 2  F1-1b #> 3  F1-1c #> 4  F1-1d #> 5  F1-1e #> 6  F1-2a #> 7  F1-2b #> 8  F1-3a #> 9  F1-3b #> 10 F1-3c #> 11 F2-1a #> 12 F2-2a #> 13 F2-2b #> 14 F2-2c #> 15 F3-1a #> 16 F3-1b #> 17 F3-2a #> 18 F3-2b #> 19 F3-2c #> 20 F3-3a #> 21 F3-4a #> 22 F3-4b #> 23 F3-4c #>                                                                                                  sequence #> 1  GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 2                                         GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 3                 TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 4                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 5           TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCC #> 6                                         TCCGCCGCCTCCTCCTCCGCCGCCTCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 7                                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA #> 8                 GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 9                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA #> 10                   TCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 11          GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 12                   TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 13                GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 14             TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 15       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCC #> 16       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCC #> 17          GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 18             GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA #> 19                TCCGCCGCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 20       GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 21       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 22                      GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA #> 23             GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA #>    sequence_length #> 1              102 #> 2               63 #> 3               87 #> 4               81 #> 5               93 #> 6               63 #> 7               69 #> 8               87 #> 9               81 #> 10              84 #> 11              93 #> 12              84 #> 13              87 #> 14              90 #> 15              96 #> 16              96 #> 17              93 #> 18              90 #> 19              87 #> 20              96 #> 21              96 #> 22              81 #> 23              90 #>                                                                                                   quality #> 1  )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90 #> 2                                         60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139 #> 3                 @9889C8<<*96;52!*86,227.<I.8AI<>;2/391%D19*5@G=8<7<:!7+;:I:-!03<0AI>9?4!57I*-C#25FD24F; #> 4                       :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0 #> 5           6<749)6;/@02!.2'40*D79,15),5::=:@-!E7&8?A=D/!#2:.26-57&/I58(C035H>H4,H:%3-;!00!-A6@?84-3E2*4; #> 6                                         <-!I79$A.)@@0:5/8>C2,(\"*(<7-6G4)&.=1CC9I818C(,74:5(<EE/.-\")<(6E #> 7                                   F='I#*5I:<F?)<4G3&:95*-5?1,!:9BD4B5.-27577<2E9)2:189B.5/*#7;;'**.7;-! #> 8                 ?;.*26<C-8B,3#8/,-9!1++:94:/!A317=9>502=-+8;$=53@D*?/6:6&0D7-.@8,5;F,1?0D?$9'&665B8.604 #> 9                       *46.5//3:37?24:(:0*#.))E)?:,/172=2!4\">.*/;\"8+5<;D6.I2=>:C3)108,<)GC161)!55E!.>86/ #> 10                   1;3*=4G5'+()0A659+2;3/!;34:%0E432(38@3+I?924C4E-4;*4&*9-6A64>66G5',I2<962C121B@A/637 #> 11          =<\/-I354/,*>+<CA40*537/;<@I7/4%6192'5'>#4:&C,072+90:0+4;74\"D5,38&<7A?00+1>G>#=?;,@<<1=64D=!1& #> 12                   7;86<>H.)-1H+7I6.+39!4>5=!F483+;5=-7.4!*821*6$I'DI):=+0?3-(<7;.791062#H2.1<*7145:>1; #> 13                7?38,EC#3::=1)8&;<\">3.9BE)1661!2)5-4.11B<3)?')-+,B4.<7)/:IE=5$.3:66G9216-C20,>(0848(1$- #> 14             2>%AC6.?G=59+1=+EC?264?'B6$1@<7D99->$18+*;1!@?8>9645+23B/<=*.6/6543BI494E84)1=9;/8=6+/,68@ #> 15       7);7-=464F1;7;(83B84.@79.>,!>?>16;,6:=/@B;C:;63+/+;69;?@&>I'01!-3H%.,6;=-3=!A5'.-)9@?8*?346C<2*/ #> 16       :C8E6789(=9%1.66A463B5/B8;A51=?=<,8/461!058!6354!<609I9@:7.E.38)7;@@6/C?D&,*%D,I6>6:4%9(1/7>$<C/ #> 17          :0I4099<,4E01;/@96%2I2<,%<C&=81F+4<*@4A5.('4!%I3CE657<=!5;37>4D:%3;7'\"4<.9;?;7%0>:,84B512,B7/ #> 18             9>124!752+@06I/.72097*';-+A60=B?+/8'15477>4-435D;G@G'./21:(0/1/A=7'I>A\"3=9;;12,@\"2=3D=,458 #> 19                <<95G42/@E!1)A68,'%=60C4)3,;9C/;A8<6!-(?83,,194*49G1-,:64E-?/!/,*07AA!G?-9=!(/-+6/@>2/0 #> 20       $<,5\"7+!$';8<0794*@FI>34224!57+#1!F<+53$,?)-.A3;=1*71C02<.5:1)82!86$03/;%+1C3+D3;@9B-E#+/70;9<D' #> 21       53?I.;)/.91%3:6)0041C)I;2<\"3:8?*954::080?3<?>=7A;/#5D?;I2@075;:C.-4HI3GE+-?.,I>)I!>4(5(:1\"2-#-2? #> 22                      .85$#;!1F$8E:B+;7CI6@11/'65<3,4G:8@GF1413:0)3CH1=44.%G=#2E67=?;9DF7358.;(I!74:1I4 #> 23             5@<733';9+3BB)=69,3!.2B*86'8E>@3?!(36:<002/4>:1.43A!+;<.3G*G8?0*991,B(C/\"I9*1-86)8.;;5-0+= #>    modification_types #> 1           C+h?,C+m? #> 2           C+h?,C+m? #> 3           C+h?,C+m? #> 4           C+h?,C+m? #> 5           C+h?,C+m? #> 6           C+h?,C+m? #> 7           C+h?,C+m? #> 8           C+h?,C+m? #> 9           C+h?,C+m? #> 10          C+h?,C+m? #> 11          C+h?,C+m? #> 12          C+h?,C+m? #> 13          C+h?,C+m? #> 14          C+h?,C+m? #> 15          C+h?,C+m? #> 16          C+h?,C+m? #> 17          C+h?,C+m? #> 18          C+h?,C+m? #> 19          C+h?,C+m? #> 20          C+h?,C+m? #> 21          C+h?,C+m? #> 22          C+h?,C+m? #> 23          C+h?,C+m? #>                                                                      C+h?_locations #> 1                 3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99 #> 2                                      3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60 #> 3                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,69,72,75,78,81,84 #> 4                          3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78 #> 5                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,75,78,81,84,87,90 #> 6                                           3,6,18,21,33,36,39,42,45,48,51,54,57,60 #> 7                                      3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66 #> 8                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 9                    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78 #> 10                           3,6,15,18,27,30,33,42,45,48,57,60,63,66,69,72,75,78,81 #> 11 3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90 #> 12         3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81 #> 13       3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84 #> 14   3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87 #> 15                                 3,6,15,18,27,30,39,42,51,54,63,66,75,78,87,90,93 #> 16                           3,6,15,18,27,30,39,42,51,54,63,66,75,78,81,84,87,90,93 #> 17                               3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90 #> 18                                  3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87 #> 19                         3,6,9,12,21,24,33,36,45,48,57,60,63,66,69,72,75,78,81,84 #> 20                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 21                     3,6,15,18,27,30,39,42,51,54,63,66,69,72,75,78,81,84,87,90,93 #> 22                         3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78 #> 23                            3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87 #>                                                                     C+h?_probabilities #> 1                  26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34 #> 2                                       10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2 #> 3                          37,47,64,63,33,64,52,55,17,46,47,64,56,64,56,60,55,58,63,40 #> 4                            33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55 #> 5                           54,7,53,64,24,29,30,23,35,23,34,55,61,23,40,63,31,64,18,57 #> 6                                              12,23,52,9,63,29,33,56,30,41,52,63,9,49 #> 7                                       27,44,20,13,51,28,41,48,19,1,14,64,52,48,64,64 #> 8                            55,10,59,28,62,20,64,21,62,59,29,64,4,56,64,59,60,49,63,5 #> 9                     62,63,45,19,32,46,3,61,0,159,42,80,46,84,86,52,8,92,102,4,138,20 #> 10                        20,111,79,1,238,1,142,35,80,40,21,126,47,112,21,71,103,43,80 #> 11 68,1,220,4,42,36,35,57,3,90,56,79,92,19,93,36,130,47,82,1,109,104,58,11,83,10,86,49 #> 12      49,82,145,1,40,133,14,114,89,5,129,88,26,66,42,136,25,17,74,44,6,104,125,18,93 #> 13        17,3,130,28,84,5,50,95,55,112,49,67,7,106,67,0,72,21,209,3,112,60,28,6,188,4 #> 14  38,24,184,5,98,72,32,22,83,39,135,53,51,9,54,55,45,102,95,23,3,198,19,121,22,123,3 #> 15                               103,74,17,32,114,0,93,133,6,77,116,2,51,112,11,157,59 #> 16                           22,63,13,16,88,54,55,26,86,133,7,170,15,68,29,41,30,89,61 #> 17                              11,195,26,74,62,93,1,139,5,178,33,3,158,65,76,3,13,225 #> 18                                   9,13,165,10,0,10,104,65,78,43,124,87,0,95,19,2,73 #> 19                       17,24,0,47,75,133,76,9,112,90,19,75,156,35,30,136,5,16,30,191 #> 20                           24,3,3,78,63,47,66,155,13,19,109,141,87,2,55,43,24,83,161 #> 21                 225,21,6,207,111,10,11,116,113,24,108,32,33,162,6,20,35,14,73,44,36 #> 22                          29,9,79,29,15,95,14,82,81,43,11,25,98,35,18,53,112,2,57,31 #> 23                            52,87,155,117,2,0,3,50,81,184,75,74,60,97,15,8,46,188,81 #>                                                                      C+m?_locations #> 1                 3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99 #> 2                                      3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60 #> 3                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,69,72,75,78,81,84 #> 4                          3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78 #> 5                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,75,78,81,84,87,90 #> 6                                           3,6,18,21,33,36,39,42,45,48,51,54,57,60 #> 7                                      3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66 #> 8                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 9                    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78 #> 10                           3,6,15,18,27,30,33,42,45,48,57,60,63,66,69,72,75,78,81 #> 11 3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90 #> 12         3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81 #> 13       3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84 #> 14   3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87 #> 15                                 3,6,15,18,27,30,39,42,51,54,63,66,75,78,87,90,93 #> 16                           3,6,15,18,27,30,39,42,51,54,63,66,75,78,81,84,87,90,93 #> 17                               3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90 #> 18                                  3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87 #> 19                         3,6,9,12,21,24,33,36,45,48,57,60,63,66,69,72,75,78,81,84 #> 20                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 21                     3,6,15,18,27,30,39,42,51,54,63,66,69,72,75,78,81,84,87,90,93 #> 22                         3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78 #> 23                            3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87 #>                                                                                           C+m?_probabilities #> 1                             29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41 #> 2                                                    10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253 #> 3                                   45,192,126,129,39,129,183,79,19,195,62,124,173,128,84,159,80,165,141,206 #> 4                                          216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82 #> 5                                         79,7,77,130,27,34,34,230,42,229,41,79,99,229,50,139,36,120,236,170 #> 6                                                              242,26,182,10,111,33,40,83,34,52,71,144,9,189 #> 7                                                  31,56,233,241,71,31,203,190,234,254,240,124,72,64,128,127 #> 8                                81,245,162,32,108,233,119,232,152,161,222,128,251,83,123,91,160,189,144,250 #> 9                            147,112,58,21,217,60,252,153,255,96,142,110,147,110,57,22,163,110,19,205,83,193 #> 10                                       189,79,161,215,6,244,19,153,88,122,77,30,143,108,194,88,109,181,149 #> 11 163,253,33,225,207,210,213,187,251,163,168,135,81,196,134,187,78,103,52,251,144,71,47,193,145,238,163,179 #> 12                  55,62,108,252,125,78,191,54,145,206,27,145,203,126,130,86,205,127,34,85,66,8,108,217,122 #> 13                 176,250,122,197,146,246,203,136,152,67,71,17,144,67,1,150,133,215,8,153,68,31,26,191,4,13 #> 14         193,155,62,243,105,167,209,178,73,116,72,188,200,234,109,94,88,68,139,209,129,7,204,96,194,91,191 #> 15                                           104,174,233,196,140,253,49,115,242,113,137,250,90,79,162,29,177 #> 16                                        225,187,235,168,48,109,94,87,39,101,220,51,213,89,104,49,50,37,104 #> 17                                              243,50,121,98,95,7,237,105,244,69,132,249,94,79,9,170,235,11 #> 18                                            51,190,33,181,255,241,151,186,124,196,1,142,117,84,213,249,168 #> 19                                      175,29,55,27,1,53,75,168,107,26,194,101,78,124,224,68,249,185,209,60 #> 20                                     49,251,241,176,189,187,166,43,235,144,137,5,93,175,106,193,198,146,48 #> 21                              14,51,238,27,88,231,169,105,34,198,131,106,221,55,247,206,198,106,159,24,193 #> 22                               109,86,70,169,200,112,237,69,168,97,239,188,150,208,225,190,128,252,142,224 #> 23                                       161,156,9,65,198,255,245,191,174,63,155,146,13,95,228,100,132,45,49 read_modified_fastq(modified_fastq_file, debug = TRUE) #>     read #> 1  F1-1a #> 2  F1-1b #> 3  F1-1c #> 4  F1-1d #> 5  F1-1e #> 6  F1-2a #> 7  F1-2b #> 8  F1-3a #> 9  F1-3b #> 10 F1-3c #> 11 F2-1a #> 12 F2-2a #> 13 F2-2b #> 14 F2-2c #> 15 F3-1a #> 16 F3-1b #> 17 F3-2a #> 18 F3-2b #> 19 F3-2c #> 20 F3-3a #> 21 F3-4a #> 22 F3-4b #> 23 F3-4c #>                                                                                                  sequence #> 1  GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 2                                         GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 3                 TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 4                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 5           TCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCC #> 6                                         TCCGCCGCCTCCTCCTCCGCCGCCTCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 7                                   GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA #> 8                 GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA #> 9                       GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA #> 10                   TCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 11          GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 12                   TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 13                GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA #> 14             TCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 15       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCC #> 16       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCC #> 17          GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 18             GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA #> 19                TCCGCCGCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCTCCTCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 20       GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA #> 21       TCCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCACCACCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCCGCC #> 22                      GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA #> 23             GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA #>    sequence_length #> 1              102 #> 2               63 #> 3               87 #> 4               81 #> 5               93 #> 6               63 #> 7               69 #> 8               87 #> 9               81 #> 10              84 #> 11              93 #> 12              84 #> 13              87 #> 14              90 #> 15              96 #> 16              96 #> 17              93 #> 18              90 #> 19              87 #> 20              96 #> 21              96 #> 22              81 #> 23              90 #>                                                                                                   quality #> 1  )8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90 #> 2                                         60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\">/2C;4:9F8:816E,6C3*,1-2139 #> 3                 @9889C8<<*96;52!*86,227.<I.8AI<>;2/391%D19*5@G=8<7<:!7+;:I:-!03<0AI>9?4!57I*-C#25FD24F; #> 4                       :<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0 #> 5           6<749)6;/@02!.2'40*D79,15),5::=:@-!E7&8?A=D/!#2:.26-57&/I58(C035H>H4,H:%3-;!00!-A6@?84-3E2*4; #> 6                                         <-!I79$A.)@@0:5/8>C2,(\"*(<7-6G4)&.=1CC9I818C(,74:5(<EE/.-\")<(6E #> 7                                   F='I#*5I:<F?)<4G3&:95*-5?1,!:9BD4B5.-27577<2E9)2:189B.5/*#7;;'**.7;-! #> 8                 ?;.*26<C-8B,3#8/,-9!1++:94:/!A317=9>502=-+8;$=53@D*?/6:6&0D7-.@8,5;F,1?0D?$9'&665B8.604 #> 9                       *46.5//3:37?24:(:0*#.))E)?:,/172=2!4\">.*/;\"8+5<;D6.I2=>:C3)108,<)GC161)!55E!.>86/ #> 10                   1;3*=4G5'+()0A659+2;3/!;34:%0E432(38@3+I?924C4E-4;*4&*9-6A64>66G5',I2<962C121B@A/637 #> 11          =<\/-I354/,*>+<CA40*537/;<@I7/4%6192'5'>#4:&C,072+90:0+4;74\"D5,38&<7A?00+1>G>#=?;,@<<1=64D=!1& #> 12                   7;86<>H.)-1H+7I6.+39!4>5=!F483+;5=-7.4!*821*6$I'DI):=+0?3-(<7;.791062#H2.1<*7145:>1; #> 13                7?38,EC#3::=1)8&;<\">3.9BE)1661!2)5-4.11B<3)?')-+,B4.<7)/:IE=5$.3:66G9216-C20,>(0848(1$- #> 14             2>%AC6.?G=59+1=+EC?264?'B6$1@<7D99->$18+*;1!@?8>9645+23B/<=*.6/6543BI494E84)1=9;/8=6+/,68@ #> 15       7);7-=464F1;7;(83B84.@79.>,!>?>16;,6:=/@B;C:;63+/+;69;?@&>I'01!-3H%.,6;=-3=!A5'.-)9@?8*?346C<2*/ #> 16       :C8E6789(=9%1.66A463B5/B8;A51=?=<,8/461!058!6354!<609I9@:7.E.38)7;@@6/C?D&,*%D,I6>6:4%9(1/7>$<C/ #> 17          :0I4099<,4E01;/@96%2I2<,%<C&=81F+4<*@4A5.('4!%I3CE657<=!5;37>4D:%3;7'\"4<.9;?;7%0>:,84B512,B7/ #> 18             9>124!752+@06I/.72097*';-+A60=B?+/8'15477>4-435D;G@G'./21:(0/1/A=7'I>A\"3=9;;12,@\"2=3D=,458 #> 19                <<95G42/@E!1)A68,'%=60C4)3,;9C/;A8<6!-(?83,,194*49G1-,:64E-?/!/,*07AA!G?-9=!(/-+6/@>2/0 #> 20       $<,5\"7+!$';8<0794*@FI>34224!57+#1!F<+53$,?)-.A3;=1*71C02<.5:1)82!86$03/;%+1C3+D3;@9B-E#+/70;9<D' #> 21       53?I.;)/.91%3:6)0041C)I;2<\"3:8?*954::080?3<?>=7A;/#5D?;I2@075;:C.-4HI3GE+-?.,I>)I!>4(5(:1\"2-#-2? #> 22                      .85$#;!1F$8E:B+;7CI6@11/'65<3,4G:8@GF1413:0)3CH1=44.%G=#2E67=?;9DF7358.;(I!74:1I4 #> 23             5@<733';9+3BB)=69,3!.2B*86'8E>@3?!(36:<002/4>:1.43A!+;<.3G*G8?0*991,B(C/\"I9*1-86)8.;;5-0+= #>    modification_types #> 1           C+h?,C+m? #> 2           C+h?,C+m? #> 3           C+h?,C+m? #> 4           C+h?,C+m? #> 5           C+h?,C+m? #> 6           C+h?,C+m? #> 7           C+h?,C+m? #> 8           C+h?,C+m? #> 9           C+h?,C+m? #> 10          C+h?,C+m? #> 11          C+h?,C+m? #> 12          C+h?,C+m? #> 13          C+h?,C+m? #> 14          C+h?,C+m? #> 15          C+h?,C+m? #> 16          C+h?,C+m? #> 17          C+h?,C+m? #> 18          C+h?,C+m? #> 19          C+h?,C+m? #> 20          C+h?,C+m? #> 21          C+h?,C+m? #> 22          C+h?,C+m? #> 23          C+h?,C+m? #>                                                                                                                       MM_tags #> 1                      C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 2                                                  C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 3                                  C+h?,1,1,5,1,1,5,1,1,5,1,1,5,1,1,1,1,1,1,1,1;C+m?,1,1,5,1,1,5,1,1,5,1,1,5,1,1,1,1,1,1,1,1; #> 4                                  C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 5                                  C+h?,1,1,5,1,1,5,1,1,5,1,1,5,1,1,5,1,1,1,1,1;C+m?,1,1,5,1,1,5,1,1,5,1,1,5,1,1,5,1,1,1,1,1; #> 6                                                          C+h?,1,1,7,1,7,1,1,1,1,1,1,1,1,1;C+m?,1,1,7,1,7,1,1,1,1,1,1,1,1,1; #> 7                                                  C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 8                                  C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 9                          C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 10                                     C+h?,1,1,5,1,5,1,1,5,1,1,5,1,1,1,1,1,1,1,1;C+m?,1,1,5,1,5,1,1,5,1,1,5,1,1,1,1,1,1,1,1; #> 11 C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 12             C+h?,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;C+m?,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1; #> 13         C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 14     C+h?,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;C+m?,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1; #> 15                                             C+h?,1,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,1;C+m?,1,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,1; #> 16                                     C+h?,1,1,5,1,5,1,5,1,5,1,5,1,5,1,1,1,1,1,1;C+m?,1,1,5,1,5,1,5,1,5,1,5,1,5,1,1,1,1,1,1; #> 17                                         C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 18                                             C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 19                                 C+h?,1,1,1,1,5,1,5,1,5,1,5,1,1,1,1,1,1,1,1,1;C+m?,1,1,1,1,5,1,5,1,5,1,5,1,1,1,1,1,1,1,1,1; #> 20                                     C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 21                             C+h?,1,1,5,1,5,1,5,1,5,1,5,1,1,1,1,1,1,1,1,1,1;C+m?,1,1,5,1,5,1,5,1,5,1,5,1,1,1,1,1,1,1,1,1,1; #> 22                                 C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 23                                     C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #>                                                                                                                                                                                          ML_tags #> 1                                             26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34,29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41 #> 2                                                                                         10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2,10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253 #> 3                                                           37,47,64,63,33,64,52,55,17,46,47,64,56,64,56,60,55,58,63,40,45,192,126,129,39,129,183,79,19,195,62,124,173,128,84,159,80,165,141,206 #> 4                                                                    33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55,216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82 #> 5                                                                  54,7,53,64,24,29,30,23,35,23,34,55,61,23,40,63,31,64,18,57,79,7,77,130,27,34,34,230,42,229,41,79,99,229,50,139,36,120,236,170 #> 6                                                                                                          12,23,52,9,63,29,33,56,30,41,52,63,9,49,242,26,182,10,111,33,40,83,34,52,71,144,9,189 #> 7                                                                                       27,44,20,13,51,28,41,48,19,1,14,64,52,48,64,64,31,56,233,241,71,31,203,190,234,254,240,124,72,64,128,127 #> 8                                                          55,10,59,28,62,20,64,21,62,59,29,64,4,56,64,59,60,49,63,5,81,245,162,32,108,233,119,232,152,161,222,128,251,83,123,91,160,189,144,250 #> 9                                               62,63,45,19,32,46,3,61,0,159,42,80,46,84,86,52,8,92,102,4,138,20,147,112,58,21,217,60,252,153,255,96,142,110,147,110,57,22,163,110,19,205,83,193 #> 10                                                              20,111,79,1,238,1,142,35,80,40,21,126,47,112,21,71,103,43,80,189,79,161,215,6,244,19,153,88,122,77,30,143,108,194,88,109,181,149 #> 11 68,1,220,4,42,36,35,57,3,90,56,79,92,19,93,36,130,47,82,1,109,104,58,11,83,10,86,49,163,253,33,225,207,210,213,187,251,163,168,135,81,196,134,187,78,103,52,251,144,71,47,193,145,238,163,179 #> 12                       49,82,145,1,40,133,14,114,89,5,129,88,26,66,42,136,25,17,74,44,6,104,125,18,93,55,62,108,252,125,78,191,54,145,206,27,145,203,126,130,86,205,127,34,85,66,8,108,217,122 #> 13                        17,3,130,28,84,5,50,95,55,112,49,67,7,106,67,0,72,21,209,3,112,60,28,6,188,4,176,250,122,197,146,246,203,136,152,67,71,17,144,67,1,150,133,215,8,153,68,31,26,191,4,13 #> 14          38,24,184,5,98,72,32,22,83,39,135,53,51,9,54,55,45,102,95,23,3,198,19,121,22,123,3,193,155,62,243,105,167,209,178,73,116,72,188,200,234,109,94,88,68,139,209,129,7,204,96,194,91,191 #> 15                                                                         103,74,17,32,114,0,93,133,6,77,116,2,51,112,11,157,59,104,174,233,196,140,253,49,115,242,113,137,250,90,79,162,29,177 #> 16                                                                  22,63,13,16,88,54,55,26,86,133,7,170,15,68,29,41,30,89,61,225,187,235,168,48,109,94,87,39,101,220,51,213,89,104,49,50,37,104 #> 17                                                                           11,195,26,74,62,93,1,139,5,178,33,3,158,65,76,3,13,225,243,50,121,98,95,7,237,105,244,69,132,249,94,79,9,170,235,11 #> 18                                                                              9,13,165,10,0,10,104,65,78,43,124,87,0,95,19,2,73,51,190,33,181,255,241,151,186,124,196,1,142,117,84,213,249,168 #> 19                                                            17,24,0,47,75,133,76,9,112,90,19,75,156,35,30,136,5,16,30,191,175,29,55,27,1,53,75,168,107,26,194,101,78,124,224,68,249,185,209,60 #> 20                                                               24,3,3,78,63,47,66,155,13,19,109,141,87,2,55,43,24,83,161,49,251,241,176,189,187,166,43,235,144,137,5,93,175,106,193,198,146,48 #> 21                                              225,21,6,207,111,10,11,116,113,24,108,32,33,162,6,20,35,14,73,44,36,14,51,238,27,88,231,169,105,34,198,131,106,221,55,247,206,198,106,159,24,193 #> 22                                                        29,9,79,29,15,95,14,82,81,43,11,25,98,35,18,53,112,2,57,31,109,86,70,169,200,112,237,69,168,97,239,188,150,208,225,190,128,252,142,224 #> 23                                                                  52,87,155,117,2,0,3,50,81,184,75,74,60,97,15,8,46,188,81,161,156,9,65,198,255,245,191,174,63,155,146,13,95,228,100,132,45,49 #>                                                                                                                             MM_raw #> 1                      MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 2                                                  MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 3                                  MM:Z:C+h?,1,1,5,1,1,5,1,1,5,1,1,5,1,1,1,1,1,1,1,1;C+m?,1,1,5,1,1,5,1,1,5,1,1,5,1,1,1,1,1,1,1,1; #> 4                                  MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 5                                  MM:Z:C+h?,1,1,5,1,1,5,1,1,5,1,1,5,1,1,5,1,1,1,1,1;C+m?,1,1,5,1,1,5,1,1,5,1,1,5,1,1,5,1,1,1,1,1; #> 6                                                          MM:Z:C+h?,1,1,7,1,7,1,1,1,1,1,1,1,1,1;C+m?,1,1,7,1,7,1,1,1,1,1,1,1,1,1; #> 7                                                  MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 8                                  MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 9                          MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 10                                     MM:Z:C+h?,1,1,5,1,5,1,1,5,1,1,5,1,1,1,1,1,1,1,1;C+m?,1,1,5,1,5,1,1,5,1,1,5,1,1,1,1,1,1,1,1; #> 11 MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 12             MM:Z:C+h?,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;C+m?,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1; #> 13         MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 14     MM:Z:C+h?,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;C+m?,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1; #> 15                                             MM:Z:C+h?,1,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,1;C+m?,1,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,1; #> 16                                     MM:Z:C+h?,1,1,5,1,5,1,5,1,5,1,5,1,5,1,1,1,1,1,1;C+m?,1,1,5,1,5,1,5,1,5,1,5,1,5,1,1,1,1,1,1; #> 17                                         MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 18                                             MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 19                                 MM:Z:C+h?,1,1,1,1,5,1,5,1,5,1,5,1,1,1,1,1,1,1,1,1;C+m?,1,1,1,1,5,1,5,1,5,1,5,1,1,1,1,1,1,1,1,1; #> 20                                     MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 21                             MM:Z:C+h?,1,1,5,1,5,1,5,1,5,1,5,1,1,1,1,1,1,1,1,1,1;C+m?,1,1,5,1,5,1,5,1,5,1,5,1,1,1,1,1,1,1,1,1,1; #> 22                                 MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #> 23                                     MM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0; #>                                                                                                                                                                                                  ML_raw #> 1                                             ML:B:C,26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34,29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41 #> 2                                                                                         ML:B:C,10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2,10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253 #> 3                                                           ML:B:C,37,47,64,63,33,64,52,55,17,46,47,64,56,64,56,60,55,58,63,40,45,192,126,129,39,129,183,79,19,195,62,124,173,128,84,159,80,165,141,206 #> 4                                                                    ML:B:C,33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55,216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82 #> 5                                                                  ML:B:C,54,7,53,64,24,29,30,23,35,23,34,55,61,23,40,63,31,64,18,57,79,7,77,130,27,34,34,230,42,229,41,79,99,229,50,139,36,120,236,170 #> 6                                                                                                          ML:B:C,12,23,52,9,63,29,33,56,30,41,52,63,9,49,242,26,182,10,111,33,40,83,34,52,71,144,9,189 #> 7                                                                                       ML:B:C,27,44,20,13,51,28,41,48,19,1,14,64,52,48,64,64,31,56,233,241,71,31,203,190,234,254,240,124,72,64,128,127 #> 8                                                          ML:B:C,55,10,59,28,62,20,64,21,62,59,29,64,4,56,64,59,60,49,63,5,81,245,162,32,108,233,119,232,152,161,222,128,251,83,123,91,160,189,144,250 #> 9                                               ML:B:C,62,63,45,19,32,46,3,61,0,159,42,80,46,84,86,52,8,92,102,4,138,20,147,112,58,21,217,60,252,153,255,96,142,110,147,110,57,22,163,110,19,205,83,193 #> 10                                                              ML:B:C,20,111,79,1,238,1,142,35,80,40,21,126,47,112,21,71,103,43,80,189,79,161,215,6,244,19,153,88,122,77,30,143,108,194,88,109,181,149 #> 11 ML:B:C,68,1,220,4,42,36,35,57,3,90,56,79,92,19,93,36,130,47,82,1,109,104,58,11,83,10,86,49,163,253,33,225,207,210,213,187,251,163,168,135,81,196,134,187,78,103,52,251,144,71,47,193,145,238,163,179 #> 12                       ML:B:C,49,82,145,1,40,133,14,114,89,5,129,88,26,66,42,136,25,17,74,44,6,104,125,18,93,55,62,108,252,125,78,191,54,145,206,27,145,203,126,130,86,205,127,34,85,66,8,108,217,122 #> 13                        ML:B:C,17,3,130,28,84,5,50,95,55,112,49,67,7,106,67,0,72,21,209,3,112,60,28,6,188,4,176,250,122,197,146,246,203,136,152,67,71,17,144,67,1,150,133,215,8,153,68,31,26,191,4,13 #> 14          ML:B:C,38,24,184,5,98,72,32,22,83,39,135,53,51,9,54,55,45,102,95,23,3,198,19,121,22,123,3,193,155,62,243,105,167,209,178,73,116,72,188,200,234,109,94,88,68,139,209,129,7,204,96,194,91,191 #> 15                                                                         ML:B:C,103,74,17,32,114,0,93,133,6,77,116,2,51,112,11,157,59,104,174,233,196,140,253,49,115,242,113,137,250,90,79,162,29,177 #> 16                                                                  ML:B:C,22,63,13,16,88,54,55,26,86,133,7,170,15,68,29,41,30,89,61,225,187,235,168,48,109,94,87,39,101,220,51,213,89,104,49,50,37,104 #> 17                                                                           ML:B:C,11,195,26,74,62,93,1,139,5,178,33,3,158,65,76,3,13,225,243,50,121,98,95,7,237,105,244,69,132,249,94,79,9,170,235,11 #> 18                                                                              ML:B:C,9,13,165,10,0,10,104,65,78,43,124,87,0,95,19,2,73,51,190,33,181,255,241,151,186,124,196,1,142,117,84,213,249,168 #> 19                                                            ML:B:C,17,24,0,47,75,133,76,9,112,90,19,75,156,35,30,136,5,16,30,191,175,29,55,27,1,53,75,168,107,26,194,101,78,124,224,68,249,185,209,60 #> 20                                                               ML:B:C,24,3,3,78,63,47,66,155,13,19,109,141,87,2,55,43,24,83,161,49,251,241,176,189,187,166,43,235,144,137,5,93,175,106,193,198,146,48 #> 21                                              ML:B:C,225,21,6,207,111,10,11,116,113,24,108,32,33,162,6,20,35,14,73,44,36,14,51,238,27,88,231,169,105,34,198,131,106,221,55,247,206,198,106,159,24,193 #> 22                                                        ML:B:C,29,9,79,29,15,95,14,82,81,43,11,25,98,35,18,53,112,2,57,31,109,86,70,169,200,112,237,69,168,97,239,188,150,208,225,190,128,252,142,224 #> 23                                                                  ML:B:C,52,87,155,117,2,0,3,50,81,184,75,74,60,97,15,8,46,188,81,161,156,9,65,198,255,245,191,174,63,155,146,13,95,228,100,132,45,49 #>                                                                      C+h?_locations #> 1                 3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99 #> 2                                      3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60 #> 3                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,69,72,75,78,81,84 #> 4                          3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78 #> 5                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,75,78,81,84,87,90 #> 6                                           3,6,18,21,33,36,39,42,45,48,51,54,57,60 #> 7                                      3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66 #> 8                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 9                    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78 #> 10                           3,6,15,18,27,30,33,42,45,48,57,60,63,66,69,72,75,78,81 #> 11 3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90 #> 12         3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81 #> 13       3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84 #> 14   3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87 #> 15                                 3,6,15,18,27,30,39,42,51,54,63,66,75,78,87,90,93 #> 16                           3,6,15,18,27,30,39,42,51,54,63,66,75,78,81,84,87,90,93 #> 17                               3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90 #> 18                                  3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87 #> 19                         3,6,9,12,21,24,33,36,45,48,57,60,63,66,69,72,75,78,81,84 #> 20                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 21                     3,6,15,18,27,30,39,42,51,54,63,66,69,72,75,78,81,84,87,90,93 #> 22                         3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78 #> 23                            3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87 #>                                                                     C+h?_probabilities #> 1                  26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34 #> 2                                       10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2 #> 3                          37,47,64,63,33,64,52,55,17,46,47,64,56,64,56,60,55,58,63,40 #> 4                            33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55 #> 5                           54,7,53,64,24,29,30,23,35,23,34,55,61,23,40,63,31,64,18,57 #> 6                                              12,23,52,9,63,29,33,56,30,41,52,63,9,49 #> 7                                       27,44,20,13,51,28,41,48,19,1,14,64,52,48,64,64 #> 8                            55,10,59,28,62,20,64,21,62,59,29,64,4,56,64,59,60,49,63,5 #> 9                     62,63,45,19,32,46,3,61,0,159,42,80,46,84,86,52,8,92,102,4,138,20 #> 10                        20,111,79,1,238,1,142,35,80,40,21,126,47,112,21,71,103,43,80 #> 11 68,1,220,4,42,36,35,57,3,90,56,79,92,19,93,36,130,47,82,1,109,104,58,11,83,10,86,49 #> 12      49,82,145,1,40,133,14,114,89,5,129,88,26,66,42,136,25,17,74,44,6,104,125,18,93 #> 13        17,3,130,28,84,5,50,95,55,112,49,67,7,106,67,0,72,21,209,3,112,60,28,6,188,4 #> 14  38,24,184,5,98,72,32,22,83,39,135,53,51,9,54,55,45,102,95,23,3,198,19,121,22,123,3 #> 15                               103,74,17,32,114,0,93,133,6,77,116,2,51,112,11,157,59 #> 16                           22,63,13,16,88,54,55,26,86,133,7,170,15,68,29,41,30,89,61 #> 17                              11,195,26,74,62,93,1,139,5,178,33,3,158,65,76,3,13,225 #> 18                                   9,13,165,10,0,10,104,65,78,43,124,87,0,95,19,2,73 #> 19                       17,24,0,47,75,133,76,9,112,90,19,75,156,35,30,136,5,16,30,191 #> 20                           24,3,3,78,63,47,66,155,13,19,109,141,87,2,55,43,24,83,161 #> 21                 225,21,6,207,111,10,11,116,113,24,108,32,33,162,6,20,35,14,73,44,36 #> 22                          29,9,79,29,15,95,14,82,81,43,11,25,98,35,18,53,112,2,57,31 #> 23                            52,87,155,117,2,0,3,50,81,184,75,74,60,97,15,8,46,188,81 #>                                                                      C+m?_locations #> 1                 3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84,87,96,99 #> 2                                      3,6,9,12,15,18,21,24,27,30,33,42,45,48,57,60 #> 3                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,69,72,75,78,81,84 #> 4                          3,6,9,12,15,18,21,24,27,30,33,36,45,48,51,60,63,66,75,78 #> 5                         3,6,15,18,21,30,33,36,45,48,51,60,63,66,75,78,81,84,87,90 #> 6                                           3,6,18,21,33,36,39,42,45,48,51,54,57,60 #> 7                                      3,6,9,12,15,18,21,24,27,30,33,36,48,51,63,66 #> 8                          3,6,9,12,15,18,21,24,27,36,39,42,51,54,57,66,69,72,81,84 #> 9                    3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,54,57,60,69,72,75,78 #> 10                           3,6,15,18,27,30,33,42,45,48,57,60,63,66,69,72,75,78,81 #> 11 3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,87,90 #> 12         3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81 #> 13       3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,81,84 #> 14   3,6,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87 #> 15                                 3,6,15,18,27,30,39,42,51,54,63,66,75,78,87,90,93 #> 16                           3,6,15,18,27,30,39,42,51,54,63,66,75,78,81,84,87,90,93 #> 17                               3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87,90 #> 18                                  3,6,9,12,15,18,27,30,39,42,51,54,63,66,75,78,87 #> 19                         3,6,9,12,21,24,33,36,45,48,57,60,63,66,69,72,75,78,81,84 #> 20                            3,6,9,12,15,18,21,30,33,42,45,54,57,66,69,78,81,90,93 #> 21                     3,6,15,18,27,30,39,42,51,54,63,66,69,72,75,78,81,84,87,90,93 #> 22                         3,6,9,12,15,18,21,24,27,30,33,36,45,48,57,60,69,72,75,78 #> 23                            3,6,9,12,15,18,21,24,33,36,45,48,57,60,69,72,81,84,87 #>                                                                                           C+m?_probabilities #> 1                             29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41 #> 2                                                    10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253 #> 3                                   45,192,126,129,39,129,183,79,19,195,62,124,173,128,84,159,80,165,141,206 #> 4                                          216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82 #> 5                                         79,7,77,130,27,34,34,230,42,229,41,79,99,229,50,139,36,120,236,170 #> 6                                                              242,26,182,10,111,33,40,83,34,52,71,144,9,189 #> 7                                                  31,56,233,241,71,31,203,190,234,254,240,124,72,64,128,127 #> 8                                81,245,162,32,108,233,119,232,152,161,222,128,251,83,123,91,160,189,144,250 #> 9                            147,112,58,21,217,60,252,153,255,96,142,110,147,110,57,22,163,110,19,205,83,193 #> 10                                       189,79,161,215,6,244,19,153,88,122,77,30,143,108,194,88,109,181,149 #> 11 163,253,33,225,207,210,213,187,251,163,168,135,81,196,134,187,78,103,52,251,144,71,47,193,145,238,163,179 #> 12                  55,62,108,252,125,78,191,54,145,206,27,145,203,126,130,86,205,127,34,85,66,8,108,217,122 #> 13                 176,250,122,197,146,246,203,136,152,67,71,17,144,67,1,150,133,215,8,153,68,31,26,191,4,13 #> 14         193,155,62,243,105,167,209,178,73,116,72,188,200,234,109,94,88,68,139,209,129,7,204,96,194,91,191 #> 15                                           104,174,233,196,140,253,49,115,242,113,137,250,90,79,162,29,177 #> 16                                        225,187,235,168,48,109,94,87,39,101,220,51,213,89,104,49,50,37,104 #> 17                                              243,50,121,98,95,7,237,105,244,69,132,249,94,79,9,170,235,11 #> 18                                            51,190,33,181,255,241,151,186,124,196,1,142,117,84,213,249,168 #> 19                                      175,29,55,27,1,53,75,168,107,26,194,101,78,124,224,68,249,185,209,60 #> 20                                     49,251,241,176,189,187,166,43,235,144,137,5,93,175,106,193,198,146,48 #> 21                              14,51,238,27,88,231,169,105,34,198,131,106,221,55,247,206,198,106,159,24,193 #> 22                               109,86,70,169,200,112,237,69,168,97,239,188,150,208,225,190,128,252,142,224 #> 23                                       161,156,9,65,198,255,245,191,174,63,155,146,13,95,228,100,132,45,49"},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_complement.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse complement a DNA/RNA sequence (generic ggDNAvis helper) — reverse_complement","title":"Reverse complement a DNA/RNA sequence (generic ggDNAvis helper) — reverse_complement","text":"function takes string/character representing DNA/RNA sequence returns reverse complement. Either DNA (/C/G/T) RNA (/C/G/U) input accepted.  default, output DNA (reverse-complemented T), can set output RNA (reverse-complemented U).","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_complement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse complement a DNA/RNA sequence (generic ggDNAvis helper) — reverse_complement","text":"","code":"reverse_complement(sequence, output_mode = \"DNA\")"},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_complement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse complement a DNA/RNA sequence (generic ggDNAvis helper) — reverse_complement","text":"sequence character. DNA/RNA sequence (/C/G/T/U) reverse-complemented. characters allowed. one sequence allowed. output_mode character. Either \"DNA\" (default) \"RNA\", determine whether reverse-complemented T U.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_complement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse complement a DNA/RNA sequence (generic ggDNAvis helper) — reverse_complement","text":"character. reverse-complement input sequence.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_complement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse complement a DNA/RNA sequence (generic ggDNAvis helper) — reverse_complement","text":"","code":"reverse_complement(\"ATGCTAG\") #> [1] \"CTAGCAT\" reverse_complement(\"UUAUUAGC\", output_mode = \"RNA\") #> [1] \"GCUAAUAA\" reverse_complement(\"AcGtU\", output_mode = \"DNA\") #> [1] \"AACGT\" reverse_complement(\"aCgTU\", output_mode = \"RNA\") #> [1] \"AACGU\""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_locations_if_needed.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse modification locations if needed (merge_methylation_with_metadata() helper) — reverse_locations_if_needed","title":"Reverse modification locations if needed (merge_methylation_with_metadata() helper) — reverse_locations_if_needed","text":"function takes vector condensed modification locations/indices (e.g. c(\"3,6,9,12\", \"1,4,7,10\")), vector directions (must either \"forward\" \"reverse\", case-sensitive), vector sequence lengths (integers). Returns vector condensed locations reads originally forward unchanged, reads originally reverse flipped now forward. Optionally, numerical offset can set. left 0 (default value), CpG assessed methylation reverse-complemented CG modification information ascribed G (G location actual modified C strand). However, setting offset 1 shift modification indices 1 modification now ascribed C reverse-strand CG. beneficial visualising modifications ensures consistency originally-forward originally-reverse strands making modification score associated CpG site always located C, may misleading quantitative analysis. Setting offset anything 0 1 work may biologically misleading, produces warning. Called merge_methylation_with_metadata() create forward dataset, alongside reverse_sequence_if_needed(), reverse_quality_if_needed(), reverse_probabilities_if_needed().Example: Forward sequence, indices Cs CpGs numbered: (length = 19, locations = \"7,10,13,17\", CpGs = 7-8, 10-11, 13-14, 17-18) Reverse sequence, indices C CpGs numbered: (length = 19, locations = \"2,6,9,12\", CpGs = 2-3, 6-7, 9-10, 12-13) CG reverse-complements , CpG site 1:1 correspondence CpG site reverse strand. Many methylation calling models assess C-methylation C CpG. map locations C C, take 19 - <index> \"7,10,13,17\" becomes \"12,9,6,2\" \"2,6,9,12\" becomes \"17,13,10,7\". symmetry CpGs means mapping C C also symmetric. achieved setting offset = 1, mapping C C involves shifting position 1. Conversely, map locations C G (.e. preserving actual location modification, required assessed locations non-symmetric/reverse-complement like CpGs ), take 20 - <index> \"7,10,13,17\" becomes \"13,10,7,3\" .e. indices Gs CpGs reverse sequence. Likewise \"2,6,9,12\" becomes \"18,14,11,8\" .e. indices Gs CpGs forward sequence. achieved setting offset = 0, mapping C G preserves actual original position modification assessed, changes base complement. general, new locations calculated (<length> + 1 - <offset>) - <index>. course, output locations reversed returning return ascending order, standard location vectors/strings. wanting write reversed sequences FASTQ via write_modified_fastq(), locations must symmetric (e.g. CpG) offset must set 1. Asymmetric locations impossible write modified FASTQ reversed e.g. cytosine methylation assessed guanines, SAMtools account . Symmetrically reversing CpGs via offset = 1 way fix .","code":"C C C A G G C G G C G G C G A C C G A             7     10    13      17 T C G G T C G C C G C C G C C T G G G   2       6     9     12"},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_locations_if_needed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse modification locations if needed (merge_methylation_with_metadata() helper) — reverse_locations_if_needed","text":"","code":"reverse_locations_if_needed(   locations_vector,   direction_vector,   length_vector,   offset = 0 )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_locations_if_needed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse modification locations if needed (merge_methylation_with_metadata() helper) — reverse_locations_if_needed","text":"locations_vector character vector. locations reversed sequence/read. read one character value, representing comma-separated list indices modification assessed along read e.g. \"3,6,9,12\" Cs GGCGGCGGCGGC. comma-separated characters/strings can produced numeric vectors via vector_to_string() converted back vectors via string_to_vector(). direction_vector character vector. Whether sequence forward reverse. Must contain \"forward\" \"reverse\", case sensitive. Must length locations_vector length_vector. length_vector integer vector. length sequence. Needed reversing locations locations stored relative start read .e. relative end reverse read. Must length locations_vector direction_vector. offset integer. much locations shifted . Defaults 0. important CpG assessed methylation C, reverse complementing give methylation score G reverse-complemented strand. biologically accurate, visualising methylation may desired shift locations 1 .e. correspond C reverse-complemented CpG rather G, allows consistent visualisation forward reverse strands. Setting (integer) values 0 1 work, may biologically misleading recommended.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_locations_if_needed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse modification locations if needed (merge_methylation_with_metadata() helper) — reverse_locations_if_needed","text":"character vector. vector forward versions input locations vector.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_locations_if_needed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse modification locations if needed (merge_methylation_with_metadata() helper) — reverse_locations_if_needed","text":"","code":"reverse_locations_if_needed(     locations_vector = c(\"7,10,13,17\", \"2,6,9,12\"),     direction_vector = c(\"forward\", \"reverse\"),     length_vector = c(19, 19),     offset = 0 ) #> [1] \"7,10,13,17\" \"8,11,14,18\"  reverse_locations_if_needed(     locations_vector = c(\"7,10,13,17\", \"2,6,9,12\"),     direction_vector = c(\"forward\", \"reverse\"),     length_vector = c(19, 19),     offset = 1 ) #> [1] \"7,10,13,17\" \"7,10,13,17\""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_probabilities_if_needed.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse modification probabilities if needed (merge_methylation_with_metadata() helper) — reverse_probabilities_if_needed","title":"Reverse modification probabilities if needed (merge_methylation_with_metadata() helper) — reverse_probabilities_if_needed","text":"function takes vector condensed modification probabilities (e.g. c(\"128,0,63,255\", \"3,78,1\") vector directions (must either \"forward\" \"reverse\", case-sensitive), returns vector condensed modification probabilities originally forward unchanged, originally reverse flipped now forward. Called merge_methylation_with_metadata() create forward dataset, alongside reverse_sequence_if_needed(), reverse_quality_if_needed(), reverse_locations_if_needed().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_probabilities_if_needed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse modification probabilities if needed (merge_methylation_with_metadata() helper) — reverse_probabilities_if_needed","text":"","code":"reverse_probabilities_if_needed(probabilities_vector, direction_vector)"},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_probabilities_if_needed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse modification probabilities if needed (merge_methylation_with_metadata() helper) — reverse_probabilities_if_needed","text":"probabilities_vector character vector. probabilities reversed sequence/read. read one character value, representing comma-separated list modification probabilities assessed base along read e.g. \"230,7,64,145\". situations 8-bit integers 0 255, function work comma-separated values. comma-separated characters/strings can produced numeric vectors via vector_to_string() converted back vectors via string_to_vector(). direction_vector character vector. Whether sequence forward reverse. Must contain \"forward\" \"reverse\", case sensitive. Must length probabilities_vector.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_probabilities_if_needed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse modification probabilities if needed (merge_methylation_with_metadata() helper) — reverse_probabilities_if_needed","text":"character vector. vector forward versions input probabilities vector.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_probabilities_if_needed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse modification probabilities if needed (merge_methylation_with_metadata() helper) — reverse_probabilities_if_needed","text":"","code":"reverse_probabilities_if_needed(     probabilities_vector = c(\"100,200,50\", \"100,200,50\"),     direction_vector = c(\"forward\", \"reverse\") ) #> [1] \"100,200,50\" \"50,200,100\""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_quality_if_needed.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse qualities if needed (merge_methylation_with_metadata() helper) — reverse_quality_if_needed","title":"Reverse qualities if needed (merge_methylation_with_metadata() helper) — reverse_quality_if_needed","text":"function takes vector FASTQ qualities vector directions (must either \"forward\" \"reverse\", case-sensitive) returns vector forward qualities. Qualities reads forward begin unchanged, qualities reads reverse now flipped give corresponding forward quality scores. Called merge_methylation_with_metadata() create forward dataset, alongside reverse_sequence_if_needed(), reverse_locations_if_needed(), reverse_probabilities_if_needed().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_quality_if_needed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse qualities if needed (merge_methylation_with_metadata() helper) — reverse_quality_if_needed","text":"","code":"reverse_quality_if_needed(quality_vector, direction_vector)"},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_quality_if_needed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse qualities if needed (merge_methylation_with_metadata() helper) — reverse_quality_if_needed","text":"quality_vector character vector. qualities reversed. See fastq_quality_scores explanation quality scores. direction_vector character vector. Whether sequence forward reverse. Must contain \"forward\" \"reverse\", case sensitive. Must length sequence_vector.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_quality_if_needed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse qualities if needed (merge_methylation_with_metadata() helper) — reverse_quality_if_needed","text":"character vector. vector forward versions input quality vector.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_quality_if_needed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse qualities if needed (merge_methylation_with_metadata() helper) — reverse_quality_if_needed","text":"","code":"reverse_quality_if_needed(     quality_vector = c(\"#^$&$*\", \"#^$&$*\"),     direction_vector = c(\"reverse\", \"forward\") ) #> [1] \"*$&$^#\" \"#^$&$*\""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_sequence_if_needed.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse sequences if needed (merge_methylation_with_metadata() helper) — reverse_sequence_if_needed","title":"Reverse sequences if needed (merge_methylation_with_metadata() helper) — reverse_sequence_if_needed","text":"function takes vector DNA/RNA sequences vector directions (must either \"forward\" \"reverse\", case-sensitive) returns vector forward DNA/RNA sequences. Sequences vector forward begin unchanged, sequences reverse reverse-complemented via reverse_complement() produce forward sequence. Called merge_methylation_with_metadata() create forward dataset, alongside reverse_quality_if_needed(), reverse_locations_if_needed() reverse_probabilities_if_needed().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_sequence_if_needed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse sequences if needed (merge_methylation_with_metadata() helper) — reverse_sequence_if_needed","text":"","code":"reverse_sequence_if_needed(   sequence_vector,   direction_vector,   output_mode = \"DNA\" )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_sequence_if_needed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse sequences if needed (merge_methylation_with_metadata() helper) — reverse_sequence_if_needed","text":"sequence_vector character vector. DNA RNA sequences reversed, e.g. c(\"ATCG\", \"GGCGGC\", \"AUUAUA\"). Accepts DNA, RNA, mixed input. direction_vector character vector. Whether sequence forward reverse. Must contain \"forward\" \"reverse\", case sensitive. Must length sequence_vector. output_mode character. Whether reverse-complemented sequences converted DNA (.e. complements T) RNA (.e. complements U). Must either \"DNA\" \"RNA\". affects reverse-complemented sequences. Sequences forward begin altered.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_sequence_if_needed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse sequences if needed (merge_methylation_with_metadata() helper) — reverse_sequence_if_needed","text":"character vector. vector forward versions input sequence vector.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/reverse_sequence_if_needed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse sequences if needed (merge_methylation_with_metadata() helper) — reverse_sequence_if_needed","text":"","code":"reverse_sequence_if_needed(     sequence_vector = c(\"TAAGGC\", \"TAAGGC\"),     direction_vector = c(\"reverse\", \"forward\") ) #> [1] \"GCCTTA\" \"TAAGGC\"  reverse_sequence_if_needed(     sequence_vector = c(\"UAAGGC\", \"UAAGGC\"),     direction_vector = c(\"reverse\", \"forward\"),     output_mode = \"RNA\" ) #> [1] \"GCCUUA\" \"UAAGGC\""},{"path":"https://ejade42.github.io/ggDNAvis/reference/sequence_colour_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Colour palettes for sequence visualisations — sequence_colour_palettes","title":"Colour palettes for sequence visualisations — sequence_colour_palettes","text":"collection colour palettes use visualise_single_sequence() visualise_many_sequences(). character vector 4 colours, corresponding , C, G, T/U order. use inside visualisation functions, set sequence_colours = sequence_colour_palettes$<palette_name> Generation code available data-raw/sequence_colour_palettes.R","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/sequence_colour_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colour palettes for sequence visualisations — sequence_colour_palettes","text":"","code":"sequence_colour_palettes"},{"path":[]},{"path":"https://ejade42.github.io/ggDNAvis/reference/sequence_colour_palettes.html","id":"sequence-colour-palettes","dir":"Reference","previous_headings":"","what":"sequence_colour_palettes","title":"Colour palettes for sequence visualisations — sequence_colour_palettes","text":"list 5 length-4 character vectors ggplot_style shades red, green, blue, purple ggplot2::ggplot() uses default 4-way discrete colour scheme. Values: c(\"#F8766D\", \"#7CAE00\", \"#00BFC4\", \"#C77CFF\") bright_pale Bright yellow, green, blue, red lighter pastel-like tones. Values: c(\"#FFDD00\", \"#40C000\", \"#00A0FF\", \"#FF4E4E\") bright_pale2 Bright yellow, green, blue, red lighter pastel-like tones. green (C) slightly ligther bright_pale. Values: c(\"#FFDD00\", \"#30EC00\", \"#00A0FF\", \"#FF4E4E\") bright_deep Bright orange, green, blue, red darker, richer tones. Values: c(\"#FFAA00\", \"#00BC00\", \"#0000DC\", \"#FF1E1E\") sanger Green, blue, black, red similar traditional Sanger sequencing readout. Values: c(\"#00B200\", \"#0000FF\", \"#000000\", \"#FF0000\")","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/string_to_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a ","title":"Split a ","text":"Takes string (character) produced vector_to_string() recreates vector. Note vector multiple strings input (e.g. c(\"1,2,3\", \"9,8,7\")) output single concatenated vector (e.g. c(1, 2, 3, 9, 8, 7)). desired output list vectors, try lapply() e.g. lapply(c(\"1,2,3\", \"9,8,7\"), string_to_vector) returns list(c(1, 2, 3), c(9, 8, 7)).","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/string_to_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a ","text":"","code":"string_to_vector(string, type = \"numeric\", sep = \",\")"},{"path":"https://ejade42.github.io/ggDNAvis/reference/string_to_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a ","text":"string character. comma-separated string (e.g. \"1,2,3\") convert back vector. type character. type vector returned .e. \"numeric\" (default), \"character\", \"logical\". sep character. character used separate values string. Defaults \",\". set anything might occur within one values.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/string_to_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a ","text":"<type> vector. resulting vector (e.g. c(1, 2, 3)).","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/string_to_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a ","text":"","code":"## String to numeric vector (default) string_to_vector(\"1,2,3,4\") #> [1] 1 2 3 4 string_to_vector(\"1,2,3,4\", type = \"numeric\") #> [1] 1 2 3 4 string_to_vector(\"1;2;3;4\", sep = \";\") #> [1] 1 2 3 4  ## String to character vector string_to_vector(\"A,B,C,D\", type = \"character\") #> [1] \"A\" \"B\" \"C\" \"D\"  ## String to logical vector string_to_vector(\"TRUE FALSE TRUE\", type = \"logical\", sep = \" \") #> [1]  TRUE FALSE  TRUE  ## By default, vector inputs are concatenated string_to_vector(c(\"1,2,3\", \"4,5,6\")) #> [1] 1 2 3 4 5 6  ## To create a list of vector outputs, use lapply() lapply(c(\"1,2,3\", \"4,5,6\"), string_to_vector) #> [[1]] #> [1] 1 2 3 #>  #> [[2]] #> [1] 4 5 6 #>"},{"path":"https://ejade42.github.io/ggDNAvis/reference/vector_to_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Join a vector into a comma-separated string (generic ggDNAvis helper) — vector_to_string","title":"Join a vector into a comma-separated string (generic ggDNAvis helper) — vector_to_string","text":"Takes vector condenses single string joining items \",\". Reversed string_to_vector().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/vector_to_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join a vector into a comma-separated string (generic ggDNAvis helper) — vector_to_string","text":"","code":"vector_to_string(vector, sep = \",\")"},{"path":"https://ejade42.github.io/ggDNAvis/reference/vector_to_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join a vector into a comma-separated string (generic ggDNAvis helper) — vector_to_string","text":"vector vector. vector (e.g. c(1,2,3)) convert string. sep character. character used separate values string. Defaults \",\". set anything might occur within one values.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/vector_to_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join a vector into a comma-separated string (generic ggDNAvis helper) — vector_to_string","text":"character. vector comma-separated string (e.g. \"1,2,3\").","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/vector_to_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join a vector into a comma-separated string (generic ggDNAvis helper) — vector_to_string","text":"","code":"vector_to_string(c(1, 2, 3, 4)) #> [1] \"1,2,3,4\" vector_to_string(c(\"These\", \"are\", \"some\", \"words\")) #> [1] \"These,are,some,words\" vector_to_string(3:5, sep = \";\") #> [1] \"3;4;5\""},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_many_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise many DNA/RNA sequences — visualise_many_sequences","title":"Visualise many DNA/RNA sequences — visualise_many_sequences","text":"function takes vector DNA/RNA sequences (sequence can length can different lengths), plots sequence base-coloured squares along single line. Setting filename allows direct export png image correct dimensions make every base perfect square. Empty strings (\"\") within vector can utilised blank spacing lines. Colours pixels per square exported configurable.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_many_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise many DNA/RNA sequences — visualise_many_sequences","text":"","code":"visualise_many_sequences(   sequences_vector,   sequence_colours = sequence_colour_palettes$ggplot_style,   background_colour = \"white\",   margin = 0.5,   sequence_text_colour = \"black\",   sequence_text_size = 16,   outline_colour = \"black\",   outline_linewidth = 3,   outline_join = \"mitre\",   return = TRUE,   filename = NA,   render_device = ragg::agg_png,   pixels_per_base = 100 )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_many_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise many DNA/RNA sequences — visualise_many_sequences","text":"sequences_vector character vector. sequences visualise, often created dataframe via extract_and_sort_sequences(). E.g. c(\"GGCGGC\", \"\", \"AGCTAGCTA\"). sequence_colours character vector, length 4. vector indicating colours used base. order: c(A_colour, C_colour, G_colour, T/U_colour). Defaults red, green, blue, purple default shades produced ggplot 4 colours, .e. c(\"#F8766D\", \"#7CAE00\", \"#00BFC4\", \"#C77CFF\"), accessed via sequence_colour_palettes$ggplot_style. background_colour character. colour background. Defaults white. margin numeric. size margin relative size base square. Defaults 0.5 (half side length base square). small margins (\\(\\le\\)0.25) may cause thick outlines cut edges plot. Recommended either use wider margin smaller outline_linewidth. sequence_text_colour character. colour text within bases (e.g. colour \"\" letter within boxes representing adenosine bases). Defaults black. sequence_text_size numeric. size text within bases (e.g. size \"\" letter within boxes representing adenosine bases). Defaults 16. Set 0 hide sequence text (show box colours ). outline_colour character. colour box outlines. Defaults black. outline_linewidth numeric. linewidth box outlines. Defaults 3. Set 0 disable box outlines. outline_join character. One \"mitre\", \"round\", \"bevel\" specifying outlines joined corners boxes. Defaults \"mitre\". unusual need change . return logical. Boolean specifying whether function return ggplot object, otherwise return invisible(NULL). Defaults TRUE. filename character. Filename output saved. set NA (default), file saved. Recommended end \".png\", can change render device changed. render_device function/character. Device use rendering. See ggplot2::ggsave() documentation options. Defaults ragg::agg_png. Can set NULL infer file extension, results may vary systems. pixels_per_base integer. large box pixels, file output turned via setting filename. Corresponds dpi exported image. text shown (.e. sequence_text_size 0), needs fairly large otherwise text blurry. Defaults 100.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_many_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise many DNA/RNA sequences — visualise_many_sequences","text":"ggplot object containing full visualisation, invisible(NULL) return = FALSE. often useful use filename = \"myfilename.png\", visualisation exported correct aspect ratio.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_many_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise many DNA/RNA sequences — visualise_many_sequences","text":"","code":"# \\donttest{ ## Create sequences vector sequences <- extract_and_sort_sequences(example_many_sequences)  ## Visualise example_many_sequences with all defaults ## This looks ugly because it isn't at the right scale/aspect ratio visualise_many_sequences(sequences)   ## Export with all defaults rather than returning visualise_many_sequences(     sequences,     filename = \"example_vms_01.png\",     return = FALSE ) ## View exported image image <- png::readPNG(\"example_vms_01.png\") unlink(\"example_vms_01.png\") grid::grid.newpage() grid::grid.raster(image)   ## Export while customising appearance visualise_many_sequences(     sequences,     filename = \"example_vms_02.png\",     return = FALSE,     sequence_colours = sequence_colour_palettes$bright_pale,     sequence_text_colour = \"white\",     background_colour = \"lightgrey\",     outline_linewidth = 0,     margin = 0 ) ## View exported image image <- png::readPNG(\"example_vms_02.png\") unlink(\"example_vms_02.png\") grid::grid.newpage() grid::grid.raster(image)  # }"},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_methylation.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise methylation probabilities for many DNA sequences — visualise_methylation","title":"Visualise methylation probabilities for many DNA sequences — visualise_methylation","text":"function takes vectors modifications locations, modification probabilities, sequence lengths (e.g. created extract_methylation_from_dataframe()) visualises probability methylation (modification) across read. Assumes three main input vectors equal length n represent n sequences (e.g. Nanopore reads), locations indices along read modification assessed, probabilities probability modification assessed site, lengths lengths sequence. sequence, renders non-assessed (e.g. non-CpG) bases other_bases_colour, renders background (including end sequence) background_colour, renders assessed bases linear scale low_colour high_colour. Clamping means endpoints colour gradient can set distance probability space e.g. Nanopore > SAM probability values 0-255, default render 0 fully blue (#0000FF), 255 fully red (#FF0000), values linearly interpolated. However, clamping low_clamp = 100 high_clamp = 200 set probabilities 100 fully blue, probabilities 200 fully red, linearly interpolate 100-200 range. separate scalebar plot showing colours corresponding probability, /clamping values, can produced via visualise_methylation_colour_scale().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_methylation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise methylation probabilities for many DNA sequences — visualise_methylation","text":"","code":"visualise_methylation(   modification_locations,   modification_probabilities,   sequence_lengths,   low_colour = \"blue\",   high_colour = \"red\",   low_clamp = 0,   high_clamp = 255,   background_colour = \"white\",   other_bases_colour = \"grey\",   outline_colour = \"black\",   outline_linewidth = 3,   outline_join = \"mitre\",   modified_bases_outline_colour = NA,   modified_bases_outline_linewidth = NA,   modified_bases_outline_join = NA,   other_bases_outline_colour = NA,   other_bases_outline_linewidth = NA,   other_bases_outline_join = NA,   margin = 0.5,   return = TRUE,   filename = NA,   render_device = ragg::agg_png,   pixels_per_base = 20 )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_methylation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise methylation probabilities for many DNA sequences — visualise_methylation","text":"modification_locations character vector. One character value sequence, storing condensed string (e.g. \"3,6,9,12\", produced via vector_to_string()) indices along read modification assessed. Indexing starts 1. modification_probabilities character vector. One character value sequence, storing condensed string (e.g. \"0,128,255,15\", produced via vector_to_string()) probability methylation/modification assessed base. Assumed Nanopore > SAM style modification stored 8-bit integer 0 255, changing arguments make work scales. sequence_lengths numeric vector. length sequence. low_colour character. colour used represent minimum probability methylation/modification (defaults blue). high_colour character. colour used represent maximum probability methylation/modification (defaults red). low_clamp numeric. minimum probability values coloured low_colour. Defaults 0 (.e. clamping). specify proportion probability 8-bit form, multiply 255 e.g. low-clamp 30% probability, set 0.3*255. high_clamp numeric. maximum probability values coloured high_colour. Defaults 255 (.e. clamping, assuming Nanopore > SAM style modification calling probabilities 8-bit integers 0 255). background_colour character. colour background drawn (defaults white). other_bases_colour character. colour non-assessed (e.g. non-CpG) bases drawn (defaults grey). outline_colour character. colour box outlines. Defaults black. outline_linewidth numeric. linewidth box outlines. Defaults 3. Set 0 disable box outlines. outline_join character. One \"mitre\", \"round\", \"bevel\" specifying outlines joined corners boxes. Defaults \"mitre\". unusual need change . modified_bases_outline_colour character. NA (default), inherits outline_colour. NA, overrides outline_colour modification-assessed bases . modified_bases_outline_linewidth numeric. NA (default), inherits outline_linewidth. NA, overrides outline_linewidth modification-assessed bases . modified_bases_outline_join character. NA (default), inherits outline_join. NA, overrides outline_join modification-assessed bases . other_bases_outline_colour character. NA (default), inherits outline_colour. NA, overrides outline_colour non-modification-assessed bases . other_bases_outline_linewidth numeric. NA (default), inherits outline_linewidth. NA, overrides outline_linewidth non-modification-assessed bases . other_bases_outline_join character. NA (default), inherits outline_join. NA, overrides outline_join non-modification-assessed bases . margin numeric. size margin relative size base square. Defaults 0.5 (half side length base square). return logical. Boolean specifying whether function return ggplot object, otherwise return invisible(NULL). Defaults TRUE. filename character. Filename output saved. set NA (default), file saved. Recommended end \".png\", can change render device changed. render_device function/character. Device use rendering. See ggplot2::ggsave() documentation options. Defaults ragg::agg_png. Can set NULL infer file extension, results may vary systems. pixels_per_base integer. large box pixels, file output turned via setting filename. Corresponds dpi exported image. Defaults 20. Low values acceptable currently function write text.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_methylation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise methylation probabilities for many DNA sequences — visualise_methylation","text":"ggplot object containing full visualisation, invisible(NULL) return = FALSE. often useful use filename = \"myfilename.png\", visualisation exported correct aspect ratio.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_methylation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise methylation probabilities for many DNA sequences — visualise_methylation","text":"","code":"# \\donttest{ ## Extract info from dataframe methylation_info <- extract_methylation_from_dataframe(example_many_sequences)  ## Visualise example_many_sequences with all defaults ## This looks ugly because it isn't at the right scale/aspect ratio visualise_methylation(     methylation_info$locations,     methylation_info$probabilities,     methylation_info$lengths )   ## Export with all defaults rather than returning visualise_methylation(     methylation_info$locations,     methylation_info$probabilities,     methylation_info$lengths,     filename = \"example_vm_01.png\",     return = FALSE ) ## View exported image image <- png::readPNG(\"example_vm_01.png\") unlink(\"example_vm_01.png\") grid::grid.newpage() grid::grid.raster(image)   ## Export with customisation visualise_methylation(     methylation_info$locations,     methylation_info$probabilities,     methylation_info$lengths,     filename = \"example_vm_02.png\",     return = FALSE,     low_colour = \"white\",     high_colour = \"black\",     low_clamp = 0.3*255,     high_clamp = 0.7*255,     other_bases_colour = \"lightblue1\",     other_bases_outline_linewidth = 1,     other_bases_outline_colour = \"grey\",     modified_bases_outline_linewidth = 3,     modified_bases_outline_colour = \"black\",     margin = 0.3 ) ## View exported image image <- png::readPNG(\"example_vm_02.png\") unlink(\"example_vm_02.png\") grid::grid.newpage() grid::grid.raster(image)  # }"},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_methylation_colour_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise methylation colour scalebar — visualise_methylation_colour_scale","title":"Visualise methylation colour scalebar — visualise_methylation_colour_scale","text":"function creates scalebar showing colouring scheme based methylation probability used visualise_methylation(). Showing particularly important colour range clamped via low_clamp high_clamp (e.g. setting values 100 fully blue (#0000FF), values 200 fully red (#FF0000), colour interpolation occurs range 100-200, rather across whole range 0-255). clamping (default), 0 fully blue, 255 fully read, values linearly interpolated. NB: colours configurable default blue = low modification probability red = high modification probability.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_methylation_colour_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise methylation colour scalebar — visualise_methylation_colour_scale","text":"","code":"visualise_methylation_colour_scale(   low_colour = \"blue\",   high_colour = \"red\",   low_clamp = 0,   high_clamp = 255,   full_range = c(0, 255),   precision = 10^3,   background_colour = \"white\",   x_axis_title = NULL,   do_x_ticks = TRUE,   do_side_scale = FALSE,   side_scale_title = NULL,   outline_colour = \"black\",   outline_linewidth = 1 )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_methylation_colour_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise methylation colour scalebar — visualise_methylation_colour_scale","text":"low_colour character. colour used represent minimum probability methylation/modification (defaults blue). high_colour character. colour used represent maximum probability methylation/modification (defaults red). low_clamp numeric. minimum probability values coloured low_colour. Defaults 0 (.e. clamping). high_clamp numeric. maximum probability values coloured high_colour. Defaults 255 (.e. clamping, assuming Nanopore > SAM style modification calling probabilities 8-bit integers 0 255). full_range numeric vector, length 2. total range possible probabilities. Defaults c(0, 255), appropriate Nanopore > SAM style modification calling probabilities 8-bit integers 0 255. May need set c(0, 1) probabilites instead stored decimals. Setting value advanced use done good reason. precision integer. many different shades rendered. Larger values give smoother gradient. Defaults 10^3 .e. 1000, looks smooth eyes intensive calculate. background_colour character. colour background drawn (defaults white). x_axis_title character. desired x-axis title. Defaults NULL. do_x_ticks logical. Boolean specifying whether x axis ticks enabled (TRUE, default) disabled (FALSE). do_side_scale logical. Boolean specifying whether smaller scalebar rendered right. Defaults FALSE. think unlikely anyone want use , option . One potential usecase scalebar shows raw probability values (e.g. 0 255), whereas x-axis normalised 0-1. side_scale_title character. desired title right-hand scalebar, turned . Defaults NULL. outline_colour character. colour scalebar outline. Defaults black. outline_linewidth numeric. linewidth scalebar outline. Defaults 1. Set 0 disable scalebar outline.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_methylation_colour_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise methylation colour scalebar — visualise_methylation_colour_scale","text":"ggplot scalebar. Unlike visualise_<> functions package, directly export png. squares need rendered precise aspect ratio function. can just saved normally ggplot2::ggsave() sensible combination height width.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_methylation_colour_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise methylation colour scalebar — visualise_methylation_colour_scale","text":"","code":"## Defaults match defaults of visualise_methylation() visualise_methylation_colour_scale()   ## Use clamping and change colours visualise_methylation_colour_scale(     low_colour = \"white\",     high_colour = \"black\",     low_clamp = 0.3*255,     high_clamp = 0.7*255,     full_range = c(0, 255),     background_colour = \"lightblue1\",     x_axis_title = \"Methylation probability\" )   ## Lower precision = colour banding visualise_methylation_colour_scale(     precision = 10,     do_x_ticks = FALSE )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_single_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise a single DNA/RNA sequence — visualise_single_sequence","title":"Visualise a single DNA/RNA sequence — visualise_single_sequence","text":"function takes DNA/RNA sequence returns ggplot visualising , option directly export png image appropriate dimensions. Colours, line wrapping, index annotation interval, pixels per square exported configurable.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_single_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise a single DNA/RNA sequence — visualise_single_sequence","text":"","code":"visualise_single_sequence(   sequence,   sequence_colours = sequence_colour_palettes$ggplot_style,   background_colour = \"white\",   line_wrapping = 75,   spacing = 1,   margin = 0.5,   sequence_text_colour = \"black\",   sequence_text_size = 16,   index_annotation_colour = \"darkred\",   index_annotation_size = 12.5,   index_annotation_interval = 15,   index_annotations_above = TRUE,   index_annotation_vertical_position = 1/3,   outline_colour = \"black\",   outline_linewidth = 3,   outline_join = \"mitre\",   return = TRUE,   filename = NA,   render_device = ragg::agg_png,   pixels_per_base = 100 )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_single_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise a single DNA/RNA sequence — visualise_single_sequence","text":"sequence character. DNA RNA sequence visualise e.g. \"AAATGCTGC\". sequence_colours character vector, length 4. vector indicating colours used base. order: c(A_colour, C_colour, G_colour, T/U_colour). Defaults red, green, blue, purple default shades produced ggplot 4 colours, .e. c(\"#F8766D\", \"#7CAE00\", \"#00BFC4\", \"#C77CFF\"), accessed via sequence_colour_palettes$ggplot_style. background_colour character. colour background. Defaults white. line_wrapping integer. number bases line wrapping. Defaults 75. Recommended make multiple repeat unit size (e.g. 3n trinucleotide repeat) visualising repeat sequence. spacing integer. number blank lines line sequence. Defaults 1. careful setting 0 means annotations space might render strangely. Recommended set index_annotation_interval = 0 disable annotations entirely. margin numeric. size margin relative size base square. Defaults 0.5 (half side length base square). Note index annotations (.e. index_annotation_interval 0), top/bottom margin (depending index_annotations_above) always least 1 leave space . Likewise, small margins (\\(\\le\\)0.25) may cause thick outlines cut edges plot. Recommended either use wider margin smaller outline_linewidth. sequence_text_colour character. colour text within bases (e.g. colour \"\" letter within boxes representing adenosine bases). Defaults black. sequence_text_size numeric. size text within bases (e.g. size \"\" letter within boxes representing adenosine bases). Defaults 16. Set 0 hide sequence text (show box colours ). index_annotation_colour character. colour little numbers underneath indicating base index (e.g. colour \"15\" label 15th base). Defaults dark red. index_annotation_size numeric. size little number underneath indicating base index (e.g. size \"15\" label 15th base). Defaults 12.5. Can sometimes set 0 turn annotations, better/reliable via index_annotation_interval = 0. index_annotation_interval integer. frequency numbers placed underneath indicating base index, starting counting leftmost base row. Defaults 15 (every 15 bases along row). Recommended make factor/divisor line wrapping length (meaning final base line annotated), otherwise numbering interval resetting beginning row result uneven intervals line break. Set 0 turn annotations (preferable using index_annotation_size = 0). index_annotations_above logical. Whether index annotations go (TRUE, default) (FALSE) line sequence. index_annotation_vertical_position numeric. far annotation numbers rendered (index_annotations_above = TRUE) (index_annotations_above = FALSE) base. Defaults 1/3. recommended change . Strongly discouraged set 0 1. outline_colour character. colour box outlines. Defaults black. outline_linewidth numeric. linewidth box outlines. Defaults 3. Set 0 disable box outlines. outline_join character. One \"mitre\", \"round\", \"bevel\" specifying outlines joined corners boxes. Defaults \"mitre\". unusual need change . return logical. Boolean specifying whether function return ggplot object, otherwise return invisible(NULL). Defaults TRUE. filename character. Filename output saved. set NA (default), file saved. Recommended end \".png\", can change render device changed. render_device function/character. Device use rendering. See ggplot2::ggsave() documentation options. Defaults ragg::agg_png. Can set NULL infer file extension, results may vary systems. pixels_per_base integer. large box pixels, file output turned via setting filename. Corresponds dpi exported image. Large values recommended text needs legible rendered significantly smaller box. Defaults 100.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_single_sequence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise a single DNA/RNA sequence — visualise_single_sequence","text":"ggplot object containing full visualisation, invisible(NULL) return = FALSE. often useful use filename = \"myfilename.png\", visualisation exported correct aspect ratio.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/visualise_single_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise a single DNA/RNA sequence — visualise_single_sequence","text":"","code":"# \\donttest{ ## Create sequence to visualise sequence <- paste(c(rep(\"GGC\", 72), rep(\"GGAGGAGGCGGC\", 15)), collapse = \"\")  ## Visualise with all defaults ## This looks ugly because it isn't at the right scale/aspect ratio visualise_single_sequence(sequence)   ## Export with all defaults rather than returning visualise_single_sequence(     sequence,     filename = \"example_vss_01.png\",     return = FALSE ) ## View exported image image <- png::readPNG(\"example_vss_01.png\") unlink(\"example_vss_01.png\") grid::grid.newpage() grid::grid.raster(image)   ## Export while customising appearance visualise_single_sequence(     sequence,     filename = \"example_vss_02.png\",     return = FALSE,     sequence_colours = sequence_colour_palettes$bright_pale,     sequence_text_colour = \"white\",     background_colour = \"lightgrey\",     line_wrapping = 60,     spacing = 2,     outline_linewidth = 0,     index_annotations_above = FALSE,     margin = 0 ) ## View exported image image <- png::readPNG(\"example_vss_02.png\") unlink(\"example_vss_02.png\") grid::grid.newpage() grid::grid.raster(image)  # }"},{"path":"https://ejade42.github.io/ggDNAvis/reference/write_fastq.html","id":null,"dir":"Reference","previous_headings":"","what":"Write sequence and quality information to FASTQ — write_fastq","title":"Write sequence and quality information to FASTQ — write_fastq","text":"function simply writes FASTQ file dataframe containing columns read ID, sequence, quality scores. See fastq_quality_scores explanation quality. Said dataframe can produced FASTQ via read_fastq(). read/write modified FASTQ containing modification information (SAM/BAM MM ML tags) header lines, use read_modified_fastq() write_modified_fastq().","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/write_fastq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write sequence and quality information to FASTQ — write_fastq","text":"","code":"write_fastq(   dataframe,   filename = NA,   read_id_colname = \"read\",   sequence_colname = \"sequence\",   quality_colname = \"quality\",   return = FALSE )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/write_fastq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write sequence and quality information to FASTQ — write_fastq","text":"dataframe dataframe. Dataframe containing modification information write back modified FASTQ. Must columns unique read ID DNA sequence. also column quality, unless wanting fill qualities \"B\". filename character. File write FASTQ . Recommended end .fastq (warns works ). set NA (default), file output, may useful testing/debugging. read_id_colname character. name column within dataframe contains unique ID read. Defaults \"read\". sequence_colname character. name column within dataframe contains DNA sequence read. Defaults \"sequence\". values within column must DNA sequences e.g. \"GGCGGC\". quality_colname character. name column within dataframe contains FASTQ quality scores read. Defaults \"quality\". scores known, can set NA fill quality \"B\". NA, must correspond column values FASTQ quality scores e.g. \"$12\\\">/2C;4:9F8:816E,6C3*,\" - see fastq_quality_scores. return logical. Boolean specifying whether function return FASTQ (character vector line FASTQ), otherwise return invisible(NULL). Defaults FALSE.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/write_fastq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write sequence and quality information to FASTQ — write_fastq","text":"character vector. resulting FASTQ file character vector constituent lines (invisible(NULL) return FALSE). probably mostly useful debugging, setting filename within function directly writes FASTQ via writeLines(). Therefore, defaults returning invisible(NULL).","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/write_fastq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write sequence and quality information to FASTQ — write_fastq","text":"","code":"## Write to FASTQ (using filename = NA, return = FALSE ## to view as char vector rather than writing to file) write_fastq(     example_many_sequences,     filename = NA,     read_id_colname = \"read\",     sequence_colname = \"sequence\",     quality_colname = \"quality\",     return = TRUE ) #>  [1] \"F1-1a\"                                                                                                  #>  [2] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\" #>  [3] \"+\"                                                                                                      #>  [4] \")8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90\" #>  [5] \"F1-1b\"                                                                                                  #>  [6] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                        #>  [7] \"+\"                                                                                                      #>  [8] \"60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\\\">/2C;4:9F8:816E,6C3*,1-2139\"                                       #>  [9] \"F1-1c\"                                                                                                  #> [10] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                #> [11] \"+\"                                                                                                      #> [12] \";F42DF52#C-*I75!4?9>IA0<30!-:I:;+7!:<7<8=G@5*91D%193/2;><IA8.I<.722,68*!25;69*<<8C9889@\"                #> [13] \"F1-1d\"                                                                                                  #> [14] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                      #> [15] \"+\"                                                                                                      #> [16] \":<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0\"                      #> [17] \"F1-1e\"                                                                                                  #> [18] \"GGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"          #> [19] \"+\"                                                                                                      #> [20] \";4*2E3-48?@6A-!00!;-3%:H,4H>H530C(85I/&75-62.:2#!/D=A?8&7E!-@:=::5,)51,97D*04'2.!20@/;6)947<6\"          #> [21] \"F1-2a\"                                                                                                  #> [22] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                        #> [23] \"+\"                                                                                                      #> [24] \"E6(<)\\\"-./EE<(5:47,(C818I9CC1=.&)4G6-7<(*\\\"(,2C>8/5:0@@).A$97I!-<\"                                      #> [25] \"F1-2b\"                                                                                                  #> [26] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                  #> [27] \"+\"                                                                                                      #> [28] \"F='I#*5I:<F?)<4G3&:95*-5?1,!:9BD4B5.-27577<2E9)2:189B.5/*#7;;'**.7;-!\"                                  #> [29] \"F1-3a\"                                                                                                  #> [30] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                #> [31] \"+\"                                                                                                      #> [32] \"?;.*26<C-8B,3#8/,-9!1++:94:/!A317=9>502=-+8;$=53@D*?/6:6&0D7-.@8,5;F,1?0D?$9'&665B8.604\"                #> [33] \"F1-3b\"                                                                                                  #> [34] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                      #> [35] \"+\"                                                                                                      #> [36] \"*46.5//3:37?24:(:0*#.))E)?:,/172=2!4\\\">.*/;\\\"8+5<;D6.I2=>:C3)108,<)GC161)!55E!.>86/\"                    #> [37] \"F1-3c\"                                                                                                  #> [38] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGA\"                   #> [39] \"+\"                                                                                                      #> [40] \"736/A@B121C269<2I,'5G66>46A6-9*&4*;4-E4C429?I+3@83(234E0%:43;!/3;2+956A0)(+'5G4=*3;1\"                   #> [41] \"F2-1a\"                                                                                                  #> [42] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"          #> [43] \"+\"                                                                                                      #> [44] \"=<\/-I354/,*>+<CA40*537/;<@I7/4%6192'5'>#4:&C,072+90:0+4;74\\\"D5,38&<7A?00+1>G>#=?;,@<<1=64D=!1&\"         #> [45] \"F2-2a\"                                                                                                  #> [46] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                   #> [47] \"+\"                                                                                                      #> [48] \";1>:5417*<1.2H#260197.;7<(-3?0+=:)ID'I$6*128*!4.7-=5;+384F!=5>4!93+.6I7+H1-).H><68;7\"                   #> [49] \"F2-2b\"                                                                                                  #> [50] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                #> [51] \"+\"                                                                                                      #> [52] \"7?38,EC#3::=1)8&;<\\\">3.9BE)1661!2)5-4.11B<3)?')-+,B4.<7)/:IE=5$.3:66G9216-C20,>(0848(1$-\"               #> [53] \"F2-2c\"                                                                                                  #> [54] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"             #> [55] \"+\"                                                                                                      #> [56] \"@86,/+6=8/;9=1)48E494IB3456/6.*=<\/B32+5469>8?@!1;*+81$>-99D7<@1$6B'?462?CE+=1+95=G?.6CA%>2\"             #> [57] \"F3-1a\"                                                                                                  #> [58] \"GGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [59] \"+\"                                                                                                      #> [60] \"/*2<C643?*8?@9)-.'5A!=3-=;6,.%H3-!10'I>&@?;96;+/+36;:C;B@/=:6,;61>?>!,>.97@.48B38(;7;1F464=-7;)7\"       #> [61] \"F3-1b\"                                                                                                  #> [62] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [63] \"+\"                                                                                                      #> [64] \"/C<$>7/1(9%4:6>6I,D%*,&D?C/6@@;7)83.E.7:@9I906<!4536!850!164/8,<=?=15A;8B/5B364A66.1%9=(9876E8C:\"       #> [65] \"F3-2a\"                                                                                                  #> [66] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"          #> [67] \"+\"                                                                                                      #> [68] \":0I4099<,4E01;/@96%2I2<,%<C&=81F+4<*@4A5.('4!%I3CE657<=!5;37>4D:%3;7'\\\"4<.9;?;7%0>:,84B512,B7/\"         #> [69] \"F3-2b\"                                                                                                  #> [70] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA\"             #> [71] \"+\"                                                                                                      #> [72] \"9>124!752+@06I/.72097*';-+A60=B?+/8'15477>4-435D;G@G'./21:(0/1/A=7'I>A\\\"3=9;;12,@\\\"2=3D=,458\"           #> [73] \"F3-2c\"                                                                                                  #> [74] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                #> [75] \"+\"                                                                                                      #> [76] \"0/2>@/6+-/(!=9-?G!AA70*,/!/?-E46:,-1G94*491,,38?(-!6<8A;/C9;,3)4C06=%',86A)1!E@/24G59<<\"                #> [77] \"F3-3a\"                                                                                                  #> [78] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [79] \"+\"                                                                                                      #> [80] \"$<,5\\\"7+!$';8<0794*@FI>34224!57+#1!F<+53$,?)-.A3;=1*71C02<.5:1)82!86$03/;%+1C3+D3;@9B-E#+/70;9<D'\"      #> [81] \"F3-4a\"                                                                                                  #> [82] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [83] \"+\"                                                                                                      #> [84] \"?2-#-2\\\"1:(5(4>!I)>I,.?-+EG3IH4-.C:;570@2I;?D5#/;A7=>?<3?080::459*?8:3\\\"<2;I)C1400)6:3%19./);.I?35\"     #> [85] \"F3-4b\"                                                                                                  #> [86] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA\"                      #> [87] \"+\"                                                                                                      #> [88] \".85$#;!1F$8E:B+;7CI6@11/'65<3,4G:8@GF1413:0)3CH1=44.%G=#2E67=?;9DF7358.;(I!74:1I4\"                      #> [89] \"F3-4c\"                                                                                                  #> [90] \"GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA\"             #> [91] \"+\"                                                                                                      #> [92] \"5@<733';9+3BB)=69,3!.2B*86'8E>@3?!(36:<002/4>:1.43A!+;<.3G*G8?0*991,B(C/\\\"I9*1-86)8.;;5-0+=\"             ## quality_colname = NA fills in quality with \"B\" write_fastq(     example_many_sequences,     filename = NA,     read_id_colname = \"read\",     sequence_colname = \"sequence\",     quality_colname = NA,     return = TRUE ) #>  [1] \"F1-1a\"                                                                                                  #>  [2] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\" #>  [3] \"+\"                                                                                                      #>  [4] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\" #>  [5] \"F1-1b\"                                                                                                  #>  [6] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                        #>  [7] \"+\"                                                                                                      #>  [8] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                        #>  [9] \"F1-1c\"                                                                                                  #> [10] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                #> [11] \"+\"                                                                                                      #> [12] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                #> [13] \"F1-1d\"                                                                                                  #> [14] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                      #> [15] \"+\"                                                                                                      #> [16] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                      #> [17] \"F1-1e\"                                                                                                  #> [18] \"GGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"          #> [19] \"+\"                                                                                                      #> [20] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"          #> [21] \"F1-2a\"                                                                                                  #> [22] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                        #> [23] \"+\"                                                                                                      #> [24] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                        #> [25] \"F1-2b\"                                                                                                  #> [26] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                  #> [27] \"+\"                                                                                                      #> [28] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                  #> [29] \"F1-3a\"                                                                                                  #> [30] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                #> [31] \"+\"                                                                                                      #> [32] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                #> [33] \"F1-3b\"                                                                                                  #> [34] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                      #> [35] \"+\"                                                                                                      #> [36] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                      #> [37] \"F1-3c\"                                                                                                  #> [38] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGA\"                   #> [39] \"+\"                                                                                                      #> [40] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                   #> [41] \"F2-1a\"                                                                                                  #> [42] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"          #> [43] \"+\"                                                                                                      #> [44] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"          #> [45] \"F2-2a\"                                                                                                  #> [46] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                   #> [47] \"+\"                                                                                                      #> [48] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                   #> [49] \"F2-2b\"                                                                                                  #> [50] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                #> [51] \"+\"                                                                                                      #> [52] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                #> [53] \"F2-2c\"                                                                                                  #> [54] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"             #> [55] \"+\"                                                                                                      #> [56] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"             #> [57] \"F3-1a\"                                                                                                  #> [58] \"GGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [59] \"+\"                                                                                                      #> [60] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"       #> [61] \"F3-1b\"                                                                                                  #> [62] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [63] \"+\"                                                                                                      #> [64] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"       #> [65] \"F3-2a\"                                                                                                  #> [66] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"          #> [67] \"+\"                                                                                                      #> [68] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"          #> [69] \"F3-2b\"                                                                                                  #> [70] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA\"             #> [71] \"+\"                                                                                                      #> [72] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"             #> [73] \"F3-2c\"                                                                                                  #> [74] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                #> [75] \"+\"                                                                                                      #> [76] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                #> [77] \"F3-3a\"                                                                                                  #> [78] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [79] \"+\"                                                                                                      #> [80] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"       #> [81] \"F3-4a\"                                                                                                  #> [82] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"       #> [83] \"+\"                                                                                                      #> [84] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"       #> [85] \"F3-4b\"                                                                                                  #> [86] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA\"                      #> [87] \"+\"                                                                                                      #> [88] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                      #> [89] \"F3-4c\"                                                                                                  #> [90] \"GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA\"             #> [91] \"+\"                                                                                                      #> [92] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\""},{"path":"https://ejade42.github.io/ggDNAvis/reference/write_modified_fastq.html","id":null,"dir":"Reference","previous_headings":"","what":"Write modification information stored in dataframe back to modified FASTQ — write_modified_fastq","title":"Write modification information stored in dataframe back to modified FASTQ — write_modified_fastq","text":"function takes dataframe containing DNA modification information (e.g. produced read_modified_fastq()) writes back modified FASTQ, equivalent produced via samtools fastq -T MM,ML. Arguments give names columns within dataframe read. multiple types modification assessed (e.g. methylation hydroxymethylation), multiple colnames must provided locations probabilites, multiple prefixes (e.g. \"C+h?\") must provided. IMPORTANT: three vectors must length, modification types must consistent order (e.g. writing hydroxymethylation methylation order, must H M three vectors never vice versa). quality known (e.g. FASTA step point pipeline), quality argument can set NA fill quality scores \"B\". behaviour SAMtools v1.21 converting FASTA SAM/BAM FASTQ. really know SAMtools decided default quality \"B\" probably reason stuck . Default arguments set work included example_many_sequences data.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/write_modified_fastq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write modification information stored in dataframe back to modified FASTQ — write_modified_fastq","text":"","code":"write_modified_fastq(   dataframe,   filename = NA,   read_id_colname = \"read\",   sequence_colname = \"sequence\",   quality_colname = \"quality\",   locations_colnames = c(\"hydroxymethylation_locations\", \"methylation_locations\"),   probabilities_colnames = c(\"hydroxymethylation_probabilities\",     \"methylation_probabilities\"),   modification_prefixes = c(\"C+h?\", \"C+m?\"),   include_blank_tags = TRUE,   return = FALSE )"},{"path":"https://ejade42.github.io/ggDNAvis/reference/write_modified_fastq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write modification information stored in dataframe back to modified FASTQ — write_modified_fastq","text":"dataframe dataframe. Dataframe containing modification information write back modified FASTQ. Must columns unique read ID, DNA sequence, least one set locations probabilities particular modification type (e.g. 5C methylation). filename character. File write modified FASTQ . Recommended end .fastq (warns works ). set NA (default), file output, may useful testing/debugging. read_id_colname character. name column within dataframe contains unique ID read. Defaults \"read\". sequence_colname character. name column within dataframe contains DNA sequence read. Defaults \"sequence\". values within column must DNA sequences e.g. \"GGCGGC\". quality_colname character. name column within dataframe contains FASTQ quality scores read. Defaults \"quality\". scores known, can set NA fill quality \"B\". NA, must correspond column values FASTQ quality scores e.g. \"$12\\\">/2C;4:9F8:816E,6C3*,\" - see fastq_quality_scores. locations_colnames character vector. Vector names columns within dataframe contain modification locations. Defaults c(\"hydroxymethylation_locations\", \"methylation_locations\"). values within columns must comma-separated strings indices modification assessed, produced vector_to_string(), e.g. \"3,6,9,12\". fail locations instances target base (e.g. \"C\" \"C+m?\"), SAMtools tag system work otherwise. One consequence sequences reversed via merge_methylation_with_metadata() helpers, written FASTQ unless modification locations symmetric e.g. CpG offset set 1 reversing (see reverse_locations_if_needed()). probabilities_colnames character vector. Vector names columns within dataframe contain modification probabilities. Defaults c(\"hydroxymethylation_probabilities\", \"methylation_probabilities\"). values within columns must comma-separated strings modification probabilities, produced vector_to_string(), e.g. \"0,255,128,78\". modification_prefixes character vector. Vector prefixes used MM tags specifying modification type. usually generated Dorado/Guppy based original modified basecalling settings, details can found SAM optional tag specifications. Defaults c(\"C+h?\", \"C+m?\").locations_colnames, probabilities_colnames, modification_prefixes must length e.g. 2 2 modification types assessed. include_blank_tags logical. Boolean specifying particular read assessed locations given modification type modification_prefixes. TRUE (default), blank tags written e.g. \"C+h?;\" (whereas normal, non-blank tag looks like \"C+h?,0,0,0,0;\"). FALSE, tags assessed locations read written . return logical. Boolean specifying whether function return FASTQ (character vector line FASTQ), otherwise return invisible(NULL). Defaults FALSE.","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/write_modified_fastq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write modification information stored in dataframe back to modified FASTQ — write_modified_fastq","text":"character vector. resulting modified FASTQ file character vector constituent lines (invisible(NULL) return FALSE). probably mostly useful debugging, setting filename within function directly writes FASTQ via writeLines(). Therefore, defaults returning invisible(NULL).","code":""},{"path":"https://ejade42.github.io/ggDNAvis/reference/write_modified_fastq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write modification information stored in dataframe back to modified FASTQ — write_modified_fastq","text":"","code":"## Write to FASTQ (using filename = NA, return = FALSE ## to view as char vector rather than writing to file) write_modified_fastq(     example_many_sequences,     filename = NA,     read_id_colname = \"read\",     sequence_colname = \"sequence\",     quality_colname = \"quality\",     locations_colnames = c(\"hydroxymethylation_locations\",                            \"methylation_locations\"),     probabilities_colnames = c(\"hydroxymethylation_probabilities\",                                \"methylation_probabilities\"),     modification_prefixes = c(\"C+h?\", \"C+m?\"),     return = TRUE ) #>  [1] \"F1-1a\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,26,60,61,60,30,59,2,46,57,64,54,63,52,18,53,34,52,50,39,46,55,54,34,29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41\"                                                                #>  [2] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                                                                                                                                                       #>  [3] \"+\"                                                                                                                                                                                                                                                                                                                                            #>  [4] \")8@!9:/0/,0+-6?40,-I601:.';+5,@0.0%)!(20C*,2++*(00#/*+3;E-E)<I5.5G*CB8501;I3'.8233'3><:13)48F?09*>?I90\"                                                                                                                                                                                                                                       #>  [5] \"F1-1b\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,10,44,39,64,20,36,11,63,50,54,64,38,46,41,49,2,10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253\"                                                                                                                                        #>  [6] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                                                                                                                                                                                              #>  [7] \"+\"                                                                                                                                                                                                                                                                                                                                            #>  [8] \"60-7,7943/*=5=)7<53-I=G6/&/7?8)<$12\\\">/2C;4:9F8:816E,6C3*,1-2139\"                                                                                                                                                                                                                                                                             #>  [9] \"F1-1c\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,40,63,58,55,60,56,64,56,64,47,46,17,55,52,64,33,63,64,47,37,206,141,165,80,159,84,128,173,124,62,195,19,79,183,129,39,129,126,192,45\"                                                                                          #> [10] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                                                                                                                                                                      #> [11] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [12] \";F42DF52#C-*I75!4?9>IA0<30!-:I:;+7!:<7<8=G@5*91D%193/2;><IA8.I<.722,68*!25;69*<<8C9889@\"                                                                                                                                                                                                                                                      #> [13] \"F1-1d\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,33,29,10,55,3,46,53,54,64,12,63,27,24,4,43,21,64,60,17,55,216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82\"                                                                                                   #> [14] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                                                                                                                                                                            #> [15] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [16] \":<*1D)89?27#8.3)9<2G<>I.=?58+:.=-8-3%6?7#/FG)198/+3?5/0E1=D9150A4D//650%5.@+@/8>0\"                                                                                                                                                                                                                                                            #> [17] \"F1-1e\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,57,18,64,31,63,40,23,61,55,34,23,35,23,30,29,24,64,53,7,54,170,236,120,36,139,50,229,99,79,41,229,42,230,34,34,27,130,77,7,79\"                                                                                                 #> [18] \"GGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                                                                                                                                                                #> [19] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [20] \";4*2E3-48?@6A-!00!;-3%:H,4H>H530C(85I/&75-62.:2#!/D=A?8&7E!-@:=::5,)51,97D*04'2.!20@/;6)947<6\"                                                                                                                                                                                                                                                #> [21] \"F1-2a\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,49,9,63,52,41,30,56,33,29,63,9,52,23,12,189,9,144,71,52,34,83,40,33,111,10,182,26,242\"                                                                                                                                                                 #> [22] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                                                                                                                                                                                                                                                              #> [23] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [24] \"E6(<)\\\"-./EE<(5:47,(C818I9CC1=.&)4G6-7<(*\\\"(,2C>8/5:0@@).A$97I!-<\"                                                                                                                                                                                                                                                                            #> [25] \"F1-2b\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,27,44,20,13,51,28,41,48,19,1,14,64,52,48,64,64,31,56,233,241,71,31,203,190,234,254,240,124,72,64,128,127\"                                                                                                                                      #> [26] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                                                                                                                                                                                                                                                        #> [27] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [28] \"F='I#*5I:<F?)<4G3&:95*-5?1,!:9BD4B5.-27577<2E9)2:189B.5/*#7;;'**.7;-!\"                                                                                                                                                                                                                                                                        #> [29] \"F1-3a\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,55,10,59,28,62,20,64,21,62,59,29,64,4,56,64,59,60,49,63,5,81,245,162,32,108,233,119,232,152,161,222,128,251,83,123,91,160,189,144,250\"                                                                                         #> [30] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                                                                                                                                                                      #> [31] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [32] \"?;.*26<C-8B,3#8/,-9!1++:94:/!A317=9>502=-+8;$=53@D*?/6:6&0D7-.@8,5;F,1?0D?$9'&665B8.604\"                                                                                                                                                                                                                                                      #> [33] \"F1-3b\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,62,63,45,19,32,46,3,61,0,159,42,80,46,84,86,52,8,92,102,4,138,20,147,112,58,21,217,60,252,153,255,96,142,110,147,110,57,22,163,110,19,205,83,193\"                                                                      #> [34] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                                                                                                                                                                                                                                                            #> [35] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [36] \"*46.5//3:37?24:(:0*#.))E)?:,/172=2!4\\\">.*/;\\\"8+5<;D6.I2=>:C3)108,<)GC161)!55E!.>86/\"                                                                                                                                                                                                                                                          #> [37] \"F1-3c\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,80,43,103,71,21,112,47,126,21,40,80,35,142,1,238,1,79,111,20,149,181,109,88,194,108,143,30,77,122,88,153,19,244,6,215,161,79,189\"                                                                                                  #> [38] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGA\"                                                                                                                                                                                                                                                         #> [39] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [40] \"736/A@B121C269<2I,'5G66>46A6-9*&4*;4-E4C429?I+3@83(234E0%:43;!/3;2+956A0)(+'5G4=*3;1\"                                                                                                                                                                                                                                                         #> [41] \"F2-1a\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,68,1,220,4,42,36,35,57,3,90,56,79,92,19,93,36,130,47,82,1,109,104,58,11,83,10,86,49,163,253,33,225,207,210,213,187,251,163,168,135,81,196,134,187,78,103,52,251,144,71,47,193,145,238,163,179\" #> [42] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                                                                                                                                                                #> [43] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [44] \"=<\/-I354/,*>+<CA40*537/;<@I7/4%6192'5'>#4:&C,072+90:0+4;74\\\"D5,38&<7A?00+1>G>#=?;,@<<1=64D=!1&\"                                                                                                                                                                                                                                               #> [45] \"F2-2a\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,93,18,125,104,6,44,74,17,25,136,42,66,26,88,129,5,89,114,14,133,40,1,145,82,49,122,217,108,8,66,85,34,127,205,86,130,126,203,145,27,206,145,54,191,78,125,252,108,62,55\"                                   #> [46] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                                                                                                                                                                         #> [47] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [48] \";1>:5417*<1.2H#260197.;7<(-3?0+=:)ID'I$6*128*!4.7-=5;+384F!=5>4!93+.6I7+H1-).H><68;7\"                                                                                                                                                                                                                                                         #> [49] \"F2-2b\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,17,3,130,28,84,5,50,95,55,112,49,67,7,106,67,0,72,21,209,3,112,60,28,6,188,4,176,250,122,197,146,246,203,136,152,67,71,17,144,67,1,150,133,215,8,153,68,31,26,191,4,13\"                                #> [50] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                                                                                                                                                                      #> [51] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [52] \"7?38,EC#3::=1)8&;<\\\">3.9BE)1661!2)5-4.11B<3)?')-+,B4.<7)/:IE=5$.3:66G9216-C20,>(0848(1$-\"                                                                                                                                                                                                                                                     #> [53] \"F2-2c\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,3,123,22,121,19,198,3,23,95,102,45,55,54,9,51,53,135,39,83,22,32,72,98,5,184,24,38,191,91,194,96,204,7,129,209,139,68,88,94,109,234,200,188,72,116,73,178,209,167,105,243,62,155,193\"              #> [54] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                                                                                                                                                                   #> [55] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [56] \"@86,/+6=8/;9=1)48E494IB3456/6.*=<\/B32+5469>8?@!1;*+81$>-99D7<@1$6B'?462?CE+=1+95=G?.6CA%>2\"                                                                                                                                                                                                                                                   #> [57] \"F3-1a\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,59,157,11,112,51,2,116,77,6,133,93,0,114,32,17,74,103,177,29,162,79,90,250,137,113,242,115,49,253,140,196,233,174,104\"                                                                                                                     #> [58] \"GGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"                                                                                                                                                                                                                                             #> [59] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [60] \"/*2<C643?*8?@9)-.'5A!=3-=;6,.%H3-!10'I>&@?;96;+/+36;:C;B@/=:6,;61>?>!,>.97@.48B38(;7;1F464=-7;)7\"                                                                                                                                                                                                                                             #> [61] \"F3-1b\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,61,89,30,41,29,68,15,170,7,133,86,26,55,54,88,16,13,63,22,104,37,50,49,104,89,213,51,220,101,39,87,94,109,48,168,235,187,225\"                                                                                                      #> [62] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"                                                                                                                                                                                                                                             #> [63] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [64] \"/C<$>7/1(9%4:6>6I,D%*,&D?C/6@@;7)83.E.7:@9I906<!4536!850!164/8,<=?=15A;8B/5B364A66.1%9=(9876E8C:\"                                                                                                                                                                                                                                             #> [65] \"F3-2a\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,11,195,26,74,62,93,1,139,5,178,33,3,158,65,76,3,13,225,243,50,121,98,95,7,237,105,244,69,132,249,94,79,9,170,235,11\"                                                                                                                   #> [66] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"                                                                                                                                                                                                                                                #> [67] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [68] \":0I4099<,4E01;/@96%2I2<,%<C&=81F+4<*@4A5.('4!%I3CE657<=!5;37>4D:%3;7'\\\"4<.9;?;7%0>:,84B512,B7/\"                                                                                                                                                                                                                                               #> [69] \"F3-2b\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,9,13,165,10,0,10,104,65,78,43,124,87,0,95,19,2,73,51,190,33,181,255,241,151,186,124,196,1,142,117,84,213,249,168\"                                                                                                                          #> [70] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA\"                                                                                                                                                                                                                                                   #> [71] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [72] \"9>124!752+@06I/.72097*';-+A60=B?+/8'15477>4-435D;G@G'./21:(0/1/A=7'I>A\\\"3=9;;12,@\\\"2=3D=,458\"                                                                                                                                                                                                                                                 #> [73] \"F3-2c\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,191,30,16,5,136,30,35,156,75,19,90,112,9,76,133,75,47,0,24,17,60,209,185,249,68,224,124,78,101,194,26,107,168,75,53,1,27,55,29,175\"                                                                                            #> [74] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                                                                                                                                                                                                                                                      #> [75] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [76] \"0/2>@/6+-/(!=9-?G!AA70*,/!/?-E46:,-1G94*491,,38?(-!6<8A;/C9;,3)4C06=%',86A)1!E@/24G59<<\"                                                                                                                                                                                                                                                      #> [77] \"F3-3a\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,24,3,3,78,63,47,66,155,13,19,109,141,87,2,55,43,24,83,161,49,251,241,176,189,187,166,43,235,144,137,5,93,175,106,193,198,146,48\"                                                                                                   #> [78] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"                                                                                                                                                                                                                                             #> [79] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [80] \"$<,5\\\"7+!$';8<0794*@FI>34224!57+#1!F<+53$,?)-.A3;=1*71C02<.5:1)82!86$03/;%+1C3+D3;@9B-E#+/70;9<D'\"                                                                                                                                                                                                                                            #> [81] \"F3-4a\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,36,44,73,14,35,20,6,162,33,32,108,24,113,116,11,10,111,207,6,21,225,193,24,159,106,198,206,247,55,221,106,131,198,34,105,169,231,88,27,238,51,14\"                                                                          #> [82] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"                                                                                                                                                                                                                                             #> [83] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [84] \"?2-#-2\\\"1:(5(4>!I)>I,.?-+EG3IH4-.C:;570@2I;?D5#/;A7=>?<3?080::459*?8:3\\\"<2;I)C1400)6:3%19./);.I?35\"                                                                                                                                                                                                                                           #> [85] \"F3-4b\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,29,9,79,29,15,95,14,82,81,43,11,25,98,35,18,53,112,2,57,31,109,86,70,169,200,112,237,69,168,97,239,188,150,208,225,190,128,252,142,224\"                                                                                        #> [86] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA\"                                                                                                                                                                                                                                                            #> [87] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [88] \".85$#;!1F$8E:B+;7CI6@11/'65<3,4G:8@GF1413:0)3CH1=44.%G=#2E67=?;9DF7358.;(I!74:1I4\"                                                                                                                                                                                                                                                            #> [89] \"F3-4c\\tMM:Z:C+h?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,52,87,155,117,2,0,3,50,81,184,75,74,60,97,15,8,46,188,81,161,156,9,65,198,255,245,191,174,63,155,146,13,95,228,100,132,45,49\"                                                                                                      #> [90] \"GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA\"                                                                                                                                                                                                                                                   #> [91] \"+\"                                                                                                                                                                                                                                                                                                                                            #> [92] \"5@<733';9+3BB)=69,3!.2B*86'8E>@3?!(36:<002/4>:1.43A!+;<.3G*G8?0*991,B(C/\\\"I9*1-86)8.;;5-0+=\"                                                                                                                                                                                                                                                   ## Write methylation only, and fill in qualities with \"B\" write_modified_fastq(     example_many_sequences,     filename = NA,     read_id_colname = \"read\",     sequence_colname = \"sequence\",     quality_colname = NA,     locations_colnames = c(\"methylation_locations\"),     probabilities_colnames = c(\"methylation_probabilities\"),     modification_prefixes = c(\"C+m?\"),     return = TRUE ) #>  [1] \"F1-1a\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,29,159,155,159,220,163,2,59,170,131,177,139,72,235,75,214,73,68,48,59,81,77,41\"                                      #>  [2] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                      #>  [3] \"+\"                                                                                                                                                                                           #>  [4] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                      #>  [5] \"F1-1b\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,10,56,207,134,233,212,12,116,68,78,129,46,194,51,66,253\"                                                                           #>  [6] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                                             #>  [7] \"+\"                                                                                                                                                                                           #>  [8] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                                             #>  [9] \"F1-1c\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,206,141,165,80,159,84,128,173,124,62,195,19,79,183,129,39,129,126,192,45\"                                                  #> [10] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                     #> [11] \"+\"                                                                                                                                                                                           #> [12] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                     #> [13] \"F1-1d\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,216,221,11,81,4,61,180,79,130,13,144,31,228,4,200,23,132,98,18,82\"                                                         #> [14] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                           #> [15] \"+\"                                                                                                                                                                                           #> [16] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                           #> [17] \"F1-1e\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,170,236,120,36,139,50,229,99,79,41,229,42,230,34,34,27,130,77,7,79\"                                                        #> [18] \"GGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                               #> [19] \"+\"                                                                                                                                                                                           #> [20] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                               #> [21] \"F1-2a\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,189,9,144,71,52,34,83,40,33,111,10,182,26,242\"                                                                                         #> [22] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                                                                                                             #> [23] \"+\"                                                                                                                                                                                           #> [24] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                                             #> [25] \"F1-2b\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,31,56,233,241,71,31,203,190,234,254,240,124,72,64,128,127\"                                                                         #> [26] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGAGGCGGCGGAGGAGGAGGCGGCGGA\"                                                                                                                       #> [27] \"+\"                                                                                                                                                                                           #> [28] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                                       #> [29] \"F1-3a\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,81,245,162,32,108,233,119,232,152,161,222,128,251,83,123,91,160,189,144,250\"                                               #> [30] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                     #> [31] \"+\"                                                                                                                                                                                           #> [32] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                     #> [33] \"F1-3b\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,147,112,58,21,217,60,252,153,255,96,142,110,147,110,57,22,163,110,19,205,83,193\"                                       #> [34] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                                                                                                           #> [35] \"+\"                                                                                                                                                                                           #> [36] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                           #> [37] \"F1-3c\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,149,181,109,88,194,108,143,30,77,122,88,153,19,244,6,215,161,79,189\"                                                         #> [38] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGA\"                                                                                                        #> [39] \"+\"                                                                                                                                                                                           #> [40] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                        #> [41] \"F2-1a\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,163,253,33,225,207,210,213,187,251,163,168,135,81,196,134,187,78,103,52,251,144,71,47,193,145,238,163,179\" #> [42] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                               #> [43] \"+\"                                                                                                                                                                                           #> [44] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                               #> [45] \"F2-2a\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,122,217,108,8,66,85,34,127,205,86,130,126,203,145,27,206,145,54,191,78,125,252,108,62,55\"                        #> [46] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                        #> [47] \"+\"                                                                                                                                                                                           #> [48] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                        #> [49] \"F2-2b\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,176,250,122,197,146,246,203,136,152,67,71,17,144,67,1,150,133,215,8,153,68,31,26,191,4,13\"                     #> [50] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                     #> [51] \"+\"                                                                                                                                                                                           #> [52] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                     #> [53] \"F2-2c\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,191,91,194,96,204,7,129,209,139,68,88,94,109,234,200,188,72,116,73,178,209,167,105,243,62,155,193\"           #> [54] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGA\"                                                                                                  #> [55] \"+\"                                                                                                                                                                                           #> [56] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                  #> [57] \"F3-1a\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,177,29,162,79,90,250,137,113,242,115,49,253,140,196,233,174,104\"                                                                 #> [58] \"GGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"                                                                                            #> [59] \"+\"                                                                                                                                                                                           #> [60] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                            #> [61] \"F3-1b\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,104,37,50,49,104,89,213,51,220,101,39,87,94,109,48,168,235,187,225\"                                                          #> [62] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"                                                                                            #> [63] \"+\"                                                                                                                                                                                           #> [64] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                            #> [65] \"F3-2a\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,243,50,121,98,95,7,237,105,244,69,132,249,94,79,9,170,235,11\"                                                                  #> [66] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"                                                                                               #> [67] \"+\"                                                                                                                                                                                           #> [68] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                               #> [69] \"F3-2b\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,51,190,33,181,255,241,151,186,124,196,1,142,117,84,213,249,168\"                                                                  #> [70] \"GGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGA\"                                                                                                  #> [71] \"+\"                                                                                                                                                                                           #> [72] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                  #> [73] \"F3-2c\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,60,209,185,249,68,224,124,78,101,194,26,107,168,75,53,1,27,55,29,175\"                                                      #> [74] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGCGGA\"                                                                                                     #> [75] \"+\"                                                                                                                                                                                           #> [76] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                     #> [77] \"F3-3a\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,49,251,241,176,189,187,166,43,235,144,137,5,93,175,106,193,198,146,48\"                                                       #> [78] \"GGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"                                                                                            #> [79] \"+\"                                                                                                                                                                                           #> [80] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                            #> [81] \"F3-4a\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,193,24,159,106,198,206,247,55,221,106,131,198,34,105,169,231,88,27,238,51,14\"                                            #> [82] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGA\"                                                                                            #> [83] \"+\"                                                                                                                                                                                           #> [84] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                            #> [85] \"F3-4b\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,109,86,70,169,200,112,237,69,168,97,239,188,150,208,225,190,128,252,142,224\"                                               #> [86] \"GGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGTGGTGGCGGCGGCGGCGGA\"                                                                                                           #> [87] \"+\"                                                                                                                                                                                           #> [88] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"                                                                                                           #> [89] \"F3-4c\\tMM:Z:C+m?,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;\\tML:B:C,161,156,9,65,198,255,245,191,174,63,155,146,13,95,228,100,132,45,49\"                                                         #> [90] \"GGCGGCGGCGGCGGCGGCGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGAGGAGGCGGCGGCGGA\"                                                                                                  #> [91] \"+\"                                                                                                                                                                                           #> [92] \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\""},{"path":"https://ejade42.github.io/ggDNAvis/news/index.html","id":"ggdnavis-020","dir":"Changelog","previous_headings":"","what":"ggDNAvis 0.2.0","title":"ggDNAvis 0.2.0","text":"Initial CRAN release Initial functionality: Visualise single DNA sequences, multiple DNA sequences, DNA modification (e.g. methylation). Read write FASTQ, including modified FASTQ produced -T MM,ML stores modification information header rows. Intelligently merge metadata including read direction, reverse information reverse reads make reads “forward” versions.","code":""}]
